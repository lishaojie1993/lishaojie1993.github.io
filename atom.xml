<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>睡到自然醒</title>
  
  <subtitle>Do what you love,Love what you do.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lishaojie1993.gitee.io/"/>
  <updated>2020-05-12T04:01:16.022Z</updated>
  <id>https://lishaojie1993.gitee.io/</id>
  
  <author>
    <name>睡到自然醒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人网站如何被百度收录</title>
    <link href="https://lishaojie1993.gitee.io/2020/04/29/baidu-push/"/>
    <id>https://lishaojie1993.gitee.io/2020/04/29/baidu-push/</id>
    <published>2020-04-29T08:08:20.000Z</published>
    <updated>2020-05-12T04:01:16.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检测是否被收录"><a href="#检测是否被收录" class="headerlink" title="检测是否被收录"></a>检测是否被收录</h2><p>我们要想查看自己的网站有没有被谷歌站点地图或者百度资源搜索平台收录，只需要在搜索栏输入<code>site:</code>后面跟你的域名或者地址就可以查看了，有收录的话会显示你网站中的内容，如果没有被收录进去的话会显示“没有找到相关网页”。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gear0ez96nj31au0jq46i.jpg" alt></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1geappoki70j316i0j4gqr.jpg" alt></p><p>这里可以看出，Google是成功收录了的，不过百度还没有收录。接下来看看如何才能被成功收录。</p><h2 id="谷歌站点地图"><a href="#谷歌站点地图" class="headerlink" title="谷歌站点地图"></a>谷歌站点地图</h2><p>首先进入谷歌站点地图页面：<a href="https://search.google.com/search-console" target="_blank" rel="noopener">https://search.google.com/search-console</a></p><p>如何使用sitemap.xml提交给谷歌站点地图网上教程很多，也很简单，这里不再赘述。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1geapiibmajj31ia0mm42n.jpg" alt></p><h2 id="百度资源搜索平台"><a href="#百度资源搜索平台" class="headerlink" title="百度资源搜索平台"></a>百度资源搜索平台</h2><p>由于特殊原因，官方也没有解释，最近提交sitemap给百度一直显示等待状态，也就是通过sitemap提交链接的这条路走不通了，不知道你是不是跟我有相同的遭遇。百度真是不让人省心啊……</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gear1nudn7j31i20fojtu.jpg" alt></p><p>接下来才是本文的重点，在sitemap提交失败的情况下，如何主动把链接推送给搜索资源搜索平台。</p><h3 id="推送方式"><a href="#推送方式" class="headerlink" title="推送方式"></a>推送方式</h3><p>百度资源搜索平台提供了三种提交方式：<strong>主动推送(实时)、自动推送、sitemap</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1geaqa9ins4j31a50u0gti.jpg" alt></p><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>这里我们主要介绍如何通过主动实时推送到搜索引擎，百度也提供了示例，不过我猜非计算机行业看着还是一头雾水，下面我教你通过官方提供的接口调用地址，以post的方式推送链接给百度。废话不多说，直接上代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLConnection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @create 2020-04-29 23:27 * @function: 主动推送链接给百度资源搜索平台 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaiduPushTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">Post</span><span class="token punctuation">(</span>String PostUrl<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> Parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> PostUrl <span class="token operator">||</span> null <span class="token operator">==</span> Parameters <span class="token operator">||</span> Parameters<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedReader in <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URLConnection conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>PostUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">,</span> <span class="token string">"data.zz.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"curl/7.12.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token string">"83"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String param <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> Parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>                param <span class="token operator">+=</span> s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">+=</span> line<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送post请求出现异常！"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBaidu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里写网站的服务器连接，在你的百度站长链接提交页面复制属于你的链接和token</span>        String url <span class="token operator">=</span> <span class="token string">"http://data.zz.baidu.com/urls?site=https://www.xxxx.com&amp;token=xxx"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> param <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这里写你要提交的链接</span>                <span class="token string">"https://www.xxxx.com/xxx/"</span><span class="token punctuation">,</span>                <span class="token string">"https://www.xxxx.com/xxx/"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> <span class="token function">Post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果是"</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果是{"remain":2941,"success":55}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件爬虫"><a href="#文件爬虫" class="headerlink" title="文件爬虫"></a>文件爬虫</h2><p>如果你的网站内容比较丰富，通过sitemap获取到的链接比较多，一个个复制很显然效率太低，我再附赠一段简单的爬虫代码，把你想要的资源文件拷贝到本地，稍加修改后通过爬虫获取，然后再把结果复制到上面的推送链接代码中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpiderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/lishaojie/IdeaProjects/sitemap.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str<span class="token operator">=</span>null<span class="token punctuation">;</span>        String regex<span class="token operator">=</span><span class="token string">"^(?:https?://)?[\\w]{1,}(?:\\.?[\\w]{1,})+[\\w-_/?&amp;=#%:]*$"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正则</span>        Pattern pattern<span class="token operator">=</span>Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">=</span>buf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Matcher matcher<span class="token operator">=</span>pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码中的正则表达式可以任意获取你想要的内容，今天先分享到这里，如果对你有帮助可以在文末赞赏支持一下！谢谢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;检测是否被收录&quot;&gt;&lt;a href=&quot;#检测是否被收录&quot; class=&quot;headerlink&quot; title=&quot;检测是否被收录&quot;&gt;&lt;/a&gt;检测是否被收录&lt;/h2&gt;&lt;p&gt;我们要想查看自己的网站有没有被谷歌站点地图或者百度资源搜索平台收录，只需要在搜索栏输入&lt;code&gt;s
      
    
    </summary>
    
    
    
      <category term="经验分享" scheme="https://lishaojie1993.gitee.io/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>微服务-SpringCloud</title>
    <link href="https://lishaojie1993.gitee.io/2020/04/20/springcloud/"/>
    <id>https://lishaojie1993.gitee.io/2020/04/20/springcloud/</id>
    <published>2020-04-20T14:45:14.000Z</published>
    <updated>2020-05-12T04:06:17.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作(通常是基于HTTP协议的 RESTful API)。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><h3 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h3><p>SpringCloud是分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdm5rrlf2wj31j90u0b2a.jpg" alt="SpringCloud相关优质项目"></p><h2 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h2><ul><li>服务注册与发现</li><li>服务调用</li><li>负载均衡</li><li>服务降级</li><li>服务熔断</li><li>服务监控</li><li>服务网关</li><li>配置中心管理</li><li>服务消息队列</li><li>全链路追踪</li><li>自动化构建部署</li><li>服务定时任务调度操作</li></ul><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>springboot源码地址：<a href="https://github.com/spring-projects/spring-boot/releases" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/releases</a></p><h3 id="SpringCloud版本"><a href="#SpringCloud版本" class="headerlink" title="SpringCloud版本"></a>SpringCloud版本</h3><p>Spring Cloud采用了<strong>英国伦敦地铁站</strong>的名称来命名，并由地铁站名称字母A-Z依次类推的形式来发布迭代版。</p><p>SpringCloud是一个由许多子项目组成的综合项目，各子项目有不同的发布节奏。为了管理SpringCloud与各子项目的版本依赖关系,发布了一个清单，其中包括了某个SpringCloud版本对应的子项目版本。 为了避免SpringCloud版本号与子项目版本号混淆，SpringCloud版本采用了名称而非版本号的命名，这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本时间顺序。例如angel是第一个版本, Brixton是第二个版本。当SpringCloud的发布内容积累到临界点或者一个重大BUG被解决后会发布一个”service releases’ 版本，简称SRX版本(X是数字)，比如Greenwich.SR2就是SpringCloud发布的Greenwich版本的第2个SRX版本。</p><h3 id="技术选型参考JSON"><a href="#技术选型参考JSON" class="headerlink" title="技术选型参考JSON"></a>技术选型参考JSON</h3><p>依赖关系地址：<a href="https://start.spring.io/actuator/info" target="_blank" rel="noopener">https://start.spring.io/actuator/info</a></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdm7csa39ej31240m44do.jpg" alt="详细版本参考"></p><h3 id="最终版本确定"><a href="#最终版本确定" class="headerlink" title="最终版本确定"></a>最终版本确定</h3><ul><li>SpringCloud Hoxton.SR1</li><li>SpringBoot 2.2.2 RELEASE</li><li>SpringCloud Alibaba 2.1.0 RELEASE</li></ul><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="SpringCloud停更-升级-替换"><a href="#SpringCloud停更-升级-替换" class="headerlink" title="SpringCloud停更/升级/替换"></a>SpringCloud停更/升级/替换</h3><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdm82c96d7j31rq0jwn6t.jpg" alt="各组件的更新迭代"></p><h3 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h3><p>Eurek采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使佣Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者|服务提供者) ,以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中， 都会有一个注册中心(存放服务地址相关信息(接口地址)。</p><h3 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h3><p>Spring Cloud封装了Netflix公司开发的Eureka模块来实现服务治理</p><p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系和管理比较复杂，所以需要使用服务治理，管理服务与服务之间依赖关系，可以实现服务调用、负载均衡、容错等， 实现服务发现与注册。</p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="显示Run-Dashboard调试框"><a href="#显示Run-Dashboard调试框" class="headerlink" title="显示Run Dashboard调试框"></a>显示Run Dashboard调试框</h3><p>找到父工程项目所在的工作空间，打开.idea文件夹，修改workspace.xml文件，在&lt;component name=”RunDashboard”&gt;下添加</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configurationTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SpringBootApplicationConfigurationType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存文件，重启idea。</p><h3 id="dependencyManagement作用"><a href="#dependencyManagement作用" class="headerlink" title="dependencyManagement作用"></a>dependencyManagement作用</h3><p>Maven使用dependencyManagement元素来提供一种管理依赖版本号的方式。</p><p><strong>通常会在一个组织或者项目的最顶层的父POM中看到dependencyManagement元素</strong>。</p><p>使用pom.xml中的dependencyManagement元素能让所有在子项目中引用一个依赖而不用显式的列出版本号。</p><p>Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后使用这个dependencyManagement元素中指定的版本号。 </p><p>这样做的好处就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要个个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version即可。</p><ul><li><strong>dependencyManagement里只是声明依赖，并不实观引入，因此子项目需要显示的声明需要用的依赖。</strong></li><li>如果不在子项目中声明依赖，是不会从父项目中继承下来的；</li><li>只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom；</li><li>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li></ul><h2 id="服务注册与发现-Eureka"><a href="#服务注册与发现-Eureka" class="headerlink" title="服务注册与发现-Eureka"></a>服务注册与发现-Eureka</h2><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdmpejcx4yj30xw0imgr5.jpg" alt="Eureka架构图" style="zoom:50%;"><ul><li><p>Eureka Server提供服务注册服务</p><p>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p></li><li><p>EurekaClient通过注册中心进行访问</p><p>EurekaClient是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、 使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将 会从服务注册表中把这个服务节点移除(默认90秒)。</p></li></ul><h3 id="Eureka工作流程"><a href="#Eureka工作流程" class="headerlink" title="Eureka工作流程"></a>Eureka工作流程</h3><ol><li>先启动eureka注册中心。</li><li>启动服务提供者payment支付服务。</li><li>支付服务启动后会把自身信息(比如服务地址)以别名方式注册进eureka。</li><li>消费者order服务在需要调用接口时，使用服务别名去注册中心获取实际的RPC远程调用地址。</li><li>消费者获得调用地址后，底层实际是利用HttpClien技术，实现远程调用。</li><li>消费者获得服务地址后会缓存在本地jvm内存中，默认每间隔30秒更新一次服务调用地址。</li></ol><p><strong>微服务RPC远程服务调用最核心的是什么？</strong></p><p>高可用，所以需要搭建Eureka注册中心集群，实现负载均衡+故障容错。</p><h3 id="Eureka的自我保护"><a href="#Eureka的自我保护" class="headerlink" title="Eureka的自我保护"></a>Eureka的自我保护</h3><p>某时刻某一个微服务不可用了，Eureka 不会立刻清理，依旧会对该微服务的信息进行保存。（属于CAP里面的AP分支）</p><p>自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让 Eureka集群更加的健壮、稳定。</p><p>如何关闭自我保护？</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Eureka服务端（注册中心7001）的配置中添加如下修改</span><span class="token attr-name">server</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">    #关闭白我保护制，保证不用服务被及时踢除，默认是true</span><span class="token attr-name">    enable-self-preservation</span><span class="token punctuation">:</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true">    #修改心跳间隔是2秒，默认是90秒</span><span class="token attr-name">    eviction-intervall-timer-in-ms</span><span class="token punctuation">:</span> <span class="token attr-value">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Eureka客户端（服务端8001）的配置中添加如下修改</span><span class="token attr-name">instance</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（默认是30秒）</span><span class="token attr-name">    lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">    #Eureka服务端在收到最后一次心跳后等待时同上限，单位为秒（默认是90秒）超时将剔除服务</span><span class="token attr-name">    leasehexpiration-duration-in-seconds</span><span class="token punctuation">:</span><span class="token attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务注册与发现-Zookeeper"><a href="#服务注册与发现-Zookeeper" class="headerlink" title="服务注册与发现-Zookeeper"></a>服务注册与发现-Zookeeper</h2><p>Zookeeper是一个分布式协调工具，可以替代Eureka服务器实现注册中心的功能。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--先排除自带的zookeeper3.5.3--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--添加zookeeper3.4.12版本，保证和自己虚拟机/服务器的zookeeper版本一致--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring</span><span class="token punctuation">:</span><span class="token attr-name">  application</span><span class="token punctuation">:</span><span class="token attr-name">    name</span><span class="token punctuation">:</span> <span class="token attr-value">cloud-provider-payment</span><span class="token attr-name">  cloud</span><span class="token punctuation">:</span><span class="token attr-name">    zookeeper</span><span class="token punctuation">:</span><span class="token attr-name">      connect-string</span><span class="token punctuation">:</span> <span class="token attr-value">10.211.55.4:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment" spellcheck="true">//该注解用于使用consul或者zookeeper作为注册中心时添加</span><span class="token comment" spellcheck="true">//主启动类...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="服务注册与发现-Consul"><a href="#服务注册与发现-Consul" class="headerlink" title="服务注册与发现-Consul"></a>服务注册与发现-Consul</h2><p>Consul是一开源的分布式服务 发现和配置管理系统，由HashiCorp公司用Go语言开发。</p><p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p><p>它具有很多优点包括：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议支持跨数据中心的WAN集群，提供图形界面，跨平台：支持Linux、Mac、 Windows。</p><h3 id="Consul能做什么"><a href="#Consul能做什么" class="headerlink" title="Consul能做什么"></a>Consul能做什么</h3><ul><li>服务发现：提供HTTP和DNS两种发现方式。</li><li>健康监测：支持多种方式，HTTP、TCP、 Docker、 Shell脚本定制化</li><li>KV存储：Key、Value的存储方式</li><li>多数据中心：Consul支持多数据中心</li><li>可视化web界面</li></ul><h2 id="以上三个注册中心的异同点"><a href="#以上三个注册中心的异同点" class="headerlink" title="以上三个注册中心的异同点"></a>以上三个注册中心的异同点</h2><table><thead><tr><th align="center">组件名</th><th align="center">语言</th><th align="center">CAP</th><th align="center">服务健康检查</th><th align="center">对外暴露接口</th><th align="center">Spring Cloud集成</th></tr></thead><tbody><tr><td align="center">Eureka</td><td align="center">Java</td><td align="center">AP</td><td align="center">可配支持</td><td align="center">HTTP</td><td align="center">已集成</td></tr><tr><td align="center">Zookeeper</td><td align="center">Java</td><td align="center">CP</td><td align="center">支持</td><td align="center">客户端</td><td align="center">已集成</td></tr><tr><td align="center">Consul</td><td align="center">Go</td><td align="center">CP</td><td align="center">支持</td><td align="center">HTTP/DNS</td><td align="center">已集成</td></tr></tbody></table><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><ul><li>C：<strong>Consistency 强一致性</strong></li><li>A：<strong>Availability 高可用性</strong></li><li>P：<strong>Partition tolerance 分区容错性</strong></li></ul><p>CAP理论关注的重点是<strong>数据</strong>，最多只能同时较好的满足两个。</p><p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求。因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类：</p><p>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</p><p>CP - 满足强一致性，分区容错性的系统，通常性能不是特别高。</p><p>AP - 满足高可用性，分区容错性的系统，通常对一致性要求低些。</p><h2 id="服务调用-Ribbon-RestTemplate"><a href="#服务调用-Ribbon-RestTemplate" class="headerlink" title="服务调用-Ribbon+RestTemplate"></a>服务调用-Ribbon+RestTemplate</h2><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡</strong>的工具。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer (简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询,随机连接等)去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><h3 id="Ribbon能做什么"><a href="#Ribbon能做什么" class="headerlink" title="Ribbon能做什么"></a>Ribbon能做什么</h3><p><strong>一句话：客户端的一套负载均衡工具，结合RestTemplate使用。</strong></p><p>LB负载均衡(Load Balance)是什么？</p><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高可用)。<br>常见的负载均衡有软件Nginx, LVS, 硬件F5等。</p><p>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别？</p><ul><li>Nginx是服务负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</li><li>Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</li></ul><p><strong>集中式LB</strong></p><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件,如F5, 也可以是软件,如nginx), 由该设施负把访问请求通过某种策略转发至服务的提供方。 </p><p><strong>进程内LB</strong></p><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p>Ribbon就属于进程内LB，它只是一个库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><h3 id="Ribbon架构说明"><a href="#Ribbon架构说明" class="headerlink" title="Ribbon架构说明"></a>Ribbon架构说明</h3><p>Ribbon其实就是一个软负载均衡的客户端组件,<br>他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdnmsietw4j31bi0rch6r.jpg" alt="Ribbon架构图" style="zoom: 33%;"><p>Ribbon在工作时分成两步</p><p>第一步先选择EurekaServer，它优先选择在同一个区域内负载较少的server.。</p><p>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。</p><p>其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。</p><h3 id="Ribbon核心组件-IRule"><a href="#Ribbon核心组件-IRule" class="headerlink" title="Ribbon核心组件-IRule"></a>Ribbon核心组件-IRule</h3><p>根据特定算法中从服务列表中选取一个要访问的服务。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdnnpcsy55j319m0ggq8n.jpg" alt="IRule接口的实现类"></p><p>常用负载均衡策略</p><ul><li><p><strong>com.netflix.loadbalancer.RoundRobinRule</strong>：轮询（默认）</p></li><li><p><strong>com.netflix.loadbalancer.RandomRule</strong>：随机</p></li><li><p><strong>com.netflix.loadbalancer.RetryRule</strong>：重试</p><p>先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务。</p></li><li><p><strong>WeightedResponseTimeRule</strong></p><p>对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择。</p></li><li><p><strong>BestAvailableRule</strong>：选择一个最好的服务。</p><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。</p></li><li><p><strong>AvailabilityFilteringRule</strong></p><p>先过滤掉故障实例，再选择并发较小的实例。</p></li><li><p><strong>ZoneAvoidanceRule</strong></p><p>默认规则，复合判断server所在区域的性能和server的可用性选择服务器。</p></li></ul><p><strong>如何配置不同的LB策略</strong></p><p>官方文档明确给出了警告:<br>这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribblon客户端所共享，达不到特殊化定制的目的了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cherry<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyselfRule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义LB为随机</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在主启动类OrderMain80中添加如下注解</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> MyselfRule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Ribbon默认轮询负载均衡算法原理</strong></p><p>负载均衡算法: rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始。</p><p>List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(“CLOUD-PAYMENT-SERVICE”);</p><p>如：List [0] instances = 127.0.0.1:8002</p><p>​        List [1] instances = 127.0.0.1:8001</p><p>8001+ 8002组合成为集群，它们共计2台机器，集群总数为2，按照轮询算法原理:</p><ol><li>当总请求数为1时: 1 % 2 = 1 对应下标位置为1，则获得服务地址为127.0.0.1:8001</li><li>当总请求数位2时: 2 % 2 = 0 对应下标位置为0，则获得服务地址为127.0.0.1:8002</li><li>当总请求数位3时: 3 % 2 = 1 对应下标位置为1，则获得服务地址为127.0.0.1:8001</li><li>当总请求数位4时: 4 % 2 = 0 对应下标位置为0，则获得服务地址为127.0.0.1:8002</li></ol><p>如此类推……</p><h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>通过Dash应用查看说明文档。使用restTemplate访问restful接口非常的简单粗暴无脑。</p><p>(urI, requestMap, ResponseBean.class)这三个参数分别代表REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p><strong>getForObject()/getForEntity()</strong></p><ul><li><p>如果使用的是getForObject()，返回对象为Json；</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//log.info("");</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL<span class="token operator">+</span><span class="token string">"/payment/get/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span>CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果使用的是getForEntity()，返回对象为ResponseEntity对象(包含了响应中一些重要信息响应头,响应状态码,响应体等)。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdnnd12irij313u0b849r.jpg" alt="ResponseEntity"></p></li></ul><p><strong>postForObject()/postForEntity()</strong></p><ul><li><p>如果使用的是postForObject()，返回对象为Json；</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/create"</span><span class="token punctuation">)</span><span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//log.info("");</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>PAYMENT_URL<span class="token operator">+</span><span class="token string">"/payment/create"</span><span class="token punctuation">,</span>payment<span class="token punctuation">,</span>CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果使用的是postForEntity()，返回对象为ResponseEntity。</p></li></ul><p><strong>综上，如果返回值需要详细的信息，可使用xxForEntity，如果只是返回简单的Json，可使用xxForObject，推荐使用后者。</strong></p><h2 id="服务调用-OpenFeign"><a href="#服务调用-OpenFeign" class="headerlink" title="服务调用-OpenFeign"></a>服务调用-OpenFeign</h2><p>Feign是一个声明式 Webservice客户端。使用 Feign能让编写 Web service客户端更加简单。它的使用方法是<strong>定义一个服务接口然后在上面添加注解</strong>。 Feign也支持可拔插式的编码器和解码器。 Spring Cloud 对 Feign进行了封装使其支持了 Spring Mvc 标准注解和 Httpmessage Converters。 Feign可以与 Eureka 和 Ribbon 组合使用以支持负载均衡。</p><h3 id="OpenFeign能做什么"><a href="#OpenFeign能做什么" class="headerlink" title="OpenFeign能做什么"></a>OpenFeign能做什么</h3><p><strong>一句话：只需创建一个接口并在接口上添加注解即可。</strong></p><p>Feign旨在使编写 Java Http 客户端变得更容易。</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封裝处理，形成了一套模版化的调用方法。但是在实际开发<br>中，由于对服务依赖的调用可能不止一处，往往个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装<br>这些依赖服务的调用。所以Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在 Feign 的实现下，<strong>我们只需创建一个接口并使用注解的方式来配置它</strong>(以前是Dao接口上面标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可，即可完成对服务提供方的接口绑定，简化了使用 Spring cloud Ribbon 时，自动封装服务调用客户端的开发量。</p><h3 id="OpenFeign集成了Ribbon"><a href="#OpenFeign集成了Ribbon" class="headerlink" title="OpenFeign集成了Ribbon"></a>OpenFeign集成了Ribbon</h3><p>利用Ribbon维护了Payment的服务列表信息，粗通过轮询实现了户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p><table><thead><tr><th align="center">Feign</th><th align="center">OpenFeign</th></tr></thead><tbody><tr><td align="center">Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端。Feign内置了Ribbon，用来做客户端负载均衡去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口就可以调用服务注册中心的服务。</td><td align="center">OpenFeign是Spring Cloud在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。 OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>接口+注解：<strong>微服务调用接口+@FeignClient</strong>    (别忘了在<strong>主启动类上添加@EnableFeignClients</strong>开启Feign)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/feign/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentFeignTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h3><p>OpenFeign默认等待1秒钟，超过后报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span><span class="token attr-name">ribbon</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span><span class="token attr-name">  ReadTimeout</span><span class="token punctuation">:</span> <span class="token attr-value">5000</span><span class="token comment" spellcheck="true">  #指的是建立连接后从服务器读取到可用资源所用的时间</span><span class="token attr-name">  ConnectTimeout</span><span class="token punctuation">:</span> <span class="token attr-value">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OpenFeign日志打印"><a href="#OpenFeign日志打印" class="headerlink" title="OpenFeign日志打印"></a>OpenFeign日志打印</h3><p>Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。说白了就是对Feign接口的调用情况进行监控和输出。</p><p><strong>日志级别</strong></p><ul><li>NONE：默认的，不显示任何日志；</li><li>BASIC：仅记录请求方法、URL、 响应状态码及执行时间；</li><li>HEADERS：除了BASIC定义的信息之外，还有请求和响应的头信息；</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><p><strong>配置日志级别</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cherry<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> feign<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    Logger<span class="token punctuation">.</span>Level <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">logging</span><span class="token punctuation">:</span><span class="token attr-name">  level</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">    #feign日志以什么级别监控哪个接口</span><span class="token attr-name">    com.cherry.springcloud.service.PaymentFeignService</span><span class="token punctuation">:</span> <span class="token attr-value">debug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务降级-Hystrix"><a href="#服务降级-Hystrix" class="headerlink" title="服务降级-Hystrix"></a>服务降级-Hystrix</h2><h3 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h3><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p><p>服务雪崩：多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“<strong>扇出</strong>”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。怎么办？？？</p><h3 id="Hystrix问世"><a href="#Hystrix问世" class="headerlink" title="Hystrix问世"></a>Hystrix问世</h3><p>Hystrix是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库，在分布式系统里，许多依赖不可避兔的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong>。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控(类似熔断保险丝)，<strong>向调用方返回一个符合预期的、可处理的备选响应(FallBack) ，而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h3 id="Hystrix能做什么"><a href="#Hystrix能做什么" class="headerlink" title="Hystrix能做什么"></a>Hystrix能做什么</h3><ul><li><strong>降级</strong>：服务器不可用时返回一个兜底的方案，不要长时间等也不要错误页面；返回友情提示页或者应急处理方案。</li><li><strong>熔断</strong>：系统后端的依赖出现了故障，比如某后台服务器挂掉了，每次请求都报错，后续请求不接收了，稍后再试。</li><li><strong>限流</strong>：高并发流量进来，比如QPS突然飙升到100万，服务会崩溃，限流可以做到10万QPS进入系统，其他90万被拒绝。</li><li><strong>运维监控</strong>：监控+报警+优化。各种异常情况，有问题就及时报警，优化系统的配置和参数。</li><li><strong>资源隔离</strong>：设置某块代码最多只能使用10个线程，不能再多，限定好资源的使用，避免有故障时出现资源被抢占光的情况。</li></ul><p>官方资料：<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><h3 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h3><h4 id="服务降级-fallback"><a href="#服务降级-fallback" class="headerlink" title="服务降级-fallback"></a>服务降级-fallback</h4><blockquote><p><strong>哪些情况会触发服务降级？</strong></p><ul><li>程序异常</li><li>请求超时</li><li>服务熔断</li><li>线程池/信号量打满</li></ul></blockquote><h4 id="服务熔断-break"><a href="#服务熔断-break" class="headerlink" title="服务熔断-break"></a>服务熔断-break</h4><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。<br>当检测到该节点微服务调用响应正常后，恢复调用链路。<br>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败,就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><p>服务熔断类似<strong>保险丝</strong>，当访问次数达到某种限制后，服务降级 -&gt; 服务熔断 -&gt; 逐渐恢复调用链路。</p><blockquote><p><strong>熔断类型</strong></p><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR (平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。</li><li>熔断关闭：熔断关闭不会对服务进行熔断。（相当于保险丝是闭合状态）</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断。</li></ul></blockquote><p><strong>断路器的三个重要参数</strong></p><p>快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</p><p>请求总数阀值：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。</p><p>错误百分比阀值：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</p><blockquote><p><strong>断路器开启和关闭的条件</strong></p><ol><li>当满足一定的阀值的时候( 默认10秒内超过20个请求次数)</li><li>当失败率达到一定的时候(默认10秒内超过50%的请求失败)</li><li>到达以上阀值，<strong>断路器将会开启，此时所有请求都不会走主逻辑，而是让降级逻辑临时代替</strong>。</li><li>一段时间之后(默认是5秒)，这个时候断路器是<strong>半开状态，释放一次请求到原来的主逻辑上</strong>。</li><li>如果成功，断路器会关闭，若失败，继续开启。重复4和5。</li></ol></blockquote><h4 id="服务限流-flowlimit"><a href="#服务限流-flowlimit" class="headerlink" title="服务限流-flowlimit"></a>服务限流-flowlimit</h4><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行。<strong>（alibaba的Sentinel是重点）</strong></p><h3 id="Hystrix实现服务降级"><a href="#Hystrix实现服务降级" class="headerlink" title="Hystrix实现服务降级"></a>Hystrix实现服务降级</h3><p>超时不再等待，出错要有兜底。服务器压力上来后，访问速度变慢，如何解决？</p><ul><li>对方服务(8001)超时或者宕机了，调用者(80)不能一直卡死等待，必须有8001服务降级。</li><li>如果对方服务(8001)OK，调用者(80)自己出故障或有自我要求(自己的等待时间小于服务提供者)，80自己处理降级。</li></ul><h4 id="落地实现"><a href="#落地实现" class="headerlink" title="落地实现"></a>落地实现</h4><p>主启动类激活：@EnableCircuitBreaker</p><p>业务类启用：@HystrixCommand</p><p><strong>服务端降级处理（推荐配置在80客户端）</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdopy00dthj31so0gmniu.jpg" alt="服务降级"></p><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>方案一<strong>全局配置</strong>：通过以上方式对方法进行1对1配置，技术上可以，但是会造成代码膨胀严重，这时可以引入<strong>@DefaultProperties</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"paymentGlobalFallbackMethod"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystrixController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@HystrixCommand</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//全局fallback方法</span>    <span class="token keyword">public</span> String <span class="token function">paymentGlobalFallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"80客户端Global服务降级处理,对方支付系统繁忙,请稍后再试~ \t o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案二<strong>重写接口</strong>：上面的方式还是有缺点，全局fallback方法和Controller在同一个类中，逻辑混乱，下面进一步优化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在80客户端service接口上添加如下注释</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> PaymentFallbackService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//新建PaymentFallbackService类继承PaymentHystrixService，重写其方法</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"-----PaymentFallbackService fallback paymentInfo_OK o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"-----PaymentFallbackService fallback paymentInfo_Timeout o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hystrix实现服务熔断"><a href="#Hystrix实现服务熔断" class="headerlink" title="Hystrix实现服务熔断"></a>Hystrix实现服务熔断</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否开启断路器</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//时间窗口期</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//请求次数</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//失败率达到多少后跳闸</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"********** id 不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String serialNumber <span class="token operator">=</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于 UUID.randomUUID();</span>        <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"调用成功,流水号:"</span><span class="token operator">+</span>serialNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//服务降级,友好返回</span>    <span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"id 不能为负数,请返回重试.o(╥﹏╥)o ~~~ id:"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HystrixDashboard-服务监控"><a href="#HystrixDashboard-服务监控" class="headerlink" title="HystrixDashboard-服务监控"></a>HystrixDashboard-服务监控</h3><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控(Hystrix Dashboard)，Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求，多少成功，多少失败等。</p><p>Netflix通过<br>hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h4 id="配置监控"><a href="#配置监控" class="headerlink" title="配置监控"></a>配置监控</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystrixMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentHystrixMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*此配置是为了服务监控而配置，与服务容错本身无关， springcloud 升级后的坑     *ServletRegistrationBean因为springboot的默认路径不是"/hystrix.stream",     *只要在自己的项目里配置上下面的servlet就可以了*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HystrixMetricsStreamServlet streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启监控"><a href="#开启监控" class="headerlink" title="开启监控"></a>开启监控</h4><p>监控地址：<a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdp4m3zijjj31c80tmgwy.jpg" alt="启动监控"></p><h4 id="如何查看"><a href="#如何查看" class="headerlink" title="如何查看"></a>如何查看</h4><p><strong>7色</strong>：7种颜色表示7个状态。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdp4rlfhrqj310e014tae.jpg" alt="7种颜色"></p><p><strong>1圈</strong>：共有两种含义。</p><ul><li>它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。</li><li>它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。</li></ul><p>所以通过该实心圆的展示，就可以在大量的实例中快速的发现<strong>故障实例和高压力实例</strong>。</p><p><strong>1线</strong>：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的升和下降趋势。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdp4xnsbuvj31rc0qsb0v.jpg" alt></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gdp4z8qqomj31sk08wdr2.jpg" alt></p><h2 id="服务网关-GateWay"><a href="#服务网关-GateWay" class="headerlink" title="服务网关-GateWay"></a>服务网关-GateWay</h2><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和Project Reactor等技术。<br>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p><p>为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底<strong>层则使用了高性能的Reactor模式通信框架Netty</strong>。Spring Cloud Gateway的目标提供统一的路由方式且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/指标和限流。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdqu3ygpy7j310w0pse0a.jpg" alt style="zoom: 50%;"><h3 id="GateWay能做什么"><a href="#GateWay能做什么" class="headerlink" title="GateWay能做什么"></a>GateWay能做什么</h3><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li></ul><h3 id="为什么选择Gateway"><a href="#为什么选择Gateway" class="headerlink" title="为什么选择Gateway"></a>为什么选择Gateway</h3><ul><li><p>netflix不太靠谱，zuul2.0一直跳票，迟迟不发布。</p></li><li><p>SpringCloud Gateway具有以下特性：</p><blockquote><p>基于Spring Framework 5，Project Reactor和Spring Boot 2.0进行构建；</p><p>动态路由：能够匹配任何请求属性，可以对路由指定Predicate (断言)和Filter (过滤器)；</p><p>集成Hystrix的断路器功能；</p><p>集成Spring Cloud服务发现功能；</p><p>易于编写的Predicate (断言)和Filter (过滤器)；</p><p>请求限流功能；</p><p>支持路径重写。</p></blockquote></li><li><p>SpringCloud Gateway与Zuul的区别</p><blockquote><ol><li>Zuul 1.x是个基于阻塞I/O的API Gateway。</li><li>Zuul 1.x基于Servlet 2. 5使用阻塞架构它不支持任何长连接(如WebSocket)。Zuul的设计模式和Nginx较像，每次I/O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul 用Java实现，而JVM本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。</li><li>Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。Zuul 2.x的性能较Zuul 1.x有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway的RPS (每秒请求数) Zuul的1.6倍。</li><li>Spring Cloud Gateway建立在Spring Framework，Project Reactor和Spring Boot2之上，使用非阻塞API。</li><li>Spring Cloud Gateway还支持WebSocket，組与Spring紧密集成拥有更好的开发体验。</li></ol></blockquote></li></ul><h3 id="Gateway的三大核心概念"><a href="#Gateway的三大核心概念" class="headerlink" title="Gateway的三大核心概念"></a>Gateway的三大核心概念</h3><p>Route(路由)：路由是构建网关的基本模块，它由ID，目标URI，一系列的<strong>断言</strong>和<strong>过滤器</strong>组成，如果断言为true则匹配该路由。</p><p>Predicate(断言)：开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由。 </p><p>Filter(过滤)：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p><p>总而言之，web请求通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行些精细化控制。predicate就是我们的匹配条件；而filter就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri就可以实现一个具体的路由了。</p><h3 id="Gateway的工作流程"><a href="#Gateway的工作流程" class="headerlink" title="Gateway的工作流程"></a>Gateway的工作流程</h3><p><strong>路由转发 + 执行过滤链</strong></p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdquv7ak2fj30n80n6mzm.jpg" style="zoom:50%;"><p>客户端向Spring Cloud Gateway发出请求。然后在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler。<br>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。<br>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前( “pre” )或之后( “post” )执行业务逻辑。</p><p>Filter在”pre” 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等。</p><p>在”post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><h3 id="Predicate应用示例"><a href="#Predicate应用示例" class="headerlink" title="Predicate应用示例"></a>Predicate应用示例</h3><ul><li>After Route Predicate：在某某时间之后才生效。（时间格式在9527测试类中生成）</li><li>Before Route Predicate：在某某时间之前生效。</li><li>Between Route Predicate：在两个时间之间生效，两个时间用逗号隔开。</li><li>Cookie Route Predicate：需要两个参数，一个是cookie name，一个是KV键值对或者正则表达式。</li><li>Header Route Predicate：需要两个参数，一个是属性名称和正则表达式，属性值和正则匹配才执行。</li><li>Host Route Predicate：接收一组参数，一组匹配的域名列表，用.号作为分隔符。它通过参数中的主机地址作为匹配规则。</li><li>Method Route Predicate：指定请求方式。</li><li>Path Route Predicate：指定请求路径。</li><li>Query Route Predicate：携带查询条件。</li></ul><p>示例</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring</span><span class="token punctuation">:</span><span class="token attr-name">  application</span><span class="token punctuation">:</span><span class="token attr-name">    name</span><span class="token punctuation">:</span> <span class="token attr-value">cloud-gateway</span><span class="token attr-name">  cloud</span><span class="token punctuation">:</span><span class="token attr-name">    gateway</span><span class="token punctuation">:</span><span class="token attr-name">      discovery</span><span class="token punctuation">:</span><span class="token attr-name">        locator</span><span class="token punctuation">:</span><span class="token attr-name">          enabled</span><span class="token punctuation">:</span> <span class="token attr-value">true #开启从注册中心动态创建路由的功能,利用微服务名进行路由</span><span class="token attr-name">      routes</span><span class="token punctuation">:</span><span class="token attr-name">        -</span> <span class="token attr-value">id: payment_route #路由的ID,没有固定规则但要求唯一,建议配合服务名</span><span class="token comment" spellcheck="true">#          uri: http://localhost:8001</span><span class="token attr-name">          uri</span><span class="token punctuation">:</span> <span class="token attr-value">lb://cloud-payment-service #匹配后提供服务的路由地址</span><span class="token attr-name">          predicates</span><span class="token punctuation">:</span><span class="token attr-name">            -</span> <span class="token attr-value">Path=/payment/get/** #路径相匹配的进行路由</span><span class="token comment" spellcheck="true">#            - After=2020-04-13T11:32:47.584+08:00[Asia/Shanghai] #在该时间后生效</span><span class="token comment" spellcheck="true">#            - Cookie=username,cherry #要携带cookie且名称和值匹配才允许访问</span><span class="token comment" spellcheck="true">#            - Header=X-Request-Id, \d+ #请求头要带有X-Request-Id参数,并且属性值为整数的正则</span><span class="token comment" spellcheck="true">#            - Host=**.lishaojie.top #前面无论是www还是blog都可以访问,其他的不行</span><span class="token comment" spellcheck="true">#            - Method=GET #GET请求才允许访问</span><span class="token comment" spellcheck="true">#            - Query=username, \d+ #要有参数名username并且值还要求为整数才允许访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理。</p><h3 id="自定义全局GlobalFilter"><a href="#自定义全局GlobalFilter" class="headerlink" title="自定义全局GlobalFilter"></a>自定义全局GlobalFilter</h3><p>两个主要接口：implements GlobalFilter，Ordered</p><p>可以做全局日志记录，统一网关鉴权等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*************come in MyLogGateWayFilter:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uname <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*******用户名为null,非法用户.o(╥﹏╥)o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置中心-Config"><a href="#配置中心-Config" class="headerlink" title="配置中心-Config"></a>配置中心-Config</h2><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、 动态的配置管理设施是必不可少的。</p><p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gds4yloggrj31lk0keqfp.jpg" alt="SpringCloud Config" style="zoom: 33%;"><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为<strong>各个不同微服务应用</strong>的所有环境提供了一个<strong>中心化的外部配置</strong>。</p><h3 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h3><p>SpringCloud Config分为服务端和客户端两部分。</p><ul><li>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具紡便的管理和访问配置内容。</li></ul><h3 id="Config能做什么"><a href="#Config能做什么" class="headerlink" title="Config能做什么"></a>Config能做什么</h3><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><blockquote><p>常用形式：/{label}/{name}-{profiles}.yml</p><p>label：分支</p><p>name：服务名</p><p>profiles：环境（dev/test/prod）</p></blockquote><p>applicaiton. yml是用户级的资源配置项</p><p>bootstrap. yml是系统级的，优先级更加高</p><p>Spring Cloud会创建一个”Bootstrap Context”，作为Spring应用的 Application Context的父上下文。初始化时BootstrapContext负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。</p><p>Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。 Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.ymI文件，保证Bootstrap Context和Application Context配置的分离。</p><p>要将Client模块下的application.yml文件改为bootstrap:yml，这是很关键的，因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server</span><span class="token punctuation">:</span><span class="token attr-name">  port</span><span class="token punctuation">:</span> <span class="token attr-value">3355</span><span class="token attr-name">spring</span><span class="token punctuation">:</span><span class="token attr-name">  application</span><span class="token punctuation">:</span><span class="token attr-name">    name</span><span class="token punctuation">:</span> <span class="token attr-value">cloud-config-client</span><span class="token attr-name">  cloud</span><span class="token punctuation">:</span><span class="token attr-name">    config</span><span class="token punctuation">:</span><span class="token attr-name">      label</span><span class="token punctuation">:</span> <span class="token attr-value">master #分支</span><span class="token attr-name">      name</span><span class="token punctuation">:</span> <span class="token attr-value">config #配置文件名称</span><span class="token attr-name">      profile</span><span class="token punctuation">:</span> <span class="token attr-value">dev #读取后缀名称</span><span class="token attr-name">      uri</span><span class="token punctuation">:</span> <span class="token attr-value">http://localhost:3344 #配置中心地址</span><span class="token attr-name">eureka</span><span class="token punctuation">:</span><span class="token attr-name">  client</span><span class="token punctuation">:</span><span class="token attr-name">    service-url</span><span class="token punctuation">:</span><span class="token attr-name">      defaultZone</span><span class="token punctuation">:</span> <span class="token attr-value">http://localhost:7001/eureka</span><span class="token comment" spellcheck="true">#暴露监控端口</span><span class="token attr-name">management</span><span class="token punctuation">:</span><span class="token attr-name">  endpoints</span><span class="token punctuation">:</span><span class="token attr-name">    web</span><span class="token punctuation">:</span><span class="token attr-name">      exposure</span><span class="token punctuation">:</span><span class="token attr-name">        include</span><span class="token punctuation">:</span> <span class="token attr-value">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让运维人员多发送一个刷新命令，手动刷新。</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:3355/actuator/refresh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="消息总线-Bus"><a href="#消息总线-Bus" class="headerlink" title="消息总线-Bus"></a>消息总线-Bus</h2><p>如果想实现分布式<strong>自动刷新配置功能</strong>，需要引入Spring Cloud Bus，配合Spring Cloud Config使用可以实现配置的动态刷新。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gds9xz1ocwj310m0io43t.jpg" alt="Bus"></p><p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。Bus目前支持两种消息代理：RabbitMQ和Kafka。</p><h3 id="SpringCloud-Bus能做什么"><a href="#SpringCloud-Bus能做什么" class="headerlink" title="SpringCloud Bus能做什么"></a>SpringCloud Bus能做什么</h3><p>Spring Cloud Bus能管理和传播分布式系统闸的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><h3 id="什么是总线"><a href="#什么是总线" class="headerlink" title="什么是总线"></a>什么是总线</h3><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线I在总线上的各个实例，都可以方便地广播-些需要让其他连接在该主题上的实例都知道的消息。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>ConfigClient实例都监听MQ中同一个topic(默认是springCloudBus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ol><li><p>利用消息总线触发一个客户端/bus/refresh，从而刷新所有客户端的配置</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdsh8kiqd1j31bm0run7u.jpg" alt="设计思想1" style="zoom:33%;"></li><li><p>利用消息总线触发一个服务端ConfigServer的/bus/refresh端点，从而刷新所有客户端的配置<strong>（推荐）</strong></p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdshbw0mhwj31720skds1.jpg" alt="设计思想2" style="zoom:33%;"></li></ol><p><strong>设计思想2更合适，1不合适的原因如下：</strong></p><ul><li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</li><li>破坏了微服务各节点的对等性。例如利用A通知BC，ABC三个应用是订单集群，这样A和BC的组成不同。</li><li>有一定的局限性。有一-定的局限性。例如微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改。</li></ul><p>全部通知：3344是配置中心的地址</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X POST "http://localhost:3344/actuator/bus-refresh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定点通知，精确通知：cloud-config-client:3355 是应用名称+端口号</p><pre class="line-numbers language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:3344/actuator/bus-refresh/cloud-config-client:3355"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdsizjbmo3j321a0k6498.jpg" alt="总结图" style="zoom:50%;"><h2 id="消息驱动-Stream"><a href="#消息驱动-Stream" class="headerlink" title="消息驱动-Stream"></a>消息驱动-Stream</h2><p>官方定义Spring Cloud Stream是一个构建消息驱动微服务的框架。</p><p>应用程序通过inputs或者outputs与Spring Cloud Stream中binder对象交互。通过我们配置来绑定，而Spring Cloud Stream的<strong>Binder</strong>对象负责与消息中间件交互。所以，我们只需要搞清楚如何与Spring Cloud Stream交互就可以方便使用消息驱动。</p><p>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。</p><p>目前仅支持RabbitMQ、Kafka。</p><h3 id="为什么要用Cloud-Stream"><a href="#为什么要用Cloud-Stream" class="headerlink" title="为什么要用Cloud Stream"></a>为什么要用Cloud Stream</h3><p>为了屏蔽底层消息中间件的差异，降低切换成本，实现统一消息的编程模型。比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange， kafka有Topic和Partitions分区，这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了一种解耦合的方式。</p><h3 id="如何屏蔽底层差异"><a href="#如何屏蔽底层差异" class="headerlink" title="如何屏蔽底层差异"></a>如何屏蔽底层差异</h3><p><strong>通过定义绑定器Binder作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离</strong>。<br>通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件的具体实现。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdsjrv9hlfj30ru0ocgsg.jpg" alt="Binder" style="zoom:33%;"><p>Binder：INPUT对应消费者，OUTPUT对应生产者。</p><p>Stream中的消息通信方式遵循了发布-订阅模式，使用Topic主题进行广播，在RabbitMQ就是Exchange，在Kafka中就是Topic。</p><h3 id="Cloud-Stream的标准流程"><a href="#Cloud-Stream的标准流程" class="headerlink" title="Cloud Stream的标准流程"></a>Cloud Stream的标准流程</h3><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdsk2ex98vj316x0u0wn9.jpg" alt="标准流程" style="zoom: 50%;"><ul><li>Binder：很方便的连接中间件，屏蔽差异。</li><li>Channel：通道是队列Queue的一种抽象，在消息通信系统中就是实现存储和转发的媒介，通过Channel对队列进行设置。</li><li>Source和Sink：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</li></ul><p><strong>编码API和常用注解</strong></p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前只支持RabbitMQ和Kafka</td></tr><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实行了Kafka和RabitMQ的Binder,，通过Binder可以很方便的连接中间件，可以动态的改变消息类型(对应于Kafka的topic，RabbitMQ的exchange)，这些都可以通过配置文件来实现</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>指信道channeI和exchange绑定在一起</td></tr></tbody></table><h3 id="如何解决重复消费"><a href="#如何解决重复消费" class="headerlink" title="如何解决重复消费"></a>如何解决重复消费</h3><p>比如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息，那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。<strong>这时我们就可以使用Stream中的消息分组group来解决</strong>。</p><p><strong>故障现象</strong>：重复消费</p><p><strong>导致原因</strong>：默认分组group是不同的，组流水号不一样，被认为不同组。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdsmeniygvj31860mcjwo.jpg" alt="案例说明" style="zoom: 33%;"><p>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。</p><p><strong>不同组是可以全面消费的(重复消费)，同一组内会发生竞争，只有其中一个可以消费。</strong></p><h3 id="如何防止丢失消息"><a href="#如何防止丢失消息" class="headerlink" title="如何防止丢失消息"></a>如何防止丢失消息</h3><p>现在就体现出group的强大之处了，分组既可以解决重复消费的问题，还可以在<strong>设置分组的消费者启动时自动获取丢失的消息</strong>。</p><h2 id="请求链路追踪-Sleuth"><a href="#请求链路追踪-Sleuth" class="headerlink" title="请求链路追踪-Sleuth"></a>请求链路追踪-Sleuth</h2><p>在微服务框架中，一个由客户端发 起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引|起整个请求最后的失败。</p><p>Spring Cloud Sleuth 提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了zipkin视图。</p><p>zipkin下载地址：<a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/2.12.9/" target="_blank" rel="noopener">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/2.12.9/</a></p><p>运行：java -jar zipkin-server-2.12.9-exec.jar</p><p>访问地址：localhost:9411/zipkin</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdt3homikpj31am0fatd2.jpg" alt="调用链路" style="zoom: 50%;"><p>一条链路通过Trace Id唯一标识，Span标识发起的请求信息，各span通过parent id关联起来，整条链路的依赖关系如下：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdt3j5xd61j31l20a240g.jpg" alt="依赖关系"></p><p>Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识。</p><p>Span：表示调用链路来源，通俗的理解span就是一次请求信息。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>导入jar包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--sleuth+zipkin--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写yml</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">  #sleuth+zipkin</span><span class="token attr-name">  zipkin</span><span class="token punctuation">:</span><span class="token attr-name">    base-url</span><span class="token punctuation">:</span> <span class="token attr-value">http://localhost:9411 #监控</span><span class="token attr-name">  sleuth</span><span class="token punctuation">:</span><span class="token attr-name">    sampler</span><span class="token punctuation">:</span><span class="token attr-name">      probability</span><span class="token punctuation">:</span> <span class="token attr-value">1 #采样率值介于0~1之间,1表示全部采集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdt4o7c4ecj31n70u0158.jpg" alt="zipkin视图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微服务架构&quot;&gt;&lt;a href=&quot;#微服务架构&quot; class=&quot;headerlink&quot; title=&quot;微服务架构&quot;&gt;&lt;/a&gt;微服务架构&lt;/h2&gt;&lt;p&gt;微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://lishaojie1993.gitee.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud" scheme="https://lishaojie1993.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>高性能的web服务器-nginx</title>
    <link href="https://lishaojie1993.gitee.io/2020/04/06/nginx/"/>
    <id>https://lishaojie1993.gitee.io/2020/04/06/nginx/</id>
    <published>2020-04-06T13:32:24.000Z</published>
    <updated>2020-05-12T04:08:54.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx重要概念"><a href="#nginx重要概念" class="headerlink" title="nginx重要概念"></a>nginx重要概念</h2><h3 id="什么是nginx"><a href="#什么是nginx" class="headerlink" title="什么是nginx"></a>什么是nginx</h3><ul><li>nginx是一个高性能的HTTP(服务器)和反向代理服务器，特点是<strong>占有内存少，并发能力强</strong>，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</li><li>nginx可以作为静态页面的web服务器，同时还支持CGI协议的动态语言，比如perl、php等。但是不支持Java，Java程序只能通过与tomcat配合完成。</li><li>nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验，有报告表明能支持高达50,000个并发连接数。</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><strong>正向代理</strong>：在客户端(浏览器)配置代理服务器，通过代理服务器进行互联网访问。比如国内访问Google需要正向代理。</p><p><strong>反向代理</strong>：其实客户端对反向代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p>区别：正向代理的对象是客户端，反向代理的对象是服务器。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>由于并发量的提升，单个服务器解决不了，我们需要增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。不过nginx不是单纯的物理分离，而是把动态请求和静态请求分开，静态页面交给nginx，Tomcat来处理动态页面，下面会详细介绍。</p><h2 id="nginx的安装配置"><a href="#nginx的安装配置" class="headerlink" title="nginx的安装配置"></a>nginx的安装配置</h2><p>安装教程：<a href="https://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/linux/nginx-install-setup.html</a></p><p><strong>常用的web服务器</strong>：Apache，Nginx，Tomcat，Jetty，Netty，Jboss，iis等</p><p><strong>nginx的常用命令(进入/usr/local/webserver/nginx/sbin目录中)</strong></p><ul><li><code>./nginx -v</code>查看nginx版本号</li><li><code>./nginx -t</code>检查nginx.conf文件格式</li><li><code>./nginx</code>启动nginx</li><li><code>./nginx -s stop</code>停止nginx</li><li><code>./nginx -s reload</code>重新加载nginx.config</li></ul><h2 id="nginx的配置文件"><a href="#nginx的配置文件" class="headerlink" title="nginx的配置文件"></a>nginx的配置文件</h2><p>配置文件的目录：<code>/usr/local/webserver/nginx/conf/nginx.conf</code></p><h3 id="第一部分：全局块"><a href="#第一部分：全局块" class="headerlink" title="第一部分：全局块"></a>第一部分：全局块</h3><p>从配置文件开始到events块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行nginx服务器的用户(组)、允许生成的worker process数、进程PID存放路径、日志存放路径和类型以及配置文件的引入等。</p><pre class="line-numbers language-bash"><code class="language-bash">worker_processes 1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是nginx服务器并发处理服务的关键配置，worker processes值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。</p><h3 id="第二部分：events块"><a href="#第二部分：events块" class="headerlink" title="第二部分：events块"></a>第二部分：events块</h3><p>events块涉及的指令主要影响nginx服务器与用户的网络连接，常用的设置包括是否开启对多work process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个wordprocess可以同时支持的最大连接数等。</p><pre class="line-numbers language-bash"><code class="language-bash">worker_connections 1024<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这表示每个work process支持的最大连接数为1024，这部分的配置对nginx的性能影响较大，在实际中应该灵活配置。</p><h3 id="第三部分：http块"><a href="#第三部分：http块" class="headerlink" title="第三部分：http块"></a>第三部分：http块</h3><p>这算是nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。需要注意的是http块又包括http全局块和server块。</p><ol><li><p><strong>http全局块</strong></p><p>http全局块配置的指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等。</p></li><li><p><strong>server块</strong></p><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。每个http块可以包括多个server 块，而每个server 块就相当于一个虚拟主机。而每个server块也分为全局server块，同时包含多个locaton块。</p></li></ol><h2 id="location的匹配规则"><a href="#location的匹配规则" class="headerlink" title="location的匹配规则"></a>location的匹配规则</h2><p>基础语法有三种：</p><ul><li>location pattern {}    一般匹配</li><li>location <code>=</code> pattern {}    精准匹配</li><li>location <code>~</code> pattern {}    正则匹配</li></ul><blockquote><p><code>=</code> 用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p><p><code>~</code> 用于表示uri包含正则表达式，并且<strong>区分大小写</strong>。（一般使用区分的）</p><p><code>~*</code> 用于表示uri包含正则表达式，并且<strong>不区分大小写</strong>。</p><p><code>^~</code> 用于不含正则表达式的uri前，要求nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。</p></blockquote><p>注意：如果uri包含正则表达式，则必须要有 ~ 或者 ~* 标识。</p><h2 id="nginx配置反向代理"><a href="#nginx配置反向代理" class="headerlink" title="nginx配置反向代理"></a>nginx配置反向代理</h2><p>通过以下配置访问 10.211.55.4 可以被转发到 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 实现反向代理效果。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server</span> <span class="token attr-value">{</span><span class="token attr-name">        listen</span> <span class="token attr-value">      80;</span><span class="token attr-name">        server_name</span> <span class="token attr-value"> 10.211.55.4;</span><span class="token comment" spellcheck="true">        #charset koi8-r;</span><span class="token comment" spellcheck="true">        #access_log  logs/host.access.log  main;</span><span class="token attr-name">        location</span> <span class="token attr-value">/ {</span><span class="token attr-name">            root</span> <span class="token attr-value">  html;</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://127.0.0.1:8080;</span><span class="token attr-name">            index</span> <span class="token attr-value"> index.html index.htm;</span>        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了测试效果，在虚拟机中创建Tomcat集群，需要修改如下3个端口号：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">&lt;Server</span> <span class="token attr-value">port="8006" shutdown="SHUTDOWN"></span><span class="token attr-name">&lt;Connector</span> <span class="token attr-value">port="8081" protocol="HTTP/1.1"</span><span class="token attr-name">               connectionTimeout</span><span class="token punctuation">=</span><span class="token attr-value">"20000"</span><span class="token attr-name">               redirectPort</span><span class="token punctuation">=</span><span class="token attr-value">"8443" /></span><span class="token attr-name">&lt;Connector</span> <span class="token attr-value">port="8010" protocol="AJP/1.3" redirectPort="8443" /></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试location的匹配规则，在Tomcat1的webapp目录下新建edu文件夹，放入a.html文件。在Tomcat2的webapp目录下新建vod文件夹，放入b.html文件。在nginx中做如下配置，通过location正则匹配，实现访问 10.211.55.4:9001 的不同路径来切换访问服务器。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server</span> <span class="token attr-value">{</span><span class="token attr-name">    listen</span> <span class="token attr-value">       9001;</span><span class="token attr-name">    server_name</span> <span class="token attr-value">  10.211.55.4;</span><span class="token attr-name">    location</span> <span class="token attr-value">~ /edu/ {</span><span class="token attr-name">        proxy_pass</span> <span class="token attr-value">http://127.0.0.1:8081;</span>    }<span class="token attr-name">    location</span> <span class="token attr-value">~ /vod/ {</span><span class="token attr-name">        proxy_pass</span> <span class="token attr-value">http://127.0.0.1:8082;</span>    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nginx配置负载均衡"><a href="#nginx配置负载均衡" class="headerlink" title="nginx配置负载均衡"></a>nginx配置负载均衡</h2><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">    upstream</span> <span class="token attr-value">myserver {</span><span class="token attr-name">        server</span> <span class="token attr-value">10.211.55.4:8081 weight=1;</span><span class="token attr-name">        server</span> <span class="token attr-value">10.211.55.4:8082 weight=1;</span><span class="token comment" spellcheck="true">        #ip_hash;</span><span class="token comment" spellcheck="true">        #fair;</span><span class="token comment" spellcheck="true">        #least_conn;</span>    }<span class="token attr-name">    server</span> <span class="token attr-value">{</span><span class="token attr-name">        listen</span> <span class="token attr-value">      80;</span><span class="token attr-name">        server_name</span> <span class="token attr-value"> 10.211.55.4;</span><span class="token attr-name">        location</span> <span class="token attr-value">/ {</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://myserver;</span><span class="token attr-name">            root</span> <span class="token attr-value">  html;</span><span class="token attr-name">            index</span> <span class="token attr-value"> index.html index.htm;</span><span class="token attr-name">        }</span> <span class="token attr-value"> </span><span class="token attr-name">    ........</span>     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nginx的负载均衡策略"><a href="#nginx的负载均衡策略" class="headerlink" title="nginx的负载均衡策略"></a>nginx的负载均衡策略</h3><ol><li><strong>轮询(默认)</strong>：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</li><li><strong>weight(权重)</strong>：默认为1，权重越高被分配的客户端越多。</li><li><strong>ip_hash</strong>：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，好处是不需要考虑session跨域。</li><li><strong>fair(第三方)</strong>：按照后端服务器的响应时间来分配请求，响应时间短的优先分配。</li><li><strong>url_hash</strong>：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</li><li><strong>least_conn</strong>：把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下least_conn就可以达到更好的负载均衡效果。</li></ol><p>默认的轮询策略提供如下参数：</p><table><thead><tr><th align="center">参数</th><th>作用</th></tr></thead><tbody><tr><td align="center">fail_timeout</td><td>与max_fails结合使用，表示max_fails次失败后服务器暂停的时间。</td></tr><tr><td align="center">max_fails</td><td>设置在fail_timeout参数设置的时间内最大失败次数，默认是1，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了，返回proxy_next_upstream模块定义的错误。</td></tr><tr><td align="center">fail_time</td><td>服务器会被认为停机的时间长度,默认为10s。</td></tr><tr><td align="center">backup</td><td>标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里，当其他所有的非backup机器down掉或者繁忙的时候才会请求backup服务器，因此这台机器压力会最低。</td></tr><tr><td align="center">down</td><td>标记服务器永久停机了，表示当前的server暂时不参与负载。</td></tr><tr><td align="center">weight</td><td>负载的权重，默认为1。weight越大，表示这台服务器被访问的几率就越大。</td></tr></tbody></table><h2 id="nginx配置动静分离"><a href="#nginx配置动静分离" class="headerlink" title="nginx配置动静分离"></a>nginx配置动静分离</h2><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gebtngozutj315s0p6tdq.jpg" alt style="zoom: 33%;"><p>动静分离从目前实现角度来讲大致分为两种，一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；另外一种方法就是动态跟静态文件混合在一起发布，通过nginx来分开。</p><p>通过location指定不同的后缀名实现不同的请求转发。通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。<strong>具体Expires定义：给一个资源设定一个过期时间</strong>，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(如果经常更新的文件，不建议使用Expires来缓存)，比如设置3d，表示在这3天之内访问这个URL，发送一个请求，对比服务器该文件的最后更新时间有无变化，如果没有变化，则不会从服务器抓取，直接获取静态资源并返回状态码304(提示此为缓存资源)，如果有修改，则直接从服务器重新下载，返回状态码200。 </p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在服务器的根目录中创建data文件夹，在data中创建www和image文件夹分别用来存放网页和图片，并做如下配置。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">     server</span> <span class="token attr-value">{</span><span class="token attr-name">        listen</span> <span class="token attr-value">      80;</span><span class="token attr-name">        server_name</span> <span class="token attr-value"> 10.211.55.4;</span><span class="token attr-name">        location</span> <span class="token attr-value">/www/ {</span><span class="token attr-name">            root</span> <span class="token attr-value">  /data/;</span><span class="token attr-name">            index</span> <span class="token attr-value"> index.html index.htm;</span>        }<span class="token attr-name">        location</span> <span class="token attr-value">/image/ {</span><span class="token attr-name">            root</span> <span class="token attr-value">  /data/;</span><span class="token attr-name">            autoindex</span> <span class="token attr-value">on;</span>        }<span class="token attr-name">    ........</span>     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>autoindex on; 是开启一个目录效果，在访问 <a href="http://10.211.55.4/data/image" target="_blank" rel="noopener">http://10.211.55.4/data/image</a> 时可以看到图片文件列表。</p><h2 id="nginx配置高可用集群"><a href="#nginx配置高可用集群" class="headerlink" title="nginx配置高可用集群"></a>nginx配置高可用集群</h2><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gebv84sw12j31o20jwn90.jpg" style="zoom:33%;"><p>两台nginx服务器都需要安装keepalived</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> keepalived -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 <code>rpm -q -a keepalived</code> 查看是否安装成功。</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>安装完成后进入到 <code>/etc/keepalived/</code> 下有 <code>keepalived.conf</code> 文件。</p><ol><li><p>修改keepalived.conf文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#全局配置</span><span class="token attr-name">global_defs</span> <span class="token attr-value">{</span>    ...<span class="token attr-name">    router_id</span> <span class="token attr-value">10.211.55.4 #可以写ip或别名(host)，访问到主机</span>}<span class="token comment" spellcheck="true">#检测脚本的配置</span><span class="token attr-name">vrrp_script</span> <span class="token attr-value">chk_http_port {</span><span class="token attr-name">    script</span> <span class="token attr-value">"/usr/local/src/nginx_check.sh"</span><span class="token attr-name">    interval</span> <span class="token attr-value">2    #检测脚本执行间隔2秒</span><span class="token attr-name">    weight</span> <span class="token attr-value">2      #权重</span>}<span class="token comment" spellcheck="true">#虚拟IP的配置</span><span class="token attr-name">vrrp_instance</span> <span class="token attr-value">VI_1 {</span>    ...<span class="token attr-name">    state</span> <span class="token attr-value">MASTER         #主服务器是MASTER，备份服务器为BACKUP</span><span class="token attr-name">    interface</span> <span class="token attr-value">ens33      #绑定网卡，可以通过ifconfig查看</span><span class="token attr-name">    virtual_router_id</span> <span class="token attr-value">51 #主、备机的virtual_router_id必须相同</span><span class="token attr-name">    priority</span> <span class="token attr-value">100         #主、备机取不同的优先级，主机大于备份机</span><span class="token attr-name">    advert_int</span> <span class="token attr-value">1         #心跳检测，每隔1秒发送一次心跳</span><span class="token attr-name">    authentication</span> <span class="token attr-value">{     #权限校验方式</span><span class="token attr-name">        auth_type</span> <span class="token attr-value">PASS   #方式为密码</span><span class="token attr-name">        auth_pass</span> <span class="token attr-value">1111   #密码为1111</span>    }<span class="token attr-name">    virtual_ipaddress</span> <span class="token attr-value">{</span><span class="token attr-name">        10.211.55.99</span> <span class="token attr-value">    #虚拟IP</span>    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在/usr/local/src添加检测脚本，如果主nginx服务器挂掉了，启动备份服务器。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>A<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -C nginx -no-header <span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$A</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    /usr/local/webserver/nginx/sbin/nginx    <span class="token function">sleep</span> 2    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -C nginx --no-header <span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">killall</span> keepalived    <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>因为提前加入了检测nginx脚本，索引先启动nginx再启动keepalived。</p><p>启动keepalived命令： <code>systemctl start keepalived.service</code></p><p>停止的话先停keepalived，再停nginx <code>systemctl stop keepalived.service</code></p><h2 id="nginx原理与优化"><a href="#nginx原理与优化" class="headerlink" title="nginx原理与优化"></a>nginx原理与优化</h2><p>基本流程：首先客户端发送请求到nginx的master，相当于管理员，master得到任务后通知下面的worker，worker通过争抢机制得到任务后通过反向代理Tomcat来完成操作。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1gebx87re57j318i0lgtn4.jpg" alt></p><h3 id="worker-processes工作线程数"><a href="#worker-processes工作线程数" class="headerlink" title="worker_processes工作线程数"></a>worker_processes工作线程数</h3><ul><li><p><strong>一个master多个worker有什么好处呢？</strong></p><ul><li>可以使用 <code>./nginx -s reload</code> 实现热部署。</li><li>对于每个worker都是独立的进程，保证服务不会中断，降低服务器风险。</li></ul></li><li><p><strong>nginx设置多少个worker才合适？</strong></p><p>nginx和redis类似都采用了io多路复用机制，每个worker都是一个独立的进程， 但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求，即使是千上万个请求也不在话下。每个worker的线程可以把一个cpu的性能发挥到极致。所以<strong>worker数和服务器的cpu数相等是最为适宜的</strong>。设少了会浪费cpu，设多了会造成cpu频繁切换上下文带来的损耗。</p></li></ul><h3 id="work-connection连接数"><a href="#work-connection连接数" class="headerlink" title="work_connection连接数"></a>work_connection连接数</h3><ul><li><p><strong>发送一个请求占用了worker多少连接数？</strong></p><p>2个或4个，如果请求的是静态资源，直接返回就是占用2个连接数。如果访问的请求需要查询数据库则需要占用4个连接数。</p></li><li><p><strong>假如nginx有1个master，4个worker，每个woker支持的最大连接数是1024，那么它支持的最大并发数是多少呢？</strong></p><p>静态资源访问的最大并发数是：worker_connection * worker_processes / 2 = 2048个</p><p>如果是HTTP作为反向代理来说：worker_connection * worker_processes / 4 = 1024个</p></li></ul><h3 id="Buffers缓存"><a href="#Buffers缓存" class="headerlink" title="Buffers缓存"></a>Buffers缓存</h3><p>如果buffer太小，nginx会不停的写一些临时文件，这样会导致磁盘不停的去读写，下面是buffer的一些相关参数：</p><ul><li><strong>client_body_buffer_size</strong>：允许客户端请求的最大单个文件字节数</li><li><strong>client_header_buffer_size</strong>：用于设置客户端请求的Header头缓冲区大小，大部分情况1KB大小足够</li><li><strong>client_max_body_size</strong>：设置客户端能够上传的文件大小，默认为1m</li><li><strong>large_client_header_buffers</strong>：该指令用于设置客户端请求的Header头缓冲区大小</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">client_body_buffer_size</span> <span class="token attr-value">10K;</span><span class="token attr-name">client_header_buffer_size</span> <span class="token attr-value">1k;</span><span class="token attr-name">client_max_body_size</span> <span class="token attr-value">8m;</span><span class="token attr-name">large_client_header_buffers</span> <span class="token attr-value">2 1k;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Timeouts超时时间"><a href="#Timeouts超时时间" class="headerlink" title="Timeouts超时时间"></a>Timeouts超时时间</h3><ul><li><code>client_header_timeout</code>和<code>client_body_timeout</code>设置请求头和请求体(各自)的超时时间，如果没有发送请求头和请求体，nginx服务器会返回408错误或者request time out。</li><li><code>keepalive_timeout</code>给客户端分配<code>keep-alive</code>链接超时时间。服务器将在这个超时时间过后关闭链接，我们将它设置低些可以让nginx持续工作的时间更长。</li><li><code>send_timeout</code>指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">client_body_timeout</span> <span class="token attr-value">12;</span><span class="token attr-name">client_header_timeout</span> <span class="token attr-value">12;</span><span class="token attr-name">keepalive_timeout</span> <span class="token attr-value">15;</span><span class="token attr-name">send_timeout</span> <span class="token attr-value">10;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开启Gzip"><a href="#开启Gzip" class="headerlink" title="开启Gzip"></a>开启Gzip</h3><p>gzip可以帮助nginx减少大量的网络传输工作，另外要注意gzip_comp_level的设置，太高的话，nginx服务会浪费CPU的执行周期。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">gzip</span> <span class="token attr-value">on;</span><span class="token attr-name">gzip_comp_level</span> <span class="token attr-value"> 2;</span><span class="token attr-name">gzip_min_length</span> <span class="token attr-value"> 1000;</span><span class="token attr-name">gzip_proxied</span> <span class="token attr-value">    expired no-cache no-store private auth;</span><span class="token attr-name">gzip_types</span> <span class="token attr-value">      text/plain application/x-javascript text/xml text/css application/xml;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nginx日志切分"><a href="#nginx日志切分" class="headerlink" title="nginx日志切分"></a>nginx日志切分</h2><p>第一步：分析如何去实现日志切分，编写shell脚本，记得要给脚本赋予可执行权限。</p><p>第二步：启动定时任务对脚本进行调度：crontab -e</p><p>定时任务格式：</p><pre class="line-numbers language-bash"><code class="language-bash">*/1 * * * * sh /usr/local/webserver/nginx/logs/access.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步：新增split_log.sh文件，并给其增加权限，chmod 777 文件名</p><p><strong>split_log.sh</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNbRwgy1garbdepmokj30ik0mm4ev.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nginx重要概念&quot;&gt;&lt;a href=&quot;#nginx重要概念&quot; class=&quot;headerlink&quot; title=&quot;nginx重要概念&quot;&gt;&lt;/a&gt;nginx重要概念&lt;/h2&gt;&lt;h3 id=&quot;什么是nginx&quot;&gt;&lt;a href=&quot;#什么是nginx&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="分布式" scheme="https://lishaojie1993.gitee.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="https://lishaojie1993.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="nginx" scheme="https://lishaojie1993.gitee.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>同步非阻塞-NIO</title>
    <link href="https://lishaojie1993.gitee.io/2020/04/03/nio/"/>
    <id>https://lishaojie1993.gitee.io/2020/04/03/nio/</id>
    <published>2020-04-03T08:58:58.000Z</published>
    <updated>2020-05-12T04:09:55.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>同步(Synchronization)和异步(Asynchronous)的方式：同步和异步都是基于应用程序和操作系统处理IO事件所采用的方式。</p><p><strong>同步</strong>：是应用程序要直接参与IO读写的操作。</p><p><strong>异步</strong>：所有的IO读写交给操作系统去处理，应用程序只需要等待通知。</p><p>同步方式在处理IO事件的时候，必须阻塞在某个方法上面等待我们的IO事件完成(阻塞IO事件或者通过轮询IO事件的方式)，对于异步来说，所有的IO读写都交给了操作系统。这个时候，我们可以去做其他的事情，并不需要去完成真正的IO操作，当操作完成IO后，会给我们的应用程序一个通知。</p><p><strong>同步的缺陷</strong></p><p>阻塞到IO事件，阻塞到read或则write。 这个时候我们就完全不能做自己的事情。让读写方法加入到线程里面，然后阻塞线程来实现，对线程的性能开销比较大。</p><h3 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h3><p>阻塞(Block)和非阻塞(Non-Block)：阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式。</p><p><strong>阻塞</strong>：当一个线程调用read()或write()方法时，直到数据被完全读取或写入，此期间不能做任何事。</p><p><strong>非阻塞</strong>：如果缓冲区的数据没有准备好则直接返回，不会等待。如果数据已经准备好，也直接返回。</p><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p>BIO是一种传统的网络通讯模型，<strong>同步阻塞IO</strong>。谁用谁接收，必须等待数据接收完毕后才能处理业务逻辑。</p><p>它其实就是服务端创建一个ServerSocket， 然后客户端用一个Socket去连接服务端的ServerSocket， ServerSocket接收到了一个的连接请求就创建一个Socket和一个线程去跟客户端的Socket进行通讯。接着客户端和服务端就进行阻塞式的通信，客户端发送一个请求，服务端Socket进行处理后返回响应。在响应返回前，客户端那边就阻塞等待，什么事情也做不了。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1geacy57ninj311g0hitam.jpg" alt="BIO流程图"></p><p>采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，接收到客户端连接之后为客户端连接创建一个新的线程处理请求消息，处理完成之后，返回应答消息给客户端，线程销毁，这就是典型的<strong>一请求一应答模型（Acceptor）</strong>。</p><p>这种方式的缺点：每次一个客户端接入，都需要在服务端创建一个线程来服务这个客户端。这样大量客户端来的时候，就会造成服务端的线程数量可能达到了几千甚至几万，这样就可能会造成服务端过载过高，最后崩溃死掉。</p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p>NIO是一种<strong>同步非阻塞IO</strong>，基于Reactor模型实现。（反应堆）</p><p>其实相当于就是一个线程处理大量的客户端的请求，通过一个线程轮询大量的channel，每次就获取一批有事件的channel，然后对每个请求启动一个线程处理即可。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1geadoo90l2j31100e0abn.jpg" alt="NIO流程图"></p><p>NIO的核心就是非阻塞，就是用一个selector线程就可以不停轮询channel，所有客户端请求都不会阻塞，面向缓冲区，不需要等待，直接就可以进来，大不了就是等待一会排下队而已。</p><p>NIO相较于BIO优化的核心是，一个客户端并不是时时刻刻都有数据进行交互，没有必要死耗着一个线程不放，所以客户端选择了让线程歇一歇，只有客户端有相应的操作的时候才发起通知，创建一个线程来处理请求。</p><h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3><p>AIO是一种<strong>异步非阻塞IO</strong>，基于Proactor模型实现。</p><p>每个连接发送过来的请求，都会绑定一个Buffer，然后通知操作系统去完成异步的读，这个时间你就可以去做其他的事情，等到操作系统完成读之后，就会调用你的接口，给你操作系统异步读完的数据。这个时候你就可以拿到数据进行处理，将数据往回写。在往回写的过程，同样是给操作系统一个Buffer，让操作系统去完成写，写完了来通知你。这俩个过程都有buffer存在，数据都是通过buffer来完成读写。这里面的主要的区别在于将数据写入的缓冲区后，就不去管它，剩下的去交给操作系统去完成。操作系统写回数据也是一样，写到Buffer里面，写完后通知客户端来进行读取数据。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1geaedjoufbj311y0jm0us.jpg" alt="AIO流程图"></p><h3 id="面向流与面向缓冲区"><a href="#面向流与面向缓冲区" class="headerlink" title="面向流与面向缓冲区"></a>面向流与面向缓冲区</h3><p>Java NIO和IO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。</p><p>Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。</p><p>Java NIO是将数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge9ox59wooj31k90u0e81.jpg" style="zoom: 50%;"><h2 id="缓冲区Buffer"><a href="#缓冲区Buffer" class="headerlink" title="缓冲区Buffer"></a>缓冲区Buffer</h2><p>缓冲区实际上是一个容器对象，更直接的说，其实就是一个数组，在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，它也是写入到缓冲区中的；任何时候访问NIO中的数据，都是将它放到缓冲区中。而在面向流I/O系统中，所有数据都是直接写入或者直接将数据读取到Stream对象中。</p><p>在NIO中，所有的缓冲区类型都继承于抽象类Buffer，最常用的就是ByteBuffer，对于Java中的基本类型，基本都有一个具体Buffer类型与之相对应，它们之间的继承关系如下图所示:</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge98z7oixzj31ii0ca75b.jpg" alt></p><h3 id="深入剖析Buffer"><a href="#深入剖析Buffer" class="headerlink" title="深入剖析Buffer"></a>深入剖析Buffer</h3><p>在谈到缓冲区时，我们说缓冲区对象本质上是一个数组，但它其实是一个特殊的数组，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况，如果我们使用<code>get()</code>方法从缓冲区获取数据或者使用<code>put()</code>方法把数据写入缓冲区，都会引起缓冲区状态的变化。</p><p>在缓冲区中，最重要的属性有下面三个，它们一起合作完成对缓冲区内部状态的变化跟踪：</p><ul><li><strong>position</strong>：指定了下一个将要被写入或者读取的元素索引，它的值由<code>get()/put()</code>方法自动更新，在新创建一个Buffer对象时，position 被初始化为0。</li><li><strong>limit</strong>：指定还有多少数据需要取出(在从缓冲区写入通道时)，或者还有多少空间可以放入数据(在从通道读入缓冲区时)。</li><li><strong>capacity</strong>：指定了可以存储在缓冲区中的最大数据容量，实际上，它指定了底层数组的大小，或者至少是指定了准许我们使用的底层数组的容量。</li><li>mark标记，调用mark()来设置mark=position，再调用reset()可以让position恢复到标记的位置。</li></ul><p>以上三个属性值之间有一些相对大小的关系:<code>0 &lt;= position &lt;= limit &lt;= capacity</code>。 如果我们创建一个新的容量大小为10的ByteBuffer对象，在初始化的时候position设置为0，limit和capacity被设置为10，在以后使用ByteBuffer对象过程中，capacity 的值不会再发生变化，而其它两个个将会随着使用而变化。四个属性值分别如图所示:</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge99r5d805j31840f842s.jpg" alt></p><p>现在我们可以从通道中读取一些数据到缓冲区中，注意从通道读取数据，相当于往缓冲区中写入数据。如果读取4个自己的数据，则此时position的值为4，即下一个将要被写入的字节索引为4，而limit仍然是10，如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge99rjnxexj31820ewjvi.jpg" alt></p><p>下一步把读取的数据写入到输出通道中，相当于从缓冲区中读取数据，在此之前，必须调用<code>flip()</code>方法，该方法将会完成两件事情：</p><ol><li>把limit设置为当前的position值</li><li>把position设置为0</li></ol><p>由于position被设置为0，所以可以保证在下一步输出时读取到的是缓冲区中的第一个字节，而limit被设置为当前的position，可以保证读取的数据正好是之前写入到缓冲区中的数据，如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge99u8uhuoj31840f0zoq.jpg" alt></p><p>现在调用<code>get()</code>方法从缓冲区中读取数据写入到输出通道，这会导致position的增加而limit保持不变，但position不会超过limit的值，所以在读取我们之前写入到缓冲区中的4个自己之后，position和limit的值都为4，如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge99y2in5ej317w0ewn21.jpg" alt></p><p>在从缓冲区中读取数据完毕后，limit 的值仍然保持在我们调用<code>flip()</code>方法时的值，调用<code>clear()</code>方法能够把所有的状态变化设置为初始化时的值，如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge99zh2zvij318o0esgpv.jpg" alt></p><h3 id="缓冲区分配"><a href="#缓冲区分配" class="headerlink" title="缓冲区分配"></a>缓冲区分配</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分配指定大小的缓冲区</span>ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将现有数组包装成缓冲区</span><span class="token keyword">byte</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓冲区分片"><a href="#缓冲区分片" class="headerlink" title="缓冲区分片"></a>缓冲区分片</h3><p>在NIO中，除了可以分配或者包装一个缓冲区对象外，还可以根据现有的缓冲区对象来创建一个子缓冲区，即在现有缓冲区上切出一片来作为一个新的缓冲区，但现有的缓冲区与创建的子缓冲区在底层数组层面上是数据共享的，也就是说，子缓冲区相当于是现有缓冲区的一个视图窗口。调用<code>slice()</code>方法可以创建一个子缓冲区，让我们通过例子来看一下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferSlice</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化并赋值</span>        IntBuffer buffer <span class="token operator">=</span> IntBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建子缓冲区</span>        buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子缓冲区的内容是3，4，5，6</span>        IntBuffer slice <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//改变子缓冲区的内容</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>slice<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> b<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>            slice<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回缓冲区</span>        buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">30</span>  <span class="token number">40</span>  <span class="token number">50</span>  <span class="token number">60</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="只读缓冲区"><a href="#只读缓冲区" class="headerlink" title="只读缓冲区"></a>只读缓冲区</h3><p>只读缓冲区非常简单，可以读取但是不能写入数据。可以通过调用缓冲区的<code>asRead0nlyBuffer()</code>方法，将任何常规缓冲区转换为只读缓冲区，这个方法返回一个与原缓冲区完全相同的缓冲区，并与原缓冲区共享数据，只不过它是只读的。如果原缓冲区的内容发生了变化，只读缓冲区的内容也随之发生变化：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadOnlyBuffer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化并赋值</span>        IntBuffer buffer <span class="token operator">=</span> IntBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建只读冲区</span>        IntBuffer readOnly <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">asReadOnlyBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//改变原缓冲区的内容</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> b<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//指定只读缓冲区视图</span>        readOnly<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readOnly<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//只读缓冲区的内容也随之改变</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>readOnly<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>readOnly<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接缓冲区"><a href="#直接缓冲区" class="headerlink" title="直接缓冲区"></a>直接缓冲区</h3><p>直接缓冲区是为加快I/O速度，使用一种特殊方式为其分配内存的缓冲区，JDK 文档中的描述为：给定一个直接字节缓冲区，Java虚拟机将尽最大努力直接对它执行本机I/O操作。也就是说，它会在每一次调用底层操作系统的本机I/O操作之前(或之后)，尝试避免将缓冲区的内容拷贝到一个中间缓冲区中或者从一个中间缓冲区中拷贝数据。要分配直接缓冲区，需要调用<code>allocateDirect()</code>方法，而不是<code>allocate()</code>方法，使用方式与普通缓冲区并无区别，如下面的拷贝文件示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用allocateDirect()，而不是allocate()</span>ByteBuffer directBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>零拷贝</strong>：要想复制一个数据，它可以跨越JVM之外，在操作系统中直接分配内存，达到一个更高效的操作。</p><h3 id="内存映射文件I-O"><a href="#内存映射文件I-O" class="headerlink" title="内存映射文件I/O"></a>内存映射文件I/O</h3><p>内存映射文件I/O是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的I/O快的多。内存映射文件I/O是通过使文件中的数据出现为内存数组的内容来完成的，这起初听起来似乎不过就是将整个文件读到内存中，但是事实上并不是这样。一般来说，只有文件中实际读取或者写入的部分才会映射到内存中。如下面的示例代码：</p><p>通俗的讲，就是<strong>把硬盘中的数据映射到内存中，通过修改内存中的缓存来直接修改硬盘中的数据。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappedBuffer</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        RandomAccessFile raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"/Users/lishaojie/IdeaProjects/test.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel fc <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MappedByteBuffer mbb <span class="token operator">=</span> fc<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>FileChannel<span class="token punctuation">.</span>MapMode<span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">,</span>start<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        mbb<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mbb<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通道Channel"><a href="#通道Channel" class="headerlink" title="通道Channel"></a>通道Channel</h2><p>通道是一个对象，通过它可以读取和写入数据，当然了所有数据都通过Buffer对象来处理。我们永远不会将字节直接写入通道中，相反是将数据写入包含一个或者多个字节的缓冲区。同样不会直接从通道中读取字节，而是将数据从通道读入缓冲区，再从缓冲区获取这个字节。在NIO中，提供了多种通道对象，而所有的通道对象都实现了Channel 接口。它们之间的继承关系如下图所示：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge9cbetf3bj31js0sgn08.jpg" alt></p><p>在前面我们说过，任何时候读取/写入数据，都不是直接从通道读取/写入，而是从通道读取/写入到缓冲区。</p><h3 id="使用NIO读取数据"><a href="#使用NIO读取数据" class="headerlink" title="使用NIO读取数据"></a>使用NIO读取数据</h3><ol><li>从FileInputStream获取Channel</li><li>创建Buffer</li><li>将数据从Channel读取到Buffer中</li></ol><p>下面是一个简单的使用NIO从文件中读取数据的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputProgram</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/lishaojie/IdeaProjects/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取通道</span>        FileChannel channel <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分配与文件尺寸等大的缓冲区</span>        <span class="token comment" spellcheck="true">//ByteBuffer buffer = ByteBuffer.allocate((int)channel.size());</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取数据到缓冲区</span>        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用NIO写入数据"><a href="#使用NIO写入数据" class="headerlink" title="使用NIO写入数据"></a>使用NIO写入数据</h3><ol><li>从FileInputStream获取Channel</li><li>创建Buffer</li><li>将数据从Channel 写入到Buffer中</li></ol><p>下面是一个简单的使用NIO向文件中写入数据的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputProgram</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0~9</span>    <span class="token comment" spellcheck="true">//将目标数据先转换为字节再写入</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileOutputStream fo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/lishaojie/IdeaProjects/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel channel <span class="token operator">=</span> fo<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> message<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        fo<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反应堆Reactor"><a href="#反应堆Reactor" class="headerlink" title="反应堆Reactor"></a>反应堆Reactor</h2><h3 id="阻塞I-O通信模型"><a href="#阻塞I-O通信模型" class="headerlink" title="阻塞I/O通信模型"></a>阻塞I/O通信模型</h3><p>假如现在你对阻塞I/O已有了一定了解，我们知道阻塞I/O在调用<code>InputStream.read()</code>方法时是阻塞的，它会一直等到数据到来时(或超时)才会返回；同样，在调用<code>ServerSocket.accept()</code>方法时，也会一直阻塞到有客户端连接才会返回，每个客户端连接过来后，服务端都会启动一个线程去处理该客户端的请求。阻塞I/O的通信模型示意图如下：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge9ellchxpj31fy0lgdss.jpg" alt></p><h3 id="阻塞I-O的缺点"><a href="#阻塞I-O的缺点" class="headerlink" title="阻塞I/O的缺点"></a>阻塞I/O的缺点</h3><ol><li>当客户端多时，会创建大量的处理线程。且每个线程都要占用栈空间和一些CPU时间。</li><li>阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的。</li></ol><h3 id="NIO原理及通信模型"><a href="#NIO原理及通信模型" class="headerlink" title="NIO原理及通信模型"></a>NIO原理及通信模型</h3><p>Java NIO是在jdk1.4开始使用的，它既可以说成“新I/O”，也可以说成非阻塞式I/O。下面是NIO的工作原理：</p><ol><li>由一个专门的线程来处理所有的IO事件，并负责分发，<strong>处理线程的数量不受客户端影响</strong>。</li><li>事件驱动机制：事件到的时候触发，而不是同步的去监视事件，引入<strong>排队机制</strong>。</li><li>线程通讯：线程之间通过wait,notify 等方式通讯，保证每次上下文切换都是有意义的，减少无谓的线程切换。</li></ol><p><strong>NIO的底层原理是反应堆</strong>，反应堆的工作原理图如下：</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge9es3l3nnj31bu0jsndt.jpg" style="zoom:50%;"><h2 id="选择器Selector"><a href="#选择器Selector" class="headerlink" title="选择器Selector"></a>选择器Selector</h2><p>传统的Server/Client模式会基于TPR (Thread per Request)，服务器会为每个客户端请求建立一个线程，由该线程单独负责处理一个客户请求。这种模式带来的一个问题就是线程数量的剧增，大量的线程会增大服务器的开销。大多数的实现为了避免这个问题，都采用了线程池模型，并设置线程池线程的最大数量，这又带来了新的问题，如果线程池中有200个线程，而有200个用户都在进行大文件下载，会导致第201个用户的请求无法及时处理，即便第201个用户只想请求一个几KB大小的页面。</p><p><strong>NIO中非阻塞I/O采用了基于Reactor模式的工作方式</strong>，I/O 调用不会被阻塞，相反是注册感兴趣的特定I/O事件，如可读数据到达，新的套接字连接等等，在发生特定事件时，系统再通知我们。NIO中实现非阻塞I/O的核心对象就是Selector，Selector 就是注册各种I/O事件地方，而且当那些事件发生时，就是这个对象告诉我们所发生的事件，如下图所示:</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge9f56l19tj30z50u011f.jpg" style="zoom: 33%;"><p>从图中可以看出，当有读或写等任何注册的事件发生时，可以从Selector中获得相应的SelectionKey，同时从SelectionKey中可以找到发生的事件和该事件所发生的具体的SelectableChannel，以获得客户端发送过来的数据。</p><p>使用NIO中非阻塞I/O编写服务器处理程序，大体上可以分为下面三个步骤：</p><ol><li>向Selector对象注册感兴趣的事件</li><li>从Selector中获取感兴趣的事件</li><li>根据不同的事件进行相应的处理</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注册事件</span><span class="token keyword">private</span> Selector <span class="token function">getSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建Selector对象</span>    Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建可选择通道，并配置为非阻塞模式</span>    ServerSocketChannel server <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绑定通道到指定端口</span>    ServerSocket client <span class="token operator">=</span> server<span class="token punctuation">.</span>socket<span class="token punctuation">;</span>    InetSocketAddress address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向Selector中注册感兴趣的事件</span>    server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> selector<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了ServerSocketChannel对象，并调用configureBlocking()方法，配置为非阻塞模式，接下来的三行代码把该通道绑定到指定端口，最后向Selector中注册事件，此处指定的是参数是OP_ACCEPT，即指定我们想要监听accept事件，也就是新的连接发生时所产生的事件，对于ServerSocketChannel通道来说，我们唯一可以指定的参数就是OP_ACCEPT。</p><p>从Selector中获取感兴趣的事件，即开始监听，进入内部循环：(自定义监听方法)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到目前正在排队的事件</span>        <span class="token keyword">int</span> wait <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wait <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果无事件排队,进行下次轮询</span>        <span class="token comment" spellcheck="true">//将获取到的排队事件放入Set集合</span>        Set<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> iterator <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SelectionKey key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">process</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在非阻塞I/O中，内部循环模式基本都是遵循这种方式。首先调用<code>select()</code>方法，该方法会阻塞，直到至少有一个事件发生，然后再使用<code>selectedKeys()</code>方法获取发生事件的SelectionKey，再使用迭代器进行循环。<br>最后一步就是根据不同的事件，编写相应的处理代码：接受请求事件、读数据事件、写数据事件的不同处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//处理来自客户端的接入事件</span>        ServerSocketChannel server <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SocketChannel client <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置为非阻塞模式</span>        <span class="token comment" spellcheck="true">//注册选择器,并设置为读取模式</span>        client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//处理来自客户端的读取请求</span>        SocketChannel client <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//往缓存区中读数据</span>        ByteBuffer buff <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buff<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">.</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            SelectionKey sKey <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>SelectionKey<span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>            sKey<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SocketChannel client <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer block <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>block <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="为什么说BIO是同步阻塞的呢？"><a href="#为什么说BIO是同步阻塞的呢？" class="headerlink" title="为什么说BIO是同步阻塞的呢？"></a>为什么说BIO是同步阻塞的呢？</h3><p>其实这里说的不是针对网络通讯模型而言，而是针对磁盘文件读写IO操作来说的。因为用BIO的流读写文件，例如FileInputStrem，是说你发起个IO请求直接hang死，卡在那里，必须等着搞完了这次IO才能返回。</p><h3 id="为什么说NIO是同步非阻塞？"><a href="#为什么说NIO是同步非阻塞？" class="headerlink" title="为什么说NIO是同步非阻塞？"></a>为什么说NIO是同步非阻塞？</h3><p>因为无论多少客户端都可以接入服务端，客户端接入并不会耗费一个线程，只会创建一个连接然后注册到selector上去，这样你就可以去干其他你想干的其他事情了。</p><p>一个selector线程不断的轮询所有的socket连接，发现有事件了就通知服务端，然后服务端就启动一个线程处理一个请求即可，这个过程就是<strong>非阻塞</strong>的。但是这个处理的过程中，还是要先读取数据，处理，再返回的，这是个<strong>同步</strong>的过程。</p><h3 id="为什么说AIO是异步非阻塞？"><a href="#为什么说AIO是异步非阻塞？" class="headerlink" title="为什么说AIO是异步非阻塞？"></a>为什么说AIO是异步非阻塞？</h3><p>通过AIO发起个文件IO操作之后，你立马就返回可以干别的事儿了，接下来就啥也不用管了，操作系统自己干完了IO之后，告诉你说ok了。</p><p>当你基于AIO的api去读写文件时， 当你发起一个请求之后，剩下的事情就是交给了操作系统。当读写完成后， 操作系统会来回调你的接口， 告诉你操作完成。在这期间不需要等待， 也不需要去轮询判断操作系统完成的状态，你可以去干其他的事情。同步就是自己还得主动去轮询操作系统，<strong>异步就是操作系统反过来通知你</strong>。所以来说， AIO就是异步非阻塞的。</p><h3 id="为什么传统的socket不支持海量连接？"><a href="#为什么传统的socket不支持海量连接？" class="headerlink" title="为什么传统的socket不支持海量连接？"></a>为什么传统的socket不支持海量连接？</h3><p>每次一个客户端接入，都是要在服务端创建一个线程来服务这个客户端的。这会导致大量的客户端的时候，服务端的线程数量可能达到几千甚至几万，几十万，这会导致服务器端程序负载过高，不堪重负，最终系统崩溃死掉。</p><h3 id="NIO多路复用机制如何支持海量连接？"><a href="#NIO多路复用机制如何支持海量连接？" class="headerlink" title="NIO多路复用机制如何支持海量连接？"></a>NIO多路复用机制如何支持海量连接？</h3><p>NIO是基于操作系统底层的Select通知机制的，一个Selector线程不断轮询多个Channel，这样避免了创建多个线程。只有当某个Channel有对应的请求事件的时候才会创建线程，可能说1000个请求， 只有100个请求是有数据交互的。这个时候可能server端就提供10个线程就能够处理这些请求。这样的话就可以避免了创建大量的线程。</p><h3 id="NIO中的Buffer是什么？"><a href="#NIO中的Buffer是什么？" class="headerlink" title="NIO中的Buffer是什么？"></a>NIO中的Buffer是什么？</h3><p>一般来说，如果你要通过NIO写数据到文件或者网络，或者是从文件和网络读取数据出来此时就需要通过Buffer缓冲区来进行。Buffer的使用一般有如下几个步骤：写入数据到Buffer，调用flip()方法，从Buffer中读取数据，调用clear()方法或者compact()方法。</p><h3 id="Buffer中的重要参数有哪些？"><a href="#Buffer中的重要参数有哪些？" class="headerlink" title="Buffer中的重要参数有哪些？"></a>Buffer中的重要参数有哪些？</h3><ul><li>capacity：缓冲区容量的大小，就是里面包含的数据大小。</li><li>limit：对buffer缓冲区使用的一个限制，从这个index开始就不能读取数据了。</li><li>position：代表着数组中可以开始读写的index， 不能大于limit。</li><li>mark：是类似路标的东西，在某个position的时候，设置一下mark，此时就可以设置一个标记。后续调用reset()方法可以把position复位到当时设置的那个mark上。去把position或limit调整为小于mark的值时，就丢弃这个mark。</li></ul><p>如果使用的是Direct模式创建的Buffer的话，就会减少中间缓冲直接使用DirectorBuffer来进行数据的存储。</p><h3 id="NIO中的Channel是什么？"><a href="#NIO中的Channel是什么？" class="headerlink" title="NIO中的Channel是什么？"></a>NIO中的Channel是什么？</h3><p>Channel是NIO中的数据通道，类似流，但是又有些不同。</p><p>Channel既可从中读取数据，又可以写数据到通道中，但是流的读写通常是单向的。</p><p>Channel可以异步的读写。Channel中的数据总是要先读到一个Buffer中，或者从缓冲区中将数据写到通道中。</p><h3 id="FileChannel的作用是什么？"><a href="#FileChannel的作用是什么？" class="headerlink" title="FileChannel的作用是什么？"></a>FileChannel的作用是什么？</h3><p>Buffer有不同的类型，同样Channel也有好几种类型</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO。而FileChannel就是文件IO对应的管道，在读取文件的时候会用到这个管道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重要概念&quot;&gt;&lt;a href=&quot;#重要概念&quot; class=&quot;headerlink&quot; title=&quot;重要概念&quot;&gt;&lt;/a&gt;重要概念&lt;/h2&gt;&lt;h3 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="高并发" scheme="https://lishaojie1993.gitee.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="NIO" scheme="https://lishaojie1993.gitee.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>原型模式-Prototype Pattern</title>
    <link href="https://lishaojie1993.gitee.io/2020/03/08/prototype/"/>
    <id>https://lishaojie1993.gitee.io/2020/03/08/prototype/</id>
    <published>2020-03-08T03:56:57.000Z</published>
    <updated>2020-05-12T04:18:22.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><h3 id="传统方式复制对象"><a href="#传统方式复制对象" class="headerlink" title="传统方式复制对象"></a>传统方式复制对象</h3><pre class="line-numbers language-java"><code class="language-java">Sheep sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"Marry"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sheep sheep2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sheep sheep3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sheep sheep4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sheep sheep5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传统方式的优缺点"><a href="#传统方式的优缺点" class="headerlink" title="传统方式的优缺点"></a>传统方式的优缺点</h3><ol><li>优点是比较好理解，简单易操作。</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低。</li><li>总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活。</li></ol><p><strong>解决方案</strong>：Java中Object类是所有类的根类，Object类提供 了一个clone()方法，该方法可以将一个Java对象复制一份，但是被clone的Java类必须要实现一个Cloneable接口，该接口表示该类能够复制且具有复制的能力——原型模式。</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="原型模式介绍"><a href="#原型模式介绍" class="headerlink" title="原型模式介绍"></a>原型模式介绍</h3><ul><li>原型模式(Prototype)是指用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。</li><li>原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道创建的细节。</li><li>工作原理是通过将一个原型对象传给那个要发起创建的对象，这个要发起创建的对象通过请求原型对象拷贝它们自己来实施创建，即 <strong>对象.clone()</strong>。</li><li>原型模式的优点是让程序具有更高的效率和扩展性。</li></ul><h3 id="原型模式在spring中的应用"><a href="#原型模式在spring中的应用" class="headerlink" title="原型模式在spring中的应用"></a>原型模式在spring中的应用</h3><p>Bean的创建使用到了原型模式。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cherry.bean.People<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 一步步跟进去可以看到isPrototype(),这里使用了原型模式 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p><strong>浅拷贝</strong></p><ol><li>对于数据类型是<strong>基本数据类型和String</strong>的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给<strong>新的对象</strong>。</li><li>对于数据类型是<strong>引用数据类型</strong>的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行<strong>引用传递</strong>，也就是只是将该成员变量的引用值(内存地址)复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</li><li>浅拷贝是使用默认的clone()方法来实现<br>sheep = (Sheep) super.clone();</li></ol><p><strong>深拷贝</strong></p><ol><li><p>复制对象的所有基本数据类型和String的成员变量值。</p></li><li><p>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝。</p></li><li><p>深拷贝实现方式1：<strong>重写clone方法来实现深拷贝</strong>。</p></li><li><p>深拷贝实现方式2：<strong>通过对象序列化实现深拷贝(推荐)</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepProtoType</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//……省略类的属性信息</span>    <span class="token comment" spellcheck="true">//方式1：重写被克隆类的clone()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        object deep <span class="token operator">=</span> nu1l<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//这里完成对基本数据类型(属性)和String的克隆</span>        deep <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对引用类型的属性,进行单独处理</span>        DeepProtoType deepProtoType <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span>deep<span class="token punctuation">;</span>        deepProtoType<span class="token punctuation">.</span>deepCloneableTarget <span class="token operator">=</span> <span class="token punctuation">(</span>DeepCloneableTarget<span class="token punctuation">)</span>deepCloneableTarget<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deepProtoType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式2：在被克隆的类中创建序列化方法</span>    <span class="token keyword">public</span> Object <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建流对象</span>        ByteArrayOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//序列化</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前这个对象以对象流的方式输出</span>            <span class="token comment" spellcheck="true">//反序列化</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            DeepProtoType copyObj <span class="token operator">=</span> <span class="token punctuation">(</span>DeepProtoType<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//try catch</span>            bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="原型模式的注意事项"><a href="#原型模式的注意事项" class="headerlink" title="原型模式的注意事项"></a>原型模式的注意事项</h3><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态。</li><li>如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码。</li><li>在实现深克隆的时候可能需要比较复杂的代码。</li><li>缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其原代码，违背了ocp原则。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;传统方式&quot;&gt;&lt;a href=&quot;#传统方式&quot; class=&quot;headerlink&quot; title=&quot;传统方式&quot;&gt;&lt;/a&gt;传统方式&lt;/h2&gt;&lt;h3 id=&quot;传统方式复制对象&quot;&gt;&lt;a href=&quot;#传统方式复制对象&quot; class=&quot;headerlink&quot; title=&quot;传
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://lishaojie1993.gitee.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://lishaojie1993.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="prototype" scheme="https://lishaojie1993.gitee.io/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>JVM底层原理与性能优化</title>
    <link href="https://lishaojie1993.gitee.io/2020/03/06/jvm/"/>
    <id>https://lishaojie1993.gitee.io/2020/03/06/jvm/</id>
    <published>2020-03-06T14:28:22.000Z</published>
    <updated>2020-05-12T04:04:52.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、JVM内存结构"><a href="#1、JVM内存结构" class="headerlink" title="1、JVM内存结构"></a>1、JVM内存结构</h2><h4 id="JVM由哪些部分组成？"><a href="#JVM由哪些部分组成？" class="headerlink" title="JVM由哪些部分组成？"></a>JVM由哪些部分组成？</h4><ol><li><strong>类加载器</strong>（ClassLoader）</li><li><strong>运行时数据区</strong>（Runtime Data Area）</li><li><strong>执行引擎</strong>（Execution Engine）</li><li><strong>本地库接口</strong>（Native Interface）</li></ol><h4 id="各组成部分的用途？"><a href="#各组成部分的用途？" class="headerlink" title="各组成部分的用途？"></a>各组成部分的用途？</h4><p>程序在执行之前先要把java代码转换成字节码(class文件)，jvm需要把字节码通过<strong>类加载器</strong>把文件加载到内存中<strong>(运行时数据区)</strong>，而字节码文件是jvm的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器<strong>(执行引擎)</strong>将字节码翻译成底层系统指令再交由CPU去执行，而这个过程中需要调用其他语言的接口<strong>(本地库接口)</strong>来实现整个程序的功能。</p><h4 id="类加载器是什么？"><a href="#类加载器是什么？" class="headerlink" title="类加载器是什么？"></a>类加载器是什么？</h4><p>通过一个类的全限定名获取该类的二进制字节流的代码块叫做类加载器。</p><p>主要有一下四种类加载器:</p><ul><li>启动类加载器(Bootstrap ClassLoader)：用来加载java核心类库，无法被java程序直接引用。</li><li>扩展类加载器(Extension ClassLoader)：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li><li>应用类加载器(Application ClassLoader)：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它，所以也称为系统类加载器。</li><li>用户自定义类加载器：通过继承 java.lang.ClassLoader类的方式实现。</li></ul><p>类加载器把 Java 字节码转换成 java.lang.Class 类的一个实例。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。</p><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><ol><li><p>加载：程序运行之前jvm通过<strong>类加载器</strong>把编译完成的.class二进制文件加载到内存，供程序使用。</p></li><li><p>连接：</p><ul><li>验证：确保类加载的正确性。（可能有的class文件是通过其他方式编译出来的）</li><li>准备：为类的<strong>静态变量</strong>分配内存，将其初始化为<strong>默认值</strong> 。（int为0，boolean为false）</li><li>解析：把类中的符号引用转化为直接引用。（比如把方法名改为方法的内存地址）</li></ul></li><li><p>初始化：为类的静态变量赋予正确的初始值。（程序编写的值是真正的初始值）</p></li></ol><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybpgy1gcb1tmkh5oj30hl05j3zc.jpg" alt></p><h4 id="类加载器的双亲委派模型"><a href="#类加载器的双亲委派模型" class="headerlink" title="类加载器的双亲委派模型"></a>类加载器的双亲委派模型</h4><ol><li><p><strong>什么是双亲委派模型？</strong></p><p>双亲委派模型会保证父类加载器先加载类。（延伸：jvm判定两个类相同，不仅类名一致，还要被同一类加载器加载）</p></li><li><p><strong>双亲委派模型的工作过程？</strong></p><ul><li><p>当前 ClassLoader 首先从自己已经加载的类中查询是否此类已经加载，如果已经加载则直接返回原来已经加载的类。每个类加载器都有自己的加载缓存，当一个类被加载了以后就会放入缓存，等下次加载的时候就可以直接返回了。</p></li><li><p>当前 ClassLoader 的缓存中没有找到被加载的类的时候，委托父类加载器去加载，父类加载器采用同样的策略，首先查看自己的缓存，然后委托父类的父类去加载，一直到 bootstrap ClassLoader.</p></li><li><p>当所有的父类加载器都没有加载的时候，再由当前的类加载器加载，并将其放入它自己的缓存中，以便下次有加载请求的时候直接返回。</p></li></ul></li><li><p><strong>从ClassLoader的源码来看看双亲委派模式</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检查该类是否加载过了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没加载过的情况</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果自定义的类加载器的parent不为null,就调用parent的loadClass进行加载类 </span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//否则就去找bootstrap ClassLoader</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>               <span class="token comment" spellcheck="true">// to find the class.</span>               <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>               sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>               sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>               sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//从上面的代码来看，使用指定名称加载类分为以下3步：</span><span class="token comment" spellcheck="true">//调用findLoadedClass(String)来检查类是否已经被加载；</span><span class="token comment" spellcheck="true">//调用父类的loadClass方法，如果父类为空，就调用虚拟机内置的引导类加载器加载；</span><span class="token comment" spellcheck="true">//调用findClass(String)来查找该类。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>为什么这样设计(双亲委派的好处)？</strong></p><p>主要是为了安全性，避免用户自己编写的类动态替换 Java 的一些核心类，比如 String，同时也避免了重复加载，因为 JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 ClassLoader 加载就是不同的两个类，如果相互转型的话会抛java.lang.ClassCaseException。</p></li></ol><h2 id="2、Java内存模型"><a href="#2、Java内存模型" class="headerlink" title="2、Java内存模型"></a>2、Java内存模型</h2><h3 id="JMM（Java-Memory-Model）"><a href="#JMM（Java-Memory-Model）" class="headerlink" title="JMM（Java Memory Model）"></a>JMM（Java Memory Model）</h3><ul><li>Java内存模型本身是一种抽象的概念，并不真实存在，它描述的是一种规范，定义了程序中各个变量的访问方式。</li><li>线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了共享变量的副本。</li></ul><h3 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h3><p>线程通信机制有两种：<strong>共享内存</strong>和<strong>消息传递</strong>。</p><ul><li><p>在<strong>共享内存</strong>的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来<strong>隐式</strong>进行通信，典型的共享内存通信方式就是通过<strong>共享对象</strong>进行通信。</p></li><li><p>在<strong>消息传递</strong>的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来<strong>显式</strong>进行通信，在java中典型的消息传递方式就是wait()和notify()。</p></li></ul><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybpgy1gcb0wr021kj30c80akt92.jpg" alt></p><h3 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h3><ol><li><p><strong>程序计数器</strong></p><p>程序计数器是一块较小的内存空间，可以看作当前线程正在执行的字节码的行号指示器。</p><p>程序计数器有两个作用：实现<strong>流程控制</strong>(循环、异常处理)和<strong>记录执行位置</strong>(多线程切换)。</p><p>线程私有，是唯一一个不会出现OutOfMemoryError的内存区域。</p><p>注意：如果当前线程正在执行的是一个本地方法，那么此时程序计数器为空。</p></li><li><p><strong>Java虚拟机栈</strong></p><p>描述Java方法运行过程的内存模型。</p><p>Java虚拟机栈会为每一个即将运行的方法创建<strong>“栈帧”(局部变量表、操作数栈、动态链接、方法出口)</strong>。</p><p>当Java方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧的局部变量表中。</p><p>线程私有，会出现StackOverFlowError和OutOfMemoryError两种异常。</p><p>注意：人们常说“堆”用来存放对象，“栈”用来存放局部变量不完全正确，只体现了栈的局部变量表部分。</p></li><li><p><strong>本地方法栈</strong></p><p>描述本地方法运行的内存模型。</p><p>本地方法被执行的时候，步骤和Java方法类似，执行完毕后相应的栈帧也会出栈并释放内存空间。</p></li><li><p><strong>堆</strong></p><p>用来<strong>存储对象</strong>的内存模型。</p><p>线程共享，堆是Java虚拟机中最大的一块内存区域，也是垃圾收集器主要的工作区域。</p><p>可以进一步细分为：新生代、老年代。 新生代又可被分为：Eden、From Survior、To Survior。 </p><p>堆的大小既可以固定也可以扩展，但主流的虚拟机堆的大小是可扩展的，不够用会抛出OutOfMemoryError。 </p></li><li><p><strong>方法区</strong></p><p>是堆的一个逻辑部分，用于存储被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等。 </p><p><strong>运行时常量池：是方法区的一部分</strong>，用于存放编译器生成的各种字面量和符号引用。</p></li></ol><p><strong>总结</strong>：</p><ul><li><p>程序计数器、Java虚拟机栈、本地方法栈是<strong>线程私有</strong>的，生命周期随着线程的创建而创建，随着线程的结束而死亡。 </p></li><li><p>堆、方法区是<strong>线程共享</strong>的，在JVM中只有一个堆、一个方法区。在JVM启动的时候就创建，JVM停止才销毁。</p></li><li><p><strong>StackOverFlowError</strong>： 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。 </p></li><li><p><strong>OutOfMemoryError</strong>： 若Java虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。</p></li><li><p><strong>StackOverFlowError和OutOfMemoryError的异同？</strong> </p><p>StackOverFlowError表示当前线程申请的栈超过了事先定好的栈的最大深度，但内存空间可能还有很多。 而OutOfMemoryError是指当线程申请栈时发现栈已经满了，而且内存也全都用光了。 </p></li></ul><h3 id="内存溢出-out-of-memory"><a href="#内存溢出-out-of-memory" class="headerlink" title="内存溢出-out of memory"></a>内存溢出-out of memory</h3><p>是指程序在申请内存时，没有足够的内存空间供其使用，出现 OutOfMemory。</p><p>OOM详情可参考我的另一篇博客：<a href="https://lishaojie1993.gitee.io/2020/03/02/OOM/">内存溢出-OOM</a></p><h4 id="内存溢出的解决方案"><a href="#内存溢出的解决方案" class="headerlink" title="内存溢出的解决方案"></a>内存溢出的解决方案</h4><ol><li><p>修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)</p></li><li><p>检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。</p></li><li><p>对代码进行走查和分析，找出可能发生内存溢出的位置。</p><blockquote><p><strong>重点排查以下几点</strong></p><ul><li>检查对数据库查询中，是否有一次获得全部数据的查询。</li><li>检查代码中是否有死循环或递归调用。</li><li>检查是否有大循环重复产生新对象实体。</li><li>检查对数据库查询中，是否有一次获得全部数据的查询。</li><li>检查List、MAP等集合对象是否有使用完后，未清除的问题。</li></ul></blockquote></li><li><p>使用内存查看工具动态查看内存使用情况。</p></li></ol><h3 id="内存泄漏-memory-leak"><a href="#内存泄漏-memory-leak" class="headerlink" title="内存泄漏-memory leak"></a>内存泄漏-memory leak</h3><p>是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p><blockquote><ul><li>常发性内存泄漏：发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。</li><li>偶发性内存泄漏：发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。</li><li>一次性内存泄漏：发生内存泄漏的代码只会被执行一次，比如泄漏发生在构造函数中。</li><li>隐式内存泄漏：程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。</li></ul></blockquote><p>从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。<br>真正有危害的是内存泄漏的堆积，这会最终消耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p><h3 id="各个版本内存区域的变化"><a href="#各个版本内存区域的变化" class="headerlink" title="各个版本内存区域的变化"></a>各个版本内存区域的变化</h3><p>在Java7之前，HotSpot虚拟机中将GC分代收集扩展到了方法区，使用永久代来实现了方法区。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。但是在之后的HotSpot虚拟机实现中，逐渐开始将方法区从永久代移除。Java7中已经将运行时常量池从永久代移除，在Java 堆（Heap）中开辟了一块区域存放运行时常量池。而在Java8中，已经彻底没有了永久代，将方法区直接放在一个与堆不相连的本地内存区域，这个区域被叫做元空间。</p><h2 id="3、JVM垃圾收集算法与收集器"><a href="#3、JVM垃圾收集算法与收集器" class="headerlink" title="3、JVM垃圾收集算法与收集器"></a>3、JVM垃圾收集算法与收集器</h2><p>垃圾收集算法与收集器涉及到的内容比较多，详情可参考我的另一篇博客：<a href="https://lishaojie1993.gitee.io/2020/03/04/GC/">垃圾回收-GC</a></p><h2 id="4、JVM生产问题的排查与解决"><a href="#4、JVM生产问题的排查与解决" class="headerlink" title="4、JVM生产问题的排查与解决"></a>4、JVM生产问题的排查与解决</h2><h3 id="JVM的参数类型"><a href="#JVM的参数类型" class="headerlink" title="JVM的参数类型"></a>JVM的参数类型</h3><h4 id="标配参数"><a href="#标配参数" class="headerlink" title="标配参数"></a>标配参数</h4><ul><li>-version</li><li>-help</li><li>java -showversion</li></ul><h4 id="X参数（了解）"><a href="#X参数（了解）" class="headerlink" title="X参数（了解）"></a>X参数（了解）</h4><ul><li>-Xint：解释执行（java -Xint -version）</li><li>-Xcomp：第一次使用就编译成本地代码</li><li>-Xmixed：混合模式（先编译再执行）默认</li></ul><h4 id="XX参数（重点掌握）"><a href="#XX参数（重点掌握）" class="headerlink" title="XX参数（重点掌握）"></a>XX参数（重点掌握）</h4><h5 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h5><ul><li>公式<ul><li>-XX:+或者-某个属性（+表示开启｜-表示关闭）</li></ul></li><li>Case<ul><li>是否打印GC的收集细节：-XX:+PrintGCDetails 或 -XX:-PrintGCDetails</li><li>是否使用串行垃圾收集器：-XX:+UseSerialGC 或 -XX:-SerialGC</li></ul></li></ul><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcs8t3ec2uj30j409s7a4.jpg" style="zoom:50%;"><h5 id="KV设值类型"><a href="#KV设值类型" class="headerlink" title="KV设值类型"></a>KV设值类型</h5><ul><li>公式<ul><li>-XX:属性key=属性值value</li></ul></li><li>Case<ul><li>-XX:MetaspaceSize=128m（设置元空间的大小）</li><li>-XX:MaxTenuringThreshold=15（年轻代复制算法的最大年龄限制）</li></ul></li></ul><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcs940eaisj30jw09mdlt.jpg" style="zoom:50%;"><ul><li>两个经典参数（<strong>属于XX参数</strong>）<ul><li>-Xms：等价于-XX:InitialHeapSize</li><li>-Xmx：等价于-XX:MaxHeapSize</li></ul></li></ul><h3 id="如何查看JVM参数（重点）"><a href="#如何查看JVM参数（重点）" class="headerlink" title="如何查看JVM参数（重点）"></a>如何查看JVM参数（重点）</h3><ul><li><strong>java -XX:+PrintFlagsInitial</strong>：查看初始默认值</li><li><strong>java -XX:+PrintFlagsFinal</strong>：查看修改更新，“=”是默认加载的，带“:”的是用户或者JVM修改过的</li></ul><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcsa2u9s1hj31a40dktnn.jpg" alt></p><ul><li><p><strong>java -XX:+PrintCommandLineFlags -version</strong>：打印命令行参数，可以查看默认的垃圾回收器。</p><pre class="line-numbers language-bash"><code class="language-bash">➜  <span class="token variable"><span class="token variable">`</span>demo<span class="token variable">`</span></span> java -XX:+PrintCommandLineFlags -version-XX:InitialHeapSize<span class="token operator">=</span>134217728 -XX:MaxHeapSize<span class="token operator">=</span>2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC java version <span class="token string">"1.8.0_191"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_191-b12<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.191-b12, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="JVM常用的配置参数"><a href="#JVM常用的配置参数" class="headerlink" title="JVM常用的配置参数"></a>JVM常用的配置参数</h3><p>-Xms：初始内存大小，默认为物理内存1/64，等价于-XX:InitialHeapSize。</p><p>-Xmx：最大分配内存，默认为物理内存1/4，等价于-XX:MaxHeapSize。</p><p>-Xss：设置单个线程栈的大小，一般默认为512k～1024k，等价于-XX:ThreadStackSize。</p><p>-Xmn：设置新声嗲的大小。</p><p>-XX:MetaspaceSize：设置元空间大小。（-Xms10 -Xmx10m -XX:MetaspaceSize=1024m -XX:+PrintFlagsFinal）</p><p>-XX:+PrintGCDetails：显示GC日志。</p><p>-XX:SurvivorRatio：设置新生代中eden和s0和s1空间的比例。-XX:SurvivorRatio=8(默认)</p><p>-XX:NewRatio：配置老年代在堆中的占比，剩下1给新生代。-XX:NewRatio=2(新生代占1/3，老年代占2/3)</p><p>-XX:MaxTenuringThreshld：设置对象在新生代中的最大年龄。默认是15.</p><p><strong>典型案例设置</strong></p><p>-Xms128m -Xmx4096 -Xss1024k -XX:MetaspaceSize=512m -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseG1GC</p><hr><h3 id="生产服务器变慢怎么办"><a href="#生产服务器变慢怎么办" class="headerlink" title="生产服务器变慢怎么办"></a>生产服务器变慢怎么办</h3><blockquote><p>整机：<strong>top</strong> 先查看一下整机性能，主要看cpu mem id(idle):空闲率，还有load average，也可以使用uptime(低配版查看性能)</p><p>CPU：<strong>vmstat -n 2 3</strong></p><p>内存：free | free -g | free -m <strong>(推荐使用free -m)</strong>查看内存的使用和空闲情况，单位是MB</p><p>硬盘：<strong>df -h</strong> (disk free)</p><p>磁盘IO：iostat -xdk 2 3</p><p>网络IO：ifstat</p></blockquote><ul><li><p>整机：<code>top</code></p><ul><li>右上角<strong>load average</strong>：3个值代表1分钟，5分钟，15分钟系统的平均负载值，3个值相加除以3乘以100%，如果结果高于60%，说明系统的负载压力很大。（也可以直接输入uptime查看负载精简版）</li><li>查看<strong>%CPU</strong>和内存<strong>%MEM</strong>的占用比例。</li></ul></li><li><p>CPU：<code>vmstat -n 2 3</code></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybpgy1gcb49fonjej3148064gne.jpg" alt></p><blockquote><p>一般vmstat工具的使用是通过两个数字参数来完成的，第一个参数是采样的时间间隔数单位是秒，第二个参数是采样的次数。查看参数主要看两方面，一前一后，前面看procs，后面看cpu。</p><p>procs</p><ul><li>r：运行和等待CPU时间片的进程数，原则上1核的CPU的运行队列不要超过2，整个系统的运行队列不能超过总核数的2倍，<br>否则代表系统压力过大</li><li>b：等待资源的进程数，比如正在等待磁盘I/O、网络I/O等。</li></ul><p>cpu</p><ul><li><p><strong>us</strong>：用户进程消耗CPU时间百分比，us值高，用户进程消耗CPU时间多，如果长期大于50%，优化程序；</p></li><li><p><strong>sy</strong>：内核进程消耗的CPU时间百分比；</p></li><li><p><strong>us + sy</strong> 参考值为80%， 如果us + sy大于80%， 说明可能存在CPU不足。</p></li><li><p>id：处于空闲的CPU百分比；越高越好。</p></li><li><p>wa：系统等待IO的CPU时间百分比；</p></li><li><p>st：来自于一个虚拟机偷取的CPU时间的百分比。</p></li></ul></blockquote></li><li><p>内存：<code>free -m</code><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybpgy1gcb849y0dcj314u0c442f.jpg" alt></p><p>查看额外：pidstat -p 进程号 -r 采样间隔秒数<img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybpgy1gcb86vzxduj30sw070tc6.jpg" alt></p></li><li><p>硬盘：<code>df -h</code><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcb93btg9wj30y00d27o5.jpg" alt></p></li><li><p>磁盘IO：<code>iostat -xdk 2 3</code></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcbap9iegoj31po0ke4iz.jpg" alt></p><blockquote><p><strong>磁盘块设备分布</strong></p><ul><li>rkB/s 每秒读取数据量kB；</li><li>wkB/s 每秒写入数据量kB；</li><li>svctm I/O 请求的平均服务时间，单位毫秒；</li><li>await I/O 请求的平均等待时间，单位毫秒；值越小，性能越好；</li><li>util 一秒中有百分几的时间用于I/O操作。接近100%时，表示磁盘带宽跑满，需要优化程序或者增加磁盘；</li><li>rkB/s、wkB/s根据系统应用不同会有不同的值，但有规律遵循：长期、超大数据读写，肯定不正常，需要优化程序读取。svctm的值与await的值很接近，表示几乎没有I/O等待，磁盘性能好，如果await的值远高于svctm的值，则表示I/O队列等待太长，需要优化程序或更换更快磁盘。</li></ul></blockquote><p><strong>查看额外：pidstat -d 采样间隔秒数 -p 进程号</strong> </p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcbau03v5mj314e0awdpt.jpg" alt></p></li></ul><ul><li><p>网络IO：<code>ifstat</code></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcbb07rl5uj312s09wgq6.jpg" alt></p></li></ul><h3 id="生产环境CPU占用过高怎么办"><a href="#生产环境CPU占用过高怎么办" class="headerlink" title="生产环境CPU占用过高怎么办"></a>生产环境CPU占用过高怎么办</h3><ol><li><p>先用top命令找出CPU占比最高的。</p></li><li><p>ps -ef | grep java | grep -v grep 或者 jps -l 进一步定位，得知是什么应用程序——PID。</p></li><li><p><strong>定位到具体线程或者代码。(ps -mp 进程号 -o THREAD,tid,time)</strong>——tid线程ID。</p><p>-m：显示所有的<strong>线程</strong>、-p：进程使用的CPU时间、-o：该参数后是用户自定义格式。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcbbei6igzj30nq06ugqb.jpg" alt></p></li><li><p>将需要的线程ID转换为16进制格式（<strong>英文小写格式</strong>）</p></li><li><p><strong>jstack 进程ID | grep tid (16进制线程ID) -A60</strong>（打印60行）</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcbbop4eloj30z40hfwqd.jpg" alt></p></li><li><p>成功定位到异常代码在JavaDemo02.java中——第10行，查看代码分析原因并修复。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、JVM内存结构&quot;&gt;&lt;a href=&quot;#1、JVM内存结构&quot; class=&quot;headerlink&quot; title=&quot;1、JVM内存结构&quot;&gt;&lt;/a&gt;1、JVM内存结构&lt;/h2&gt;&lt;h4 id=&quot;JVM由哪些部分组成？&quot;&gt;&lt;a href=&quot;#JVM由哪些部分组成？&quot; c
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://lishaojie1993.gitee.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收-GC</title>
    <link href="https://lishaojie1993.gitee.io/2020/03/04/GC/"/>
    <id>https://lishaojie1993.gitee.io/2020/03/04/GC/</id>
    <published>2020-03-04T11:48:15.000Z</published>
    <updated>2020-05-12T03:40:32.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h2><ul><li><p><strong>引用计数算法</strong>：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。</p></li><li><p><strong>可达性分析算法</strong>：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。不可达对象。</p><p><strong>GC Root</strong>：虚拟机栈(局部变量表)中引用的对象、方法区中类的静态属性引用的对象、方法区中常量引用的对象、本地方法栈中引用的对象。<a id="more"></a></p></li></ul><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><ul><li><p><strong>复制算法</strong>：此算法把内存空间划为两个相等的区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把正在使用中的对象复制到另外一个区域中。</p><p>优点：效率高，不会产生碎片。</p><p>缺点：可用内存变为原来的一半，存活对象多时效率低（复制成本大）。</p></li><li><p><strong>标记-清除算法</strong>：此算法执行分两阶段。第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。此算法需要暂停整个应用，同时，会产生内存碎片。</p><p>优点：相比与复制算法来说不浪费内存。</p><p>缺点：会产生内存碎片，效率低（需要扫描两次）。</p></li><li><p><strong>标记-整理算法</strong>：此算法结合了 “标记-清除” 和 “复制” 两个算法的优点。也是分两阶段，第一阶段从根节点开始标记所有被引用对象，第二阶段遍历整个堆，把清除未标记对象并且把存活对象“压缩”到堆的其中一块，按顺序排放。</p><p>优点：避免了 “标记-清除” 的碎片问题，同时也避免了 “复制” 算法的空间问题。</p><p>缺点：效率比复制算法低，需要多维护一个链表使幸存对象连续。</p></li><li><p><strong>分代收集算法</strong>：一般把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p></li></ul><h2 id="GC什么时候开始？"><a href="#GC什么时候开始？" class="headerlink" title="GC什么时候开始？"></a>GC什么时候开始？</h2><p>GC经常发生的区域是堆区，堆区还可以细分为新生代1/3、老年代2/3，新生代还分为一个Eden区8/10和两个Survivor1/10区。</p><ul><li><p><strong>Minor GC</strong>，发生在新生代的GC，对象优先在Eden中分配，当Eden中没有足够空间时，虚拟机将发生一次Minor GC，因为Java大多数对象都是朝生夕灭，所以Minor GC非常频繁，而且速度也很快;</p></li><li><p><strong>Full GC</strong>，发生在老年代的GC，当老年代没有足够的空间时即发生Full GC，发生Full GC一般都会有一次Minor GC。大对象直接进入老年代，如很长的字符串数组，虚拟机提供一个-XX:PretenureSizeThreadhold参数，令大于这个参数值的对象直接在老年代中分配，避免在Eden区和两个Survivor区发生大量的内存拷贝;</p></li><li><p>发生Minor GC时，虚拟机会检测之前每次晋升到老年代的平均大小是否大于老年代的剩余空间大小，如果大于，则进行一次Full GC，如果小于，则查看HandlePromotionFailure设置是否允许担保失败，如果允许，那只会进行一次Minor GC，如果不允许，则改为进行一次Full GC。</p></li></ul><h2 id="引用-强软弱虚"><a href="#引用-强软弱虚" class="headerlink" title="引用-强软弱虚"></a>引用-强软弱虚</h2><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gctibb8vs6j30pu050wh2.jpg" alt></p><ul><li><p><strong>强引用</strong>：通过new出来的引用，只要强引用还存在，则不会回收。</p></li><li><p><strong>软引用</strong>：在内存不足的情况下，会被jvm回收。通过SoftReference类来实现。</p></li><li><p><strong>弱引用</strong>：非必须对象，只要已发生GC就会把它干掉。通过WeakReference类来实现。</p></li><li><p><strong>虚引用</strong>：相当于没有引用，被jvm干掉会收到系统通知。通过PhantomReference类来实现。</p></li></ul><h2 id="查看方式"><a href="#查看方式" class="headerlink" title="查看方式"></a>查看方式</h2><p><strong>java -XX:+PrintCommandLineFlags -version</strong></p><pre class="line-numbers language-bash"><code class="language-bash">➜  <span class="token variable"><span class="token variable">`</span>demo<span class="token variable">`</span></span> java -XX:+PrintCommandLineFlags -version-XX:InitialHeapSize<span class="token operator">=</span>134217728 -XX:MaxHeapSize<span class="token operator">=</span>2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC java version <span class="token string">"1.8.0_191"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_191-b12<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.191-b12, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上参数<strong>-XX:+UseParallelGC</strong>：可以看出使用并行垃圾收集器。</p><p>垃圾收集器的种类：<strong>串行｜并行｜并发｜G1</strong></p><p><strong>UseSerialGC｜UseParallelGC｜UseConcMarkSweepGC｜UseParNewGC｜UseParallelOldGC｜UseG1GC</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloGC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloGC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过设置参数修改默认垃圾收集器：</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcrgjz2dowj31d20kiauo.jpg" alt></p><p>在程序运行时进入Terminal，通过<code>jps</code>查看进程号，再使用<code>jinfo -flag 垃圾收集器 进程号</code>查看，“+”代表使用。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcrgm07mr8j30k00bs0zp.jpg" style="zoom:50%;"><h2 id="部分参数说明"><a href="#部分参数说明" class="headerlink" title="部分参数说明"></a>部分参数说明</h2><ul><li>DefNew：Default New Generation</li><li>Tenured：Serial Old</li><li>ParNew：Parallel New Generation</li><li>PSYoungGen：Parallel Scavenge Young Generation</li><li>ParOldGen：Parallel Old Generation</li></ul><h2 id="Server-Client模式"><a href="#Server-Client模式" class="headerlink" title="Server/Client模式"></a>Server/Client模式</h2><p>只需要掌握Server模式即可，Client模式基本用不到。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcrhnxxi48j30ps03wgnz.jpg" alt></p><p>操作系统：</p><ul><li>32位Windows操作系统，不论硬件如何都默认使用Client的JVM模式。</li><li>32位其他操作系统，2G内存+2个CPU以上的配置都用Server模式，低于该配置的还是Client模式。</li><li>64位的操作系统Only Server模式。</li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><p>一个单线程的<strong>串行收集器</strong>，在垃圾收集时会(STW)暂停其他所有工作线程直到它收集结束。</p><p>串行收集器是最古老、最稳定以及效率高的收集器，可能会产生<strong>较长时间的停顿</strong>。</p><ul><li>新生代收集器</li><li>采用“复制”算法</li><li>单线程收集</li><li>高效：没有线程交互的开销</li></ul><p>用途：Java虚拟机运行在<strong>Client</strong>模式下默认的<strong>新生代</strong>垃圾收集器。</p><p>对应的JVM参数：-XX:+UseSerialGC，开启后默认使用<code>Serial+Serial Old</code>组合。</p><blockquote><p>关于自动激活另一个年代收集器的说明，C++源码中有解释：</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">bool Arguments::check_gc_consistency(){  bool status = true;  uint i = 0;  if(UseSerialGC)                       i++;  if(UseConcMarkSweepGC || UseParNewGC) i++;  if(UseParallelGC || UseParallelOldGC) i++;  if(UseG1GC)                           i++;  if(i > 1) {......}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新生代、老年代都会使用<code>串行</code>垃圾收集器。</p><p>新生代使用“复制”算法，老年代使用“标记-整理”算法。</p><hr><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><p>使用多个垃圾收集线程的<strong>并行垃圾收集器</strong>，在垃圾收集时会(STW)暂停其他所有工作线程直到它收集结束。</p><p>ParNew是Serial收集器的多线程版本，最常见的是配合CMS工作，也会(STW)暂停其他工作线程。</p><ul><li>新生代收集器</li><li>采用“复制”算法</li><li>多线程收集</li></ul><p>用途：Java虚拟机运行在<strong>Server</strong>模式下默认的<strong>新生代</strong>垃圾收集器。</p><p>对应的JVM参数：-XX:+UseParNewGC，开启后默认使用<code>ParNew+Serial Old</code>组合（<strong>不推荐</strong>）。</p><blockquote><p>-XX:ParallelGCThreads    限制线程数量，默认开启和CPU相同的线程数。</p></blockquote><p>新生代使用<code>并行</code>收集器，老年代使用<code>串行</code>收集器。</p><p>新生代使用“复制”算法，老年代使用“标记-整理”算法。</p><blockquote><p>Java HotSpot(TM) 64-Bit Server VM warning: Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release.</p><p>翻译：Java HotSpot（TM）64位服务器虚拟机警告：不推荐将ParNew 新生代收集器与Serial old串行收集器一起使用，并可能在将来的版本中删除。</p></blockquote><hr><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><p>使用多个垃圾收集线程的<strong>并行垃圾收集器</strong>，即串行收集器在新生代和老年代的并行化，俗称“吞吐量优先”收集器。</p><ul><li>新生代收集器</li><li>采用“复制”算法</li><li>多线程收集</li></ul><p>Parallel Scavenge关注两个重点：</p><ol><li><code>可控制的吞吐量</code>：比如程序运行100分钟，垃圾收集时间1分钟，吞吐量就是99%。高吞吐量意味着高效利用CPU的时间，它多用于在后台运算而不需要太多交互的任务。</li><li><code>自适应调节策略</code>：虚拟机会根据当前的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量。</li></ol><p>用途：适用于科学计算、大数据处理等弱交互场景。</p><p>对应JVM参数：-XX:+UseParallelGC 或 -XX:+UseParallelOldGC(<strong>JDK1.8可相互激活</strong>)开启后使用<code>Parallel+Parallel Old</code>组合。</p><p>新生代和老年代都使用<code>并行</code>收集器。(<strong>Java8默认的垃圾收集器：PSYoungGen+ParOldGen</strong>)</p><p>新生代使用“复制”算法，老年代使用“标记-整理”算法。 </p><blockquote><p>-XX:ParallelGCThreads=数字N    表示启动多少个GC线程。</p><p>CPU&gt;8：N=5/8</p><p>CPU&lt;8：N=CPU的实际个数</p></blockquote><hr><h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="(Serial Old)"></a>(Serial Old)</h3><ul><li>老年代收集器</li><li>采用“标记-整理”算法</li><li>单线程收集</li></ul><p>Serial的老年代版本，Java8以后被废弃了，<strong>不推荐使用</strong>。</p><ol><li>在JDK1.5之前版本与新生代的Parallel Scavenge收集器搭配使用。</li><li>作为老年代版本中CMS收集器的后备垃圾收集方案。</li></ol><blockquote><p><strong>如要配置：-XX:+UseSerialOldGC，则会出现如下错误。</strong></p><p>Error：Could not create the Java Virtual Machine.</p><p>Error：A fatal exception has occurred. Program will exit.</p><p>Unrecongnized VM option ‘UseSerialOldGC’</p><p>Did you mean ‘(+/-)UseSerialGC’？</p><hr><p>错误：无法创建Java虚拟机。</p><p>错误：发生了致命的异常。程序将退出。</p><p>未编译的VM选项“UseSerialOldGC”</p><p>你是不是想使用“（+/-）UseSerialGC”？</p></blockquote><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3><ul><li>老年代收集器</li><li>采用“标记-整理”算法</li><li>多线程收集</li></ul><p>Parallel Scavenge的老年代版本，在上面解释了，这里不在赘述。</p><hr><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>CMS是一种以获取最短回收停顿时间为目标的收集器，适合应用在互联网站或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短。CMS非常适合堆内存大，CPU核数多的服务器端应用，是G1出现前大型应用的首选。</p><ul><li>老年代收集器</li><li>采用“标记-清除”算法</li><li>并发收集，低停顿</li></ul><blockquote><p><strong>优点：并发收集、低停顿，并发指的是和用户线程一起执行。</strong></p><p><strong>缺点：产生大量空间碎片、并发阶段CPU压力很大，会降低吞吐量。</strong></p></blockquote><p>用途：用户线程和垃圾收集线程同时执行，有时候不需要停顿用户线程，适用对响应时间有要求的场景（强交互）。</p><p>对应JVM参数：-XX:+UseConcMarkSweepGC，开启后使用<code>ParNew+CMS+Serial Old(担保机制)</code></p><ol><li>初始标记：只是标记一下GCRoot能直接关联的对象，速度很快，仍然需要<code>(STW)</code>暂停所有工作线程。</li><li>并发标记：进行GCRoot的跟踪过程，和用户线程一起工作，不需要暂停工作线程。主要标记过程，标记全部对象。</li><li>重新标记：由于并发标记的同时用户线程依然运行，因此正式清理前，再做修正，仍然需要<code>(STW)</code>暂停工作线程。</li><li>并发清除：清除GCRoot不可达的对象，和用户线程一起工作，不需要暂停工作线程，基于标记结果直接清理。</li></ol><blockquote><p>由于耗时最长的<strong>并发标记</strong>和<strong>并发清除</strong>都是跟用户线程一起并发工作的，所以总体上来看CMS收集器的内存回收和用户线程是一起并发执行的，也因此可以做到停顿时间短，响应速度快。</p><p>由于并发进行，CMS的收集线程与应用线程会同时增加对堆内存的占用，也就是说，<strong>CMS必须要在老年代堆内存用尽之前完成垃圾回收，否则CMS回收失败时，将会触发担保机制</strong>，串行老年代回收器将会以STW的方式进行一次GC，造成较大停顿。</p></blockquote><hr><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>想了解G1，我们先总结下以前收集器的特点：</p><ol><li>年轻代和老年代都是各自独立且连续的内存块</li><li>年轻代的收集都使用“复制”算法</li><li>老年代的收集必须扫描整个老年代区域</li><li>都是以尽可能少而快速的执行GC为设计原则</li></ol><p>G1(Garbage First)收集器是一款面向服务端应用的垃圾收集器。适用于多处理器和大容量内存环境中，在实现高吞吐量的同时，尽可能的缩短垃圾收集器暂停时间。另外还有以下特性：</p><ul><li>与CMS类似，与应用线程并发执行</li><li>更快的整理空闲空间</li><li>需要更多的时间来预测GC停顿时间</li><li>不希望牺牲大量的吞吐性能</li><li>不需要更大的Java Heap</li></ul><p>G1收集器的设计目标是取代CMS收集器，它与CMS相比，在以下方面表现的更为出色：</p><blockquote><p>G1是一个有整理内存过程的垃圾收集器，不会产生内存碎片。</p><p>G1的STW更可控，G1在停顿时间上添加了预测机制，用户可以指定停顿时间。</p></blockquote><p>G1将整个Java堆划分为多个大小相等的独立区域(Region)，虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分(可以不连续)Region的集合——最大的好处是化整为零，避免全盘扫描，只需要按照区域来进行扫描即可。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcs3gh4vwej30jy0bwh0w.jpg" style="zoom:50%;"><p>在G1中还有一种特殊的区域，叫Humongous(巨大的)区域，它专门用来存放巨型对象，如果一个H区装不下一个巨型对象，那么G1会寻找连续的H区来存储，为了能找到连续的H区，有时候不得不启动Full GC。</p><hr><p><strong>G1收集器下的Yong GC</strong></p><p>针对Eden区进行收集，Eden区耗尽后会被触发，主要是小区域收集+形成连续的内存块，避免内存碎片。</p><ul><li>Eden区的数据移动到Survivor区，假如出现了Survivor区空间不够，Eden区数据会晋升到Old区。</li><li>Survivor区的数据移动到新的Survivor区，部分数据晋升到Old区。</li><li>最后Eden区收拾干净了，GC结束，用户的应用程序继续执行。</li></ul><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcs3y7ikhxj30zc0bg4nr.jpg" style="zoom: 50%;"><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcs3xte3dej30zu0cuqu5.jpg" style="zoom:50%;"><hr><p>G1参数配置</p><ul><li>-XX:+UseG1GC</li><li>-XX:G1HeapRegionSize=n：可指定分区大小（1M～32M，且必须是2的幂），默认将整堆划分为2048个分区。也就是说能够支持的最大内存是：32M*2048=65536M=64G内存。</li><li>-XX:MaxGCPauseMillis=n：最大GC停顿时间单位是毫秒，这个是软目标，JVM将尽可能（不保证）停顿时间小于这个时间。</li><li>-XX:InitiatingHeapOccupancyPercent=n：堆占用多少百分比的时候就触发GC，默认为45%。</li><li>-XX:ConcGCThreads=n：并发GC使用的线程数。</li><li>-XX:G1ReservePercent=n：设置作为空闲空间的预留内存百分比，以降低目标空间溢出的风险，默认值是10%。</li></ul><p>G1收集器把堆内存划分为大小固定的几个独立区域，并发的进行垃圾收集，同时在后台维护一个优先级列表，每次根据所允许的收集时间， 优先回收垃圾最多的区域。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。</p><blockquote><p><strong>空间整合，G1收集器采用”标记-整理“算法，局部通过”复制“算法，不会产生内存碎片。</strong></p><p><strong>可预测停顿，在不牺牲吞吐量的前提下，实现低停顿垃圾回收。</strong></p></blockquote><hr><p>小总结：</p><table><thead><tr><th align="center">参数</th><th align="center">新生代收集器</th><th align="center">新生代算法</th><th align="center">老年代收集器</th><th align="center">老年代算法</th></tr></thead><tbody><tr><td align="center">-XX:+UseSerialGC</td><td align="center">Serial</td><td align="center">复制</td><td align="center">Serial Old</td><td align="center">标记-整理</td></tr><tr><td align="center">-XX:+UseParNewGC</td><td align="center">ParNew</td><td align="center">复制</td><td align="center">Serial Old</td><td align="center">标记-整理</td></tr><tr><td align="center">-XX:+UseParallelGC<br>-XX:+UseParallelOldGC</td><td align="center">Parallel Scavenge</td><td align="center">复制</td><td align="center">Parallel Old</td><td align="center">标记-整理</td></tr><tr><td align="center">-XX:+UseConcMarkSweepGC</td><td align="center">ParNew</td><td align="center">复制</td><td align="center">CMS+SerialOld(担保)</td><td align="center"><strong>标记-清除</strong></td></tr><tr><td align="center">-XX:+UseG1GC</td><td align="center">没有年代划分</td><td align="center">整体上采用标记-整理算法</td><td align="center">局部是通过复制算法</td><td align="center">不会产生内存碎片</td></tr></tbody></table><h2 id="如何选择收集器"><a href="#如何选择收集器" class="headerlink" title="如何选择收集器"></a>如何选择收集器</h2><ul><li><p>单CPU或小内存，单机程序（现在基本用不到）</p><p>-XX:+UseSerialGC</p></li><li><p>多CPU，需要最大吞吐量，如后台计算的弱交互型应用</p><p>-XX:+UseParallelGC 或 -XX:+UseParallelOldGC 均可。</p></li><li><p>多CPU，追求低停顿时间，需要快速响应的互联网应用</p><p>-XX:+UseConcMarkSweepGC</p></li></ul><h3 id="生产部署和调参优化"><a href="#生产部署和调参优化" class="headerlink" title="生产部署和调参优化"></a>生产部署和调参优化</h3><p>定制化诉求：java -server -Xms1024m -Xmx1024m -XX:+UseG1GC -jar <code>jar包/war包</code></p><h3 id="查看日志参数-XX-PrintGCDetails"><a href="#查看日志参数-XX-PrintGCDetails" class="headerlink" title="查看日志参数-XX:+PrintGCDetails"></a>查看日志参数-XX:+PrintGCDetails</h3><p><strong>YoungGC</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gctgwjxsv3j316c0dax31.jpg" alt></p><p><strong>FullGC</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcthckmrgyj32u60ngnpf.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何确定垃圾&quot;&gt;&lt;a href=&quot;#如何确定垃圾&quot; class=&quot;headerlink&quot; title=&quot;如何确定垃圾&quot;&gt;&lt;/a&gt;如何确定垃圾&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;引用计数算法&lt;/strong&gt;：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可达性分析算法&lt;/strong&gt;：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。不可达对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GC Root&lt;/strong&gt;：虚拟机栈(局部变量表)中引用的对象、方法区中类的静态属性引用的对象、方法区中常量引用的对象、本地方法栈中引用的对象。
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://lishaojie1993.gitee.io/tags/JVM/"/>
    
      <category term="GC" scheme="https://lishaojie1993.gitee.io/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>内存溢出-OOM</title>
    <link href="https://lishaojie1993.gitee.io/2020/03/02/OOM/"/>
    <id>https://lishaojie1993.gitee.io/2020/03/02/OOM/</id>
    <published>2020-03-02T06:46:18.000Z</published>
    <updated>2020-05-12T04:05:35.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OOM架构"><a href="#OOM架构" class="headerlink" title="OOM架构"></a>OOM架构</h2><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcr5s7fjhtj30us0gqwou.jpg" alt></p><h2 id="java-lang-StackOverflowError"><a href="#java-lang-StackOverflowError" class="headerlink" title="java.lang.StackOverflowError"></a>java.lang.StackOverflowError</h2><p>此错误为<strong>栈内存溢出</strong>，出现原因是深度的方法调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOverflowDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">testDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">testDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.StackOverflowError</span><span class="token comment" spellcheck="true">//    at StackOverflowDemo.testDemo(StackOverflowDemo.java:6)</span><span class="token comment" spellcheck="true">//    at StackOverflowDemo.testDemo(StackOverflowDemo.java:6)</span><span class="token comment" spellcheck="true">//    at StackOverflowDemo.testDemo(StackOverflowDemo.java:6)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="java-lang-OutOfMemoryError"><a href="#java-lang-OutOfMemoryError" class="headerlink" title="java.lang.OutOfMemoryError"></a>java.lang.OutOfMemoryError</h2><h3 id="Java-heap-space"><a href="#Java-heap-space" class="headerlink" title="Java heap space"></a>Java heap space</h3><blockquote><p>由于<strong>对象太多</strong>导致内存溢出。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaHeapSpaceDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">80</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//80MB</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改运行时虚拟机参数：Run ➞ Edit Configurations ➞ VM options：-Xms10m -Xmx10m</span><span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span><span class="token comment" spellcheck="true">//    at JavaHeapSpaceDemo.main(JavaHeapSpaceDemo.java:3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="GC-overhead-limit-exceeded"><a href="#GC-overhead-limit-exceeded" class="headerlink" title="GC overhead limit exceeded"></a>GC overhead limit exceeded</h3><blockquote><p>由于<strong>GC回收时间过长</strong>导致内存溢出。</p></blockquote><p>过长的定义是：超过98%的时间用来做GC并且回收了不到2%的堆内存，连续多次GC都只回收了不到2%内存的极端情况下才会出现此错误。假如不抛出GC overhead limit exceeded会出现什么情况呢？那就是GC清理出的那点内存很快会再次被填满，迫使再次执行GC，恶性循环。CPU使用率一直是100%但是GC却没有明显效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCOverHeadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改运行时虚拟机参数：-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m</span><span class="token comment" spellcheck="true">//java.lang.OutOfMemoryError: GC overhead limit exceeded</span><span class="token comment" spellcheck="true">//    at java.lang.Integer.toString(Integer.java:401)</span><span class="token comment" spellcheck="true">//    at java.lang.String.valueOf(String.java:3099)</span><span class="token comment" spellcheck="true">//    at GCOverHeadDemo.main(GCOverHeadDemo.java:10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Direct-buffer-memory"><a href="#Direct-buffer-memory" class="headerlink" title="Direct buffer memory"></a>Direct buffer memory</h3><blockquote><p>由于<strong>本地内存不足</strong>导致内存溢出。</p></blockquote><p>写NIO程序经常使用ByteBuffer对象来读取或者写入数据，这是一种基于通道(Channel)与缓冲区(Buffer)的I/O方式。它可以使用Native函数库<strong>直接分配堆外内存</strong>，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，避免了在Java堆和Native堆中来回复制数据。</p><ul><li><p>ByteBuffer.allocate(capability)：这种方式是分配JVM堆内存，属于GC管辖范围，由于需要拷贝所以速度相对较慢。</p></li><li><p>ByteBuffer.allocateDirect(capability)：这种方式是<strong>分配系统本地内存</strong>，不属于GC管辖范围，不需要内存拷贝速度快。</p></li></ul><p>但如果不断分配本地内存，堆内存很少使用，那么JVM就不需要执行GC，DirectByteBuffer对象们就不会被回收。这时候虽然堆内存充足，但是本地内存已经使用光了，再次尝试分配本地内存就会出现OutOfMemoryError。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectBufferMemoryDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置的最大直接内存："</span><span class="token operator">+</span><span class="token punctuation">(</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">maxDirectMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer bb <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6MB</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改运行时虚拟机参数：-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m</span><span class="token comment" spellcheck="true">//配置的最大直接内存：5.0MB</span><span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.OutOfMemoryError: Direct buffer memory</span><span class="token comment" spellcheck="true">//    at java.nio.Bits.reserveMemory(Bits.java:694)</span><span class="token comment" spellcheck="true">//    at java.nio.DirectByteBuffer.&lt;init>(DirectByteBuffer.java:123)</span><span class="token comment" spellcheck="true">//    at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)</span><span class="token comment" spellcheck="true">//    at DirectBufferMemoryDemo.main(DirectBufferMemoryDemo.java:6)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="unable-to-create-newnative-thread"><a href="#unable-to-create-newnative-thread" class="headerlink" title="unable to create newnative thread"></a>unable to create newnative thread</h3><blockquote><p>由于应用程序<strong>创建太多线程超过系统承载极限</strong>导致内存溢出。</p></blockquote><p>这个错误在高并发请求服务器时比较常见，linux系统默认允许单个进程可以创建1024个线程（1024是理论数据，一般到900多就会抛异常），如果超过这个数量就会报OutOfMemoryError:unable to create newnative thread。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnableCreateNewThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//注意for循环中没有配置范围</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//linux下创建940个线程后抛出异常</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.OutOfMemoryError: unable to create new native thread</span><span class="token comment" spellcheck="true">//    at java.lang.Thread.start0(Native Method)</span><span class="token comment" spellcheck="true">//    at java.lang.Thread.start(Thread.java:717)</span><span class="token comment" spellcheck="true">//    at UnableCreateNewThreadDemo.main(UnableCreateNewThreadDemo.java:11)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案无非两种：降低应用程序创建线程的数量、修改linux系统的服务器配置扩大限制。</p><p>在linux的普通用户下：$ ulimit -u</p><p>得到的返回结果是：$ 1024 </p><p>$ vim /etc/security/limits.d/90-nproc.conf</p><pre class="line-numbers language-bash"><code class="language-bash">*        soft        nproc        1024root     soft        nproc        unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如必要扩大限制，可以在root用户下添加普通用户并设置线程数量，不要直接修改 *</p><hr><h3 id="Metaspace"><a href="#Metaspace" class="headerlink" title="Metaspace"></a>Metaspace</h3><blockquote><p>由于元空间满了导致内存溢出。</p></blockquote><p>Java8以后使用Metaspace来替代永久代。查看元空间的初始大小的方式如下：</p><p>➜ <code>demo</code> java -XX:+PrintFlagsInitial</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcra0rclwrj31ak0bqk4w.jpg" alt></p><p>永久代（元空间）存放了以下信息：</p><ul><li><p>虚拟机加载的类信息</p></li><li><p>常量池</p></li><li><p>静态变量</p></li><li><p>即时编译后的代码</p></li></ul><p>Metaspace元空间与永久代最大的区别在于：Metaspace并不在虚拟机内存中，而是使用本地内存。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetaSpaceDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>OOMTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"次后发生异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改运行时虚拟机参数：-XX:MetaspaceSize=8m -XX:MaxMetaspaceSize=8m</span><span class="token comment" spellcheck="true">//362次后发生异常</span><span class="token comment" spellcheck="true">//Caused by: java.lang.OutOfMemoryError: Metaspace</span><span class="token comment" spellcheck="true">//    at java.lang.ClassLoader.defineClass1(Native Method)</span><span class="token comment" spellcheck="true">//    at java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OOM架构&quot;&gt;&lt;a href=&quot;#OOM架构&quot; class=&quot;headerlink&quot; title=&quot;OOM架构&quot;&gt;&lt;/a&gt;OOM架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/medias/loading.gif&quot; data-original=&quot;https://tva1
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://lishaojie1993.gitee.io/tags/JVM/"/>
    
      <category term="OOM" scheme="https://lishaojie1993.gitee.io/tags/OOM/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键（Mac版）</title>
    <link href="https://lishaojie1993.gitee.io/2020/03/01/idea-hotkey/"/>
    <id>https://lishaojie1993.gitee.io/2020/03/01/idea-hotkey/</id>
    <published>2020-03-01T07:35:13.000Z</published>
    <updated>2020-05-12T03:36:30.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最常使用"><a href="#最常使用" class="headerlink" title="最常使用"></a>最常使用</h3><p><code>Ctrl + O</code>：快捷覆写方法</p><p><code>Ctrl+Enter</code>：Generate界面，快速生成Get，Set方法</p><p><code>Shift+Enter</code>：换到下一行</p><p><code>Command+R</code>：字符替换</p><p><code>Command+Shift+R</code>：可以在整个工程或着某个目录下面替换变量</p><p><code>Command+R</code>：运行当前工程</p><p><code>Command+Y</code>：查看选中当前源码</p><p><code>Command+D</code>：向下复制一行</p><p><code>Command+backspace</code>：删除一行</p><p><code>Ctrl+Shift+J</code>：把多行连接成一行，会去掉空格的行</p><p><code>Command+J</code>：可以生成一些自动代码，比如for循环</p><p><code>Command+B</code>：追踪变量的来源</p><p><code>Ctrl+Shift+B</code>：进入变量所属的类的源码</p><p><code>Command+Shift+F</code>：可以在整个工程或着某个目录下面查找变量</p><p><code>Command+E</code>：最近打开的文件</p><p><code>Alt+Enter</code>：导入包，自动修改</p><p><code>Command+Alt+L</code>：格式化代码</p><p><code>Command+P</code>：方法参数提示</p><p><code>Command+Alt+T</code>：Surround With，被选定代码块包裹</p><p><code>Command+/</code>：注释一行或着多行</p><p><code>Command+Shift+/</code>：多行注释</p><p><code>Command+Alt+左/右箭头</code>：返回上次编辑的位置</p><p><code>Command+左/右箭头</code>：光标跳到该行代码的最左边/最右边</p><p><code>Alt + F1</code>：快捷选择</p><p><code>Shift+F6</code>：文件重命名</p><p><code>Alt+F7</code>：查找变量方法使用过的地方</p><p><code>Command+Shift+上下箭头</code>：把代码上移或着下移</p><p><code>Command+F12</code>：可以显示当前文件的结构</p><p><code>Command+Alt+B</code>：可以导航到一个抽象方法的实现代码</p><p><code>Command+,</code>：呼出偏好设置</p><h3 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h3><ul><li>⌘ Command</li><li>⇧ Shift</li><li>⌥ Option</li><li>⌃ Ctrl</li><li>↩︎ Return/Enter</li><li>⌫ BackSpace</li><li>⌦ 向前删除键（Fn+BackSpace）</li><li>↑ 上箭头</li><li>↓ 下箭头</li><li>← 左箭头</li><li>→ 右箭头</li><li>⇞ Page Up（Fn+↑）</li><li>⇟ Page Down（Fn+↓）</li><li>Home Fn + ←</li><li>End Fn + →</li><li>⇥ 右制表符（Tab键）</li><li>⇤ 左制表符（Shift+Tab）</li><li>⎋ Escape (Esc)</li></ul><h3 id="Editing（编辑）"><a href="#Editing（编辑）" class="headerlink" title="Editing（编辑）"></a>Editing（编辑）</h3><ul><li>⌃Space 基本的代码补全（补全任何类、方法、变量）</li><li>⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）</li><li>⌘⇧↩ 自动结束代码，行末自动添加分号</li><li>⌘P 显示方法的参数信息</li><li>⌃J, Mid. button click 快速查看文档</li><li>⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li><li>⌘+鼠标放在代码上 显示代码简要信息</li><li>⌘F1 在错误或警告处显示具体描述信息</li><li>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li>⌃O 覆盖方法（重写父类方法）</li><li>⌃I 实现方法（实现接口中的方法）</li><li>⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li><li>⌘/ 注释/取消注释与行注释</li><li>⌘⌥/ 注释/取消注释与块注释</li><li>⌥↑ 连续选中代码块</li><li>⌥↓ 减少当前选中的代码块</li><li>⌃⇧Q 显示上下文信息</li><li>⌥↩ 显示意向动作和快速修复代码</li><li>⌘⌥L 格式化代码</li><li>⌃⌥O 优化import</li><li>⌃⌥I 自动缩进线</li><li>⇥ / ⇧⇥ 缩进代码 / 反缩进代码</li><li>⌘X 剪切当前行或选定的块到剪贴板</li><li>⌘C 复制当前行或选定的块到剪贴板</li><li>⌘V 从剪贴板粘贴</li><li>⌘⇧V 从最近的缓冲区粘贴</li><li>⌘D 复制当前行或选定的块</li><li>⌘⌫ 删除当前行或选定的块的行</li><li>⌃⇧J 智能的将代码拼接成一行</li><li>⌘↩ 智能的拆分拼接的行</li><li>⇧↩ 开始新的一行</li><li>⌘⇧U 大小写切换</li><li>⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始</li><li>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</li><li>⌥⌫ 删除到单词的开头</li><li>⌘+ / ⌘- 展开 / 折叠代码块</li><li>⌘⇧+ 展开所以代码块</li><li>⌘⇧- 折叠所有代码块</li><li>⌘W 关闭活动的编辑器选项卡</li></ul><h3 id="Search-Replace（查询-替换）"><a href="#Search-Replace（查询-替换）" class="headerlink" title="Search/Replace（查询/替换）"></a>Search/Replace（查询/替换）</h3><ul><li>Double ⇧ 查询任何东西</li><li>⌘F 文件内查找</li><li>⌘G 查找模式下，向下查找</li><li>⌘⇧G 查找模式下，向上查找</li><li>⌘R 文件内替换</li><li>⌘⇧F 全局查找（根据路径）</li><li>⌘⇧R 全局替换（根据路径）</li><li>⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li><li>⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li></ul><h3 id="Usage-Search（使用查询）"><a href="#Usage-Search（使用查询）" class="headerlink" title="Usage Search（使用查询）"></a>Usage Search（使用查询）</h3><ul><li>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法</li><li>⌘⇧F7 在文件中突出显示的用法</li><li>⌘⌥F7 显示用法</li></ul><h3 id="Compile-and-Run（编译和运行）"><a href="#Compile-and-Run（编译和运行）" class="headerlink" title="Compile and Run（编译和运行）"></a>Compile and Run（编译和运行）</h3><ul><li>⌘F9 编译Project</li><li>⌘⇧F9 编译选择的文件、包或模块</li><li>⌃⌥R 弹出 Run 的可选择菜单</li><li>⌃⌥D 弹出 Debug 的可选择菜单</li><li>⌃R 运行</li><li>⌃D 调试</li><li>⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置</li></ul><h3 id="Debugging（调试）"><a href="#Debugging（调试）" class="headerlink" title="Debugging（调试）"></a>Debugging（调试）</h3><ul><li>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li>F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li>⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li>⇧F8 跳出</li><li>⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点</li><li>⌥F8 计算表达式（可以更改变量值使其生效）</li><li>⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li>⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li>⌘⇧F8 查看断点信息</li></ul><h3 id="Navigation（导航）"><a href="#Navigation（导航）" class="headerlink" title="Navigation（导航）"></a>Navigation（导航）</h3><ul><li>⌘O 查找类文件</li><li>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li><li>⌘⌥O 前往指定的变量 / 方法</li><li>⌃← / ⌃→ 左右切换打开的编辑tab页</li><li>F12 返回到前一个工具窗口</li><li>⎋ 从工具窗口进入代码文件窗口</li><li>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li>⌘⇧F4 关闭活动run/messages/find/… tab</li><li>⌘L 在当前文件跳转到某一行的指定处</li><li>⌘E 显示最近打开的文件记录列表</li><li>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方</li><li>⌘⇧⌫ 跳转到最后一个编辑的地方</li><li>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处</li><li>⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义</li><li>⌃⇧B 跳转到类型声明处</li><li>⌘U 前往当前光标所在方法的父类的方法 / 接口定义</li><li>⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置</li><li>⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置</li><li>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li><li>⌃H 显示当前类的层次结构</li><li>⌘⇧H 显示方法层次结构</li><li>⌃⌥H 显示调用层次结构</li><li>F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置</li><li>F4 / ⌘↓ 编辑/查看代码源</li><li>⌥ Home 显示到当前文件的导航条</li><li>F3选中文件/文件夹/代码行，添加/取消书签</li><li>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li>⌃0…⌃9 定位到对应数值的书签位置</li><li>⌘F3 显示所有书签</li></ul><h3 id="Refactoring（重构）"><a href="#Refactoring（重构）" class="headerlink" title="Refactoring（重构）"></a>Refactoring（重构）</h3><ul><li>F5 复制文件到指定目录</li><li>F6 移动文件到指定目录</li><li>⌘⌫ 在文件上为安全删除文件，弹出确认框</li><li>⇧F6 重命名文件</li><li>⌘F6 更改签名</li><li>⌘⌥N 一致性</li><li>⌘⌥M 将选中的代码提取为方法</li><li>⌘⌥V 提取变量</li><li>⌘⌥F 提取字段</li><li>⌘⌥C 提取常量</li><li>⌘⌥P 提取参数</li></ul><h3 id="VCS-Local-History（版本控制-本地历史记录）"><a href="#VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="VCS/Local History（版本控制/本地历史记录）"></a>VCS/Local History（版本控制/本地历史记录）</h3><ul><li>⌘K 提交代码到版本控制器</li><li>⌘T 从版本控制器更新代码</li><li>⌥⇧C 查看最近的变更记录</li><li>⌃C 快速弹出版本控制器操作面板</li></ul><h3 id="Live-Templates（动态代码模板）"><a href="#Live-Templates（动态代码模板）" class="headerlink" title="Live Templates（动态代码模板）"></a>Live Templates（动态代码模板）</h3><ul><li>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住</li><li>⌘J 插入自定义动态代码模板</li></ul><h3 id="General（通用）"><a href="#General（通用）" class="headerlink" title="General（通用）"></a>General（通用）</h3><ul><li>⌘⌥Y 同步、刷新</li><li>⌃⌘F 切换全屏模式</li><li>⌘⇧F12 切换最大化编辑器</li><li>⌥⇧F 添加到收藏夹</li><li>⌥⇧I 检查当前文件与当前的配置文件</li><li>⌘, 打开IDEA系统设置（Preferences）</li><li>⌘; 打开项目结构对话框（Project Structure）</li><li>⇧⌘A 查找动作（可设置相关选项）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最常使用&quot;&gt;&lt;a href=&quot;#最常使用&quot; class=&quot;headerlink&quot; title=&quot;最常使用&quot;&gt;&lt;/a&gt;最常使用&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Ctrl + O&lt;/code&gt;：快捷覆写方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Enter&lt;/code&gt;：Ge
      
    
    </summary>
    
    
    
      <category term="hotkey" scheme="https://lishaojie1993.gitee.io/tags/hotkey/"/>
    
  </entry>
  
  <entry>
    <title>Java锁-Sync&amp;Lock</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/29/lock/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/29/lock/</id>
    <published>2020-02-29T10:35:17.000Z</published>
    <updated>2020-05-12T04:05:08.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="乐观锁｜悲观锁"><a href="#乐观锁｜悲观锁" class="headerlink" title="乐观锁｜悲观锁"></a>乐观锁｜悲观锁</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。</p><p>java 中的乐观锁基本都是通过 CAS 操作实现的，CAS 是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。详情可参考我的另一篇博客：<a href="https://lishaojie1993.gitee.io/2019/02/28/CAS/">CAS算法原理</a></p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。java 中的悲观锁就是 Synchronized，AQS 框架下的锁则是先尝试 cas 乐观锁去获取锁，获取不到，才会转换为悲观锁，如 ReentrantLock。</p><h2 id="自旋锁-SpinLock"><a href="#自旋锁-SpinLock" class="headerlink" title="自旋锁-SpinLock"></a>自旋锁-SpinLock</h2><p>自旋锁原理非常简单， 如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换（进入阻塞挂起状态等待被唤醒），它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。<a id="more"></a></p><p>详情可参考我的另一篇博客：<a href="https://lishaojie1993.gitee.io/2020/02/21/SpinLock/">自旋锁-SpinLock</a></p><h2 id="可重入锁-递归锁"><a href="#可重入锁-递归锁" class="headerlink" title="可重入锁(递归锁)"></a>可重入锁(递归锁)</h2><p>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程外层方法获取锁的时候，在进入内层方法会自动获取锁。也就是说，<strong>线程可以进入任何一个它已经拥有的锁所同步着的代码块</strong>。</p><p><strong>ReentrantLock</strong>和<strong>Synchronized</strong>都是可重入锁，可重入锁的最大作用在于避免死锁。</p><ul><li><p><strong>Synchronized实现原理</strong></p><p>每一个锁关联一个线程持有者和计数器，当计数器为 0 时表示该锁没有被任何线程持有，那么任何线程都可能获得该锁并调用相应的方法；当某一线程请求成功后，JVM会记下锁的持有线程，并且将计数器置为 1；此时其它线程请求该锁，则必须等待；而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增；当线程退出同步代码块时，计数器会递减，如果计数器为 0，则释放该锁。</p><blockquote><p>每个对象都有个 monitor 对象，加锁就是在竞争 monitor 对象，代码块加锁是在前后分别加上 monitorenter 和 monitorexit 指令来实现的，方法加锁是通过一个标记位来判断的。synchronized 是一个重量级操作，需要调用操作系统相关接口，性能是低效的，有可能给线程加锁消耗的时间比有用操作消耗的时间更多。</p><p>synchronized 进行了很多的优化，有适应自旋、锁消除、锁粗化、轻量级锁及偏向锁等，效率有了本质上的提高。在之后推出的 Java1.7 与 1.8 中，均对该关键字的实现机理做了优化。引入了偏向锁和轻量级锁。都是在对象头中有标记位，不需要经过操作系统加锁。锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。这种升级过程叫做锁膨胀；</p></blockquote></li><li><p><strong>ReentrantLock实现原理</strong></p><p>ReentantLock 继承接口 Lock 并实现了接口中定义的方法，他是一种可重入锁，除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p><p>ReentrantLock主要利用了AQS原理，简单可理解为：</p><pre class="line-numbers language-java"><code class="language-java">lock aqs<span class="token punctuation">{</span>  自旋  <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  CAS<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>详情可参考我的另一篇博客：<a href="https://lishaojie1993.gitee.io/2020/02/23/AQS/">ReentrantLock源码解析-AQS</a></p><h2 id="公平锁｜非公平锁"><a href="#公平锁｜非公平锁" class="headerlink" title="公平锁｜非公平锁"></a>公平锁｜非公平锁</h2><p><strong>公平锁</strong>：是指多个线程按照申请锁的顺序来获取锁，性能下降，但是顺序得到保障，讲究先来后到。</p><p><strong>非公平锁</strong>：是指多个线程获取锁的顺序并不是按照申请锁的顺序，先抢先得，抢不到再排队。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可重入锁的空构造方法默认使用ReentrantLock(false)</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有boolean类型参数的构造方法,fair=true为公平锁，false为不公平锁</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<strong>ReentrantLock</strong>而言，可以通过构造函数指定该锁是公平锁还是非公平锁，默认无参构造是非公平锁。</p><p>对于<strong>Synchronized</strong>而言，也是一种<strong>非公平锁</strong>。</p><p>非公平锁的优点在于吞吐量比公平锁大,性能比公平锁高 5~10 倍，因为公平锁需要在多核的情况下维护一个队列；缺点是在高并发的情况下，有可能造成<strong>优先级反转</strong>或者<strong>饥饿现象</strong>。</p><h2 id="读写锁-ReadWriteLock"><a href="#读写锁-ReadWriteLock" class="headerlink" title="读写锁-ReadWriteLock"></a>读写锁-ReadWriteLock</h2><p>为了提高性能，Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的，在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的，你只要上好相应的锁即可。</p><h3 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h3><p>如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁。</p><h3 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h3><p>如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！</p><p>Java 中读写锁有个接 口 java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ReentrantReadWriteLock rwLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写方法，包含写锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t writing..."</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t finish writing!"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读方法，包含读锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t reading..."</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object result <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t finish reading!"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 线程操纵类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantReadWriteLockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCache myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tempInt <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tempInt<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>tempInt<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tempInt <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tempInt<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下：</span><span class="token comment" spellcheck="true">//1     writing...1</span><span class="token comment" spellcheck="true">//1     finish writing!1</span><span class="token comment" spellcheck="true">//2     writing...2</span><span class="token comment" spellcheck="true">//2     finish writing!2</span><span class="token comment" spellcheck="true">//3     writing...3</span><span class="token comment" spellcheck="true">//3     finish writing!3</span><span class="token comment" spellcheck="true">//4     writing...4</span><span class="token comment" spellcheck="true">//4     finish writing!4</span><span class="token comment" spellcheck="true">//5     writing...5</span><span class="token comment" spellcheck="true">//5     finish writing!5</span><span class="token comment" spellcheck="true">//1     reading...1</span><span class="token comment" spellcheck="true">//1     finish reading!1</span><span class="token comment" spellcheck="true">//3     reading...3</span><span class="token comment" spellcheck="true">//5     reading...5</span><span class="token comment" spellcheck="true">//5     finish reading!5</span><span class="token comment" spellcheck="true">//4     reading...4</span><span class="token comment" spellcheck="true">//2     reading...2</span><span class="token comment" spellcheck="true">//2     finish reading!2</span><span class="token comment" spellcheck="true">//4     finish reading!4</span><span class="token comment" spellcheck="true">//3     finish reading!3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="独占锁｜共享锁"><a href="#独占锁｜共享锁" class="headerlink" title="独占锁｜共享锁"></a>独占锁｜共享锁</h2><p><strong>独占锁</strong>：该锁一次只能被一个线程锁持有。ReentrantLock和Synchronized都是独占锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。</p><p><strong>共享锁</strong>：该锁可被多个线程同时持有。ReentrantReadWriteLock其读锁是共享锁，其写锁是独占锁。共享锁可保证并发读诗非常高效的，读写，写读，写写的过程是互斥的。</p><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>Synchronized 是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的 Mutex Lock 来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态， 这个成本非常高， 状态之间的转换需要相对比较长的时间， 这就是为什么Synchronized 效率低的原因。因此，这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为“重量级锁”。</p><p>JDK 中对 Synchronized 做的种种优化，其核心都是为了减少这种重量级锁的使用。JDK1.6 以后， 为了减少获得锁和释放锁所带来的性能消耗， 提高性能，引入了“轻量级锁”和“偏向锁”。</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的。但是，首先需要强调一点的是，轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用产生的性能消耗。在解释轻量级锁的执行过程之前， 先明白一点，轻量级锁所适应的场景是线程<strong>交替执行</strong>同步块的情况，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p><p>锁的状态总共有四种：<strong>无锁状态、偏向锁、轻量级锁和重量级锁</strong>。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁（但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级）。</p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>Hotspot 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。</p><p>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径， 因为轻量级锁的获取及释放依赖多次 CAS 原子指令， 而偏向锁只需要在置换ThreadID 的时候依赖一次 CAS 原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销操作的性能损耗必须小于节省下来的 CAS 原子指令的性能消耗）。</p><blockquote><p>轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</p></blockquote><h2 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h2><p>分段锁并非一种实际的锁，而是一种思想。ConcurrentHashMap 是学习分段锁的最好实践。</p><p>详情可参考我的另一篇博客：<a href="https://lishaojie1993.gitee.io/2019/03/19/ConcurrentHashMap/">ConcurrentHashMap底层实现</a></p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h3 id="减少锁持有时间"><a href="#减少锁持有时间" class="headerlink" title="减少锁持有时间"></a>减少锁持有时间</h3><p>只用在有线程安全要求的程序上加锁。</p><h3 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a>减小锁粒度</h3><p>将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。</p><p>降低了锁的竞争， 偏向锁， 轻量级锁成功率才会提高。 最最典型的减小锁粒度的案例就是ConcurrentHashMap。</p><h3 id="锁分离"><a href="#锁分离" class="headerlink" title="锁分离"></a>锁分离</h3><p>最常见的锁分离就是读写锁 ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。</p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度， 如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力干涉它们都将无法推进下去。如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gci5y7k0boj30q60ce7cy.jpg" style="zoom:50%;"><h3 id="死锁产生的原因"><a href="#死锁产生的原因" class="headerlink" title="死锁产生的原因"></a>死锁产生的原因</h3><ol><li>系统资源不足</li><li>进程运行推进的顺序不合适</li><li>资源分配不当</li></ol><h3 id="手写一个死锁"><a href="#手写一个死锁" class="headerlink" title="手写一个死锁"></a>手写一个死锁</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HoldLockThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lockA<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lockB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HoldLockThread</span><span class="token punctuation">(</span>String lockA<span class="token punctuation">,</span> String lockB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockA <span class="token operator">=</span> lockA<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockB <span class="token operator">=</span> lockB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 自己持有："</span> <span class="token operator">+</span> lockA <span class="token operator">+</span> <span class="token string">"\t 尝试获得："</span> <span class="token operator">+</span> lockB<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 自己持有："</span> <span class="token operator">+</span> lockB <span class="token operator">+</span> <span class="token string">"\t 尝试获得："</span> <span class="token operator">+</span> lockA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String lockA <span class="token operator">=</span> <span class="token string">"lockA"</span><span class="token punctuation">;</span>        String lockB <span class="token operator">=</span> <span class="token string">"lockB"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HoldLockThread</span><span class="token punctuation">(</span>lockA<span class="token punctuation">,</span> lockB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HoldLockThread</span><span class="token punctuation">(</span>lockB<span class="token punctuation">,</span> lockA<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何排查死锁"><a href="#如何排查死锁" class="headerlink" title="如何排查死锁"></a>如何排查死锁</h3><h4 id="jps命令定位进程号"><a href="#jps命令定位进程号" class="headerlink" title="jps命令定位进程号"></a>jps命令定位进程号</h4><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gci6pdzjljj30jo05wtbm.jpg" alt></p><h4 id="jstack找到死锁查看"><a href="#jstack找到死锁查看" class="headerlink" title="jstack找到死锁查看"></a>jstack找到死锁查看</h4><p> <strong>jstack 23576</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gci6qzpnwcj30ug0eetjr.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;乐观锁｜悲观锁&quot;&gt;&lt;a href=&quot;#乐观锁｜悲观锁&quot; class=&quot;headerlink&quot; title=&quot;乐观锁｜悲观锁&quot;&gt;&lt;/a&gt;乐观锁｜悲观锁&lt;/h2&gt;&lt;h3 id=&quot;乐观锁&quot;&gt;&lt;a href=&quot;#乐观锁&quot; class=&quot;headerlink&quot; title=&quot;乐观锁&quot;&gt;&lt;/a&gt;乐观锁&lt;/h3&gt;&lt;p&gt;乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。&lt;/p&gt;
&lt;p&gt;java 中的乐观锁基本都是通过 CAS 操作实现的，CAS 是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。详情可参考我的另一篇博客：&lt;a href=&quot;https://lishaojie1993.gitee.io/2019/02/28/CAS/&quot;&gt;CAS算法原理&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;悲观锁&quot;&gt;&lt;a href=&quot;#悲观锁&quot; class=&quot;headerlink&quot; title=&quot;悲观锁&quot;&gt;&lt;/a&gt;悲观锁&lt;/h3&gt;&lt;p&gt;悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。java 中的悲观锁就是 Synchronized，AQS 框架下的锁则是先尝试 cas 乐观锁去获取锁，获取不到，才会转换为悲观锁，如 ReentrantLock。&lt;/p&gt;
&lt;h2 id=&quot;自旋锁-SpinLock&quot;&gt;&lt;a href=&quot;#自旋锁-SpinLock&quot; class=&quot;headerlink&quot; title=&quot;自旋锁-SpinLock&quot;&gt;&lt;/a&gt;自旋锁-SpinLock&lt;/h2&gt;&lt;p&gt;自旋锁原理非常简单， 如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换（进入阻塞挂起状态等待被唤醒），它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。
    
    </summary>
    
    
    
      <category term="高并发" scheme="https://lishaojie1993.gitee.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="lock" scheme="https://lishaojie1993.gitee.io/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock源码-AQS</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/23/AQS/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/23/AQS/</id>
    <published>2020-02-23T15:26:00.000Z</published>
    <updated>2020-05-12T04:00:00.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReentrantLock源码解析"><a href="#ReentrantLock源码解析" class="headerlink" title="ReentrantLock源码解析"></a>ReentrantLock源码解析</h2><h3 id="AQS（AbstractQueuedSynchronizer）"><a href="#AQS（AbstractQueuedSynchronizer）" class="headerlink" title="AQS（AbstractQueuedSynchronizer）"></a>AQS（AbstractQueuedSynchronizer）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队首</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队尾</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//锁状态，加锁成功则为1，重入+1，解锁为0</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Thread exclusiveOwnerThread<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//持有锁的线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Node类的设计"><a href="#Node类的设计" class="headerlink" title="Node类的设计"></a>Node类的设计</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>  <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>  <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>  <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>  <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AQS队列示意图"><a href="#AQS队列示意图" class="headerlink" title="AQS队列示意图"></a>AQS队列示意图</h3><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcp98gjlqoj30vk0iu42b.jpg" alt></p><h3 id="ReentrantLock简单应用"><a href="#ReentrantLock简单应用" class="headerlink" title="ReentrantLock简单应用"></a>ReentrantLock简单应用</h3><pre class="line-numbers language-java"><code class="language-java">ReentrantLock reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//源码如下（有两种实现类）</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//省略代码逻辑……</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公平锁｜非公平锁"><a href="#公平锁｜非公平锁" class="headerlink" title="公平锁｜非公平锁"></a>公平锁｜非公平锁</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加锁成功之后改变的值</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>公平锁的上锁必须判断自己需不需要排队；而非公平锁是直接进行CAS修改计数器看能不能加锁成功；如果加锁不成功则乖乖排队(调用acquire)；所以不管公平还是不公平；只要进到了AQS队列当中那么就会排队。</p></blockquote><h2 id="acquire-方法源码分析"><a href="#acquire-方法源码分析" class="headerlink" title="acquire()方法源码分析"></a>acquire()方法源码分析</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//①</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//②③</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//①tryAcquire()：尝试加锁，如果加锁失败就会调用acquireQueued()去排队，加锁成功就不会。</span><span class="token comment" spellcheck="true">//②addWaiter()：判断队列是否需要初始化，并把当前线程节点放入阻塞队列。</span><span class="token comment" spellcheck="true">//③acquireQueued()：当前线程如果排在第一位会请求获取锁，否则入队睡眠阻塞，后续线程修改睡眠状态，等待被唤醒。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="①tryAcquire"><a href="#①tryAcquire" class="headerlink" title="①tryAcquire()"></a>①tryAcquire()</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前线程</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取lock对象的状态c=0自由态，如果被上锁则为1，大于1是重入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//这里涉及到的情况比较多，下面详细讨论</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置持有锁的线程是自己</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果C不等于0，判断当前线程是否为拥有锁的线程，如果不是则直接返回false，加锁失败。</span>    <span class="token comment" spellcheck="true">//如果是拥有锁的线程，则状态+1代表重入次数+1，返回true加锁成功。</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hasQueuedPredecessors"><a href="#hasQueuedPredecessors" class="headerlink" title="hasQueuedPredecessors()"></a>hasQueuedPredecessors()</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>    Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node s<span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//这句代码涉及到的情况比较多，下面详细解释</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一种情况：队列没有初始化，head和taill都为null，所以h!=t不成立，后面短路不执行，直接返回false。<br>而又因为前面取反：if (!hasQueuedPredecessors()…)，所以不需要排队，直接去CAS，改变计数器上锁。</p></blockquote><blockquote><p>第二种情况：队列已经初始化了，但是有且只有一个数据，即h==t且s==null，表达式后面不执行，同上返回false不排队。什么时候会出现这种情况：当排队的队尾拿到锁的时候，此时队列中有且只有一个节点，它会把自己设置为h。因为这个线程已经拿到锁了，它不参与排队，所以需要设置为头节点。</p></blockquote><blockquote><p>第三种情况：队列已经初始化了，有大于1的多个节点，h!=t成立，s=null不成立，所以还要运行 s.thread != Thread.currentThread()，这里又分为两种情况：</p><ol><li><p>s.thread != Thread.currentThread()为true，即排队的第一个线程不是当前线程，表达式整体返回true，需要排队。</p></li><li><p>s.thread != Thread.currentThread()为false，即排队的第一个线程就是当前线程，表达式整体返回false，不需要排队。</p><p>不需要排队则调用 compareAndSetState(0, acquires) 去改变计数器尝试上锁，这里还分为两种情况：</p><ol><li>第一种情况是加锁成功，即持有锁的线程释放了锁，继续执行setExclusiveOwnerThread(current)，返回true。</li><li>第二种情况是加锁失败，即持有锁的线程还没有释放锁，直接返回false。</li></ol></li></ol></blockquote><h3 id="②addWaiter"><a href="#②addWaiter" class="headerlink" title="②addWaiter()"></a>②addWaiter()</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为AQS队列中的元素为Node，所以把当前线程封装为一个Node对象</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把队尾赋值给临时节点pred</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//队列不为空的流程很简单，直接修改指针把节点放入队列</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前线程节点指向原来的队尾节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//赋值操作，即队尾⇨当前节点</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来队尾节点的指针指向当前节点</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列为空，初始化队列并进行入队操作</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="enq"><a href="#enq" class="headerlink" title="enq()"></a>enq()</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//死循环    </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队尾赋值给临时节点t</span>        <span class="token comment" spellcheck="true">//第一次循环（初始化队列）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//队列为空，需要初始化队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//实例化一个属性都为空的Node对象</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列中只有一个对象，头尾都指向它</span>        <span class="token comment" spellcheck="true">//第二次循环（当前线程节点入队）</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//⑴</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//⑵</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//⑶</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上面123代表的是维护链表，即当前线程节点的入队操作</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③acquireQueued"><a href="#③acquireQueued" class="headerlink" title="③acquireQueued()"></a>③acquireQueued()</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把当前节点的上一个节点赋值给P</span>            <span class="token comment" spellcheck="true">//如果当前节点的前置节点是头节点，那么它会尝试去获取锁--自旋（第一个排队的）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//意图是尽量不睡眠，多询问一次</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//自旋获取锁失败后是否需要睡眠</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">//给上一个节点修改状态</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//②当前线程调用park()阻塞</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shouldParkAfterFailedAcquire"><a href="#shouldParkAfterFailedAcquire" class="headerlink" title="shouldParkAfterFailedAcquire()"></a>shouldParkAfterFailedAcquire()</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取前置线程节点的状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断前置线程的状态是否为-1（已睡）</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳出方法后运行parkAndCheckInterrupt()当前线程睡眠</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//把前置节点的状态修改为-1，证明前置线程已睡</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳出方法后短路，再次自旋</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="synchronized和lock的区别"><a href="#synchronized和lock的区别" class="headerlink" title="synchronized和lock的区别"></a>synchronized和lock的区别</h3><ol><li><p>原始构成</p><p><code>synchronized</code>是关键字，属于<strong>JVM层面</strong>。底层是通过<code>monitor</code>对象来完成，<code>wait/notify</code>方法也依赖<code>moniter</code>对象并且只有在同步块或者同步方法中才能使用<code>wait/notity</code>等方法。monitorenter｜<strong>monitorexit｜monitorexit 正常退出和异常退出</strong>，不会死锁。</p><p><strong>lock</strong>是具体的类<code>java.util.concurrent.locks.lock</code>属于<strong>API层面</strong>。</p></li><li><p>使用方法</p><p><code>synchronized</code><strong>不需要</strong>用户去手动释放锁，当synchronized代码执行完后系统会自动让线程释放对锁的占用。</p><p><code>ReentrantLock</code><strong>需要</strong>用户去手动释放锁，如果没有主动释放锁就有可能导致死锁。需要<code>lock()</code>和<code>unlock()</code>配合<code>try/finally</code>来完成。</p></li><li><p>等待是否可中断</p><p><code>synchronized</code>不可中断，除非抛出异常或者正常运行完成。</p><p><code>ReentrantLock</code>可中断，相比synchronized更加灵活，有两种方式可以中断：</p><ul><li><p>设置超时方法<code>tryLock(long timeout,TimeUnit unit)</code></p></li><li><p><code>lockInterRuptibly()</code>放代码块中，调用<code>interrupt()</code>方法可中断。</p></li></ul></li><li><p>加锁是否公平</p><p><code>synchronized</code>是非公平锁。</p><p><code>ReentrantLock</code>两者都可以，默认非公平锁。构造方法可以传入boolean值，<strong>true</strong>为公平锁，<strong>false</strong>为非公平锁。</p></li><li><p>是否可绑定多个条件-<code>Condition</code></p><p><code>synchronized</code>不可以，要么随机唤醒一个线程，要么全部唤醒。</p><p><code>ReentrantLock</code>可以实现分组唤醒，达到精确唤醒。</p></li></ol><p>扩展：jdk1.6以前，如果线程是交替执行的话，Synchronized会调用OS函数，影响性能。ReentrantLock的交替执行是在jdk级别解决的，性能很快。如果是竞争执行的话会进入队列调用park()方法。1.8以后区别很小，ReentrantLock的API更丰富一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ReentrantLock源码解析&quot;&gt;&lt;a href=&quot;#ReentrantLock源码解析&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock源码解析&quot;&gt;&lt;/a&gt;ReentrantLock源码解析&lt;/h2&gt;&lt;h3 id=&quot;AQS（A
      
    
    </summary>
    
    
    
      <category term="Lock" scheme="https://lishaojie1993.gitee.io/tags/Lock/"/>
    
      <category term="ReentrantLock" scheme="https://lishaojie1993.gitee.io/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>自旋锁-SpinLock</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/21/SpinLock/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/21/SpinLock/</id>
    <published>2020-02-21T15:18:15.000Z</published>
    <updated>2020-05-12T04:06:06.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自旋锁-SpinLock"><a href="#自旋锁-SpinLock" class="headerlink" title="自旋锁-SpinLock"></a>自旋锁-SpinLock</h2><p>指的是尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁。</p><h3 id="自旋实现同步"><a href="#自旋实现同步" class="headerlink" title="自旋实现同步"></a>自旋实现同步</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标识，锁是否被线程占用</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> except<span class="token punctuation">,</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//CAS操作，修改status成功则返回true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>缺点：耗费cpu资源。没有竞争到锁的线程会一直占用cpu资源进行cas操作。</p><p>解决思路：让得不到锁的线程让出CPU。</p></blockquote><h3 id="yield-自旋"><a href="#yield-自旋" class="headerlink" title="yield()+自旋"></a>yield()+自旋</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自己实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>yield()方法能让出cpu资源，当线程竞争锁失败时，会调用yield方法让出cpu。不过自旋+yield的方式并没有完全解决问题，当系统只有两个线程竞争锁时，yield是有效的。</p><p>缺点：该方法只是当前让出cpu，有可能操作系统下次还是选择运行该线程，如果线程过多的话还是看不到很好的效果。</p></blockquote><h3 id="sleep-自旋"><a href="#sleep-自旋" class="headerlink" title="sleep()+自旋"></a>sleep()+自旋</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>缺点：睡多久是个问题，睡的短了还是会循环，睡的久了浪费时间。</p></blockquote><h3 id="park-自旋"><a href="#park-自旋" class="headerlink" title="park()+自旋"></a>park()+自旋</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//占用锁20s</span>  <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//将当前线程加入到等待队列</span>  parkQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将当前线程释放CPU</span>  <span class="token function">releaseCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">lock_notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock_notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//得到要唤醒的线程（队列的头部）</span>  Thread t <span class="token operator">=</span> parkQueue<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//唤醒等待线程</span>  <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//unpark()是UnSafe类的方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>park()+自旋的方式比较完美，ReentrantLock类的原理就是利用了这种机制。</p></blockquote><h3 id="自旋锁Demo"><a href="#自旋锁Demo" class="headerlink" title="自旋锁Demo"></a>自旋锁Demo</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinLockDemo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原子引用线程</span>    AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t invoked myLock()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自旋（有线程先获取锁时循环等待）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 释放锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t invoked myUnLock()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 线程操纵类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpinLockDemo spinLockDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建t1线程获取锁，持有5秒后释放锁</span>          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//延迟1秒，保证t1线程先启动</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 1秒后创建t2线程，尝试获取锁</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自旋锁的优缺点"><a href="#自旋锁的优缺点" class="headerlink" title="自旋锁的优缺点"></a>自旋锁的优缺点</h3><p>自旋锁尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说性能能大幅度的提升，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作会导致线程发生两次上下文切换！</p><p>但是如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适合使用自旋锁了，因为自旋锁在获取锁前一直都是占用 cpu 做无用功，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要 cup 的线程又不能获取到 cpu，造成 cpu 的浪费。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自旋锁-SpinLock&quot;&gt;&lt;a href=&quot;#自旋锁-SpinLock&quot; class=&quot;headerlink&quot; title=&quot;自旋锁-SpinLock&quot;&gt;&lt;/a&gt;自旋锁-SpinLock&lt;/h2&gt;&lt;p&gt;指的是尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试
      
    
    </summary>
    
    
    
      <category term="Lock" scheme="https://lishaojie1993.gitee.io/tags/Lock/"/>
    
      <category term="SpinLock" scheme="https://lishaojie1993.gitee.io/tags/SpinLock/"/>
    
  </entry>
  
  <entry>
    <title>线程池-ThreadPool</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/19/Thread-Pool/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/19/Thread-Pool/</id>
    <published>2020-02-19T13:26:44.000Z</published>
    <updated>2020-05-12T03:51:39.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们常见的创建线程的方式有两种：继承Thread类和实现Runnable接口，后者用的多一些。</p><p>在这里我们详细介绍另外2两种通过调用API创建线程的方式。</p><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>Java 5.0 在 java.util.concurrent 提供了一个新的创建执行线程的方式： 实现 Callable 接口。</p><p>Callable 接口类似于 Runnable，但是 Runnable 不会返回结果，并且无法抛出经过检查的异常，而 Callable 依赖 FutureTask 类获取返回结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t come in Callable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 逻辑代码</span>        <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> futureTask2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t1，t2线程公用一个futureTask不可行，需要再创建</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new Thread(futureTask,"t2").start();</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask2<span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// futureTask.get()获得Callable线程的计算结果，尽量放在后面，会阻塞线程的运行</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当某个请求需要在后端完成 N 次统计结果时，我们就可以使用该方式创建 N 个线程进行（并行）统计，而不需要同步等待其他统计操作完成后才统计另一个结果。</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池是通过Executor框架实现的，该框架用到了Executor、Executors、ExecutorService、<strong>ThreadPoolExecutor</strong>这几个类。</p><p>线程池的特点：线程复用、控制最大并发数、管理线程。</p><h3 id="线程池的架构"><a href="#线程池的架构" class="headerlink" title="线程池的架构"></a>线程池的架构</h3><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gchx17f5qsj30pu0kktjt.jpg" alt></p><h2 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h2><h3 id="三个简单线程池"><a href="#三个简单线程池" class="headerlink" title="三个简单线程池"></a>三个简单线程池</h3><ul><li>newFixedThreadPool：执行长期的任务，性能好很多。</li><li>newSingleThreadExecutor：一个任务一个任务的执行。</li><li>newCachedThreadPool：执行很多短期异步的小程序或者负载较轻的服务器。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一池5个工作线程（固定）</span><span class="token comment" spellcheck="true">//        ExecutorService executorService = Executors.newSingleThreadExecutor();// 一池1个工作线程</span><span class="token comment" spellcheck="true">//        ExecutorService executorService = Executors.newCachedThreadPool();//一池N个工作线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 办理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下：</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-3     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-2     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-3     办理业务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造方法一览"><a href="#构造方法一览" class="headerlink" title="构造方法一览"></a>构造方法一览</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个定长的线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span><span class="token comment" spellcheck="true">//corePoolSize和maximumPoolSize是相等的，使用的是LinkedBlockingQueue</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定的顺序执行。</span><span class="token comment" spellcheck="true">//corePoolSize和maximumPoolSize都是1，使用的是LinkedBlockingQueue</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个可缓存的线程池，如果线程池的长度超过处理需要，可灵活回收空闲线程，若无可收回则新建线程执行。</span><span class="token comment" spellcheck="true">//corePoolSize是0，maximumPoolSize为Integer.MAX_VALUE，使用的是SynchronousQueue</span><span class="token comment" spellcheck="true">//有任务就创建线程运行，当线程空闲超过60秒就销毁线程。</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程池的七大参数"><a href="#线程池的七大参数" class="headerlink" title="线程池的七大参数"></a>线程池的七大参数</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span>   <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>   <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                                    <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>   TimeUnit unit<span class="token punctuation">,</span>   BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>   ThreadFactory threadFactory<span class="token punctuation">,</span>   RejectedExecutionHandler handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gci3qd3bcpj315s0u0kjl.jpg" style="zoom: 33%;"><ol><li><p><code>corePoolSize</code>（<strong>线程池的常驻大小</strong>）：当提交一个任务到线程池时，如果当前poolSize&lt;corePoolSize时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。</p></li><li><p><code>maximumPoolSize</code>（<strong>线程池最大数量</strong>）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，如果使用了无界的任务队列这个参数就没什么效果。</p></li><li><p><code>keepAliveTime</code>（<strong>多余空闲线程存活时间</strong>）：线程池的工作线程空闲后，保持存活的时间。线程空闲时间超过设置的存活时间后，线程池会判断当前运行的线程数是否大于corePoolSize，如果大于就会销毁多余的空闲线程，直到只剩下corePoolSize个线程为止。如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。</p></li><li><p><code>TimeUnit</code>（<strong>keepAliveTime的单位</strong>）：可选的单位有天（DAYS）、小时（HOURS）、分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）和纳秒（NANOSECONDS，千分之一微秒）。</p></li><li><p><code>BlockingQueue</code>（<strong>阻塞队列</strong>）：用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。</p><ul><li><p>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序。</p></li><li><p>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</p></li><li><p>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</p></li><li><p>PriorityBlockingQueue：一个具有优先级的无限阻塞队列。</p></li></ul></li><li><p><code>ThreadFactory</code>（<strong>线程工厂</strong>）：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。一般用默认，也可以使用开源框架guava提供的ThreadFactoryBuilder快速给线程池里的线程设置有意义的名字，代码如下。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"XX-task-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>RejectedExecutionHandler</code>（<strong>饱和策略</strong>）：当阻塞队列和最大线程数都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。在JDK 1.5中Java线程池框架提供了以下4种策略。</p><ul><li>AbortPolicy：直接抛出RejectedExecutionException异常。(默认，执行任务最少，最不友好)</li><li>CallerRunsPolicy：将任务分给调用线程来执行（如main线程，执行任务数最多）。</li><li>DiscardOldestPolicy：丢弃队列里等待最久的任务，并执行当前任务（相比DiscardPolicy丢弃的少）。</li><li>DiscardPolicy：丢弃当前任务，不处理（丢掉的任务最多）。</li></ul></li></ol><p>当然，也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化存储不能处理的任务。</p><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 注意阻塞队列的范围和拒绝策略的选择 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 1L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 办理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-2     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-3     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-2     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-3     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-3     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-2     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-4     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-5     办理业务</span><span class="token comment" spellcheck="true">//main     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-4     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-2     办理业务</span><span class="token comment" spellcheck="true">//main     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-3     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-5     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-1     办理业务</span><span class="token comment" spellcheck="true">//pool-1-thread-4     办理业务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合理配置线程数"><a href="#合理配置线程数" class="headerlink" title="合理配置线程数"></a>合理配置线程数</h3><ol><li><p>CPU密集型</p><p>意思是该任务需要大量的运算，没有阻塞，CPU一直全速运行。一般公式：CPU核数+1个线程的线程池。</p><p>运行System.out.println(Runtime.getRuntime().availableProcessors());查看CPU核数（线程数）。</p></li><li><p>IO密集型（有两种，自己到测试/生产环境试验）</p><ul><li><p>意思是该任务并不是一直在执行，可以配置尽可能多的线程，比如CPU核数*2。</p></li><li><p>IO密集时，大量的线程都在阻塞，参考公式：CPU/(1-阻塞系数)=8/(1-0.9)=80个线程。</p></li></ul></li></ol><hr><h3 id="向线程池提交任务"><a href="#向线程池提交任务" class="headerlink" title="向线程池提交任务"></a>向线程池提交任务</h3><p>可以使用两个方法向线程池提交任务，分别为<code>execute()</code>和<code>submit()</code>方法。</p><ul><li><code>execute()</code>方法用于提交<strong>不需要返回值</strong>的任务;</li><li><code>submit()</code>方法用于提交<strong>需要返回值</strong>的任务。</li></ul><p><code>execute()</code>：用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。通过源码可知<code>execute()</code>方法输入的任务是一个Runnable类的实例。</p><pre class="line-numbers language-java"><code class="language-java">threadsPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>submit()</code>：线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的<code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用<code>get(long timeout,TimeUnit unit)</code>方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</p><pre class="line-numbers language-java"><code class="language-java">Future<span class="token operator">&lt;</span>Object<span class="token operator">></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>haveReturnValuetask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    Object s <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理中断异常</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理无法执行任务异常</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 关闭线程池</span>    executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h3><ul><li><code>shutdown()</code></li><li><code>shutdownNow()</code></li></ul><p>它们的原理是遍历线程池中的工作线程，然后逐个调用线程的<code>interrupt()</code>方法来中断线程，所以无法响应中断的任务可能永远无法终止。只要调用了这两个关闭方法中的任意一个，<code>isShutdown()</code>方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用<code>isTerminaed()</code>方法会返回true。</p><p>区别：</p><p><code>shutdownNow()</code>首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而<code>shutdown()</code>只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p><p>总结：</p><p>至于应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调<code>shutdown()</code>方法来关闭线程池，如果任务不一定要执行完，则可以调用<code>shutdownNow()</code>方法。</p><h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><h3 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h3><ol><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</li></ol><h3 id="线程池的实现原理"><a href="#线程池的实现原理" class="headerlink" title="线程池的实现原理"></a>线程池的实现原理</h3><ol><li>线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下个流程。</li><li>线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</li><li>线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。<a id="more"></a></li></ol><p>对应到代码层面就是<code>ThreadPoolExecutor</code>执行<code>execute()</code>方法</p><ol><li>当<kbd>workerCount</kbd> &lt; <kbd>corePoolSize</kbd>，创建新线程执行任务。</li><li>当<kbd>workerCount</kbd> &gt;= <kbd>corePoolSize</kbd>，并且阻塞队列workQueue未满，把新的任务放入阻塞队列。</li><li>当workQueue已满，并且<kbd>workerCount</kbd> &gt;= <kbd>corePoolSize</kbd>，并且<kbd>workerCount</kbd> &lt; <kbd>maximumPoolSize</kbd>，创建新线程执行任务。</li><li>当workQueue已满，并且<kbd>workerCount</kbd> &gt;= <kbd>maximumPoolSize</kbd>，采取拒绝策略,根据不同的拒绝策略处理,默认拒绝策略是直接抛异常。</li></ol><p>由于创建新线程时（第1步、第3步）需要获取全局锁，所以ThreadPoolExecutor采取上述步骤的总体设计思路，是为了在执行execute()方法时，尽可能地避免获取全局锁（那将会是一个严重的可伸缩瓶颈）。</p><h3 id="线程池状态转换模型"><a href="#线程池状态转换模型" class="headerlink" title="线程池状态转换模型"></a>线程池状态转换模型</h3><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNbRwgy1gb1qb2e8lbj31lo0jiu0x.jpg" alt></p><ul><li><code>RUNNING</code> 自然是运行状态，指可以接受任务执行队列里的任务</li><li><code>SHUTDOWN</code> 指调用了 <code>shutdown()</code> 方法，不再接受新任务了，但是队列里的任务得执行完毕。</li><li><code>STOP</code> 指调用了 <code>shutdownNow()</code> 方法，不再接受新任务，同时抛弃阻塞队列里的所有任务并中断所有正在执行任务。</li><li><code>TIDYING</code> 所有任务都执行完毕，在调用 <code>shutdown()/shutdownNow()</code> 中都会尝试更新为这个状态。</li><li><code>TERMINATED</code> 终止状态，当执行 <code>terminated()</code> 后会更新为这个状态。</li></ul><h2 id="线程池源码分析"><a href="#线程池源码分析" class="headerlink" title="线程池源码分析"></a>线程池源码分析</h2><p><strong>基于JDK1.8</strong></p><h3 id="ctl-变量"><a href="#ctl-变量" class="headerlink" title="ctl 变量"></a>ctl 变量</h3><p>后面<code>execute()</code>方法会用到ctl，这个变量是为了把工作线程数量和线程池状态放在一个int型变量存储而设置的一个原子类型的变量。 在ctl中，低位的29位表示工作线程的数量，高位用来表示RUNNING、SHUTDOWN、STOP等状态。上面定义的三个方法只是为了计算得到线程池的状态和工作线程的数量，以及得到ctl。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Packing and unpacking ctl</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="execute-方法"><a href="#execute-方法" class="headerlink" title="execute()方法"></a>execute()方法</h3><ul><li><code>if (! isRunning(recheck) &amp;&amp; remove(command))</code>这句。由于&amp;&amp;是短路与，意思就是前面如果非真，后面不会执行。所以如果线程池不是Running状态时，才把现成移出工作队列，再使用饱和策略。</li><li><code>addWorker(command, false)</code>：我们看到有<code>addWorker(command, true)</code>和<code>addWorker(command, false)</code>。true和false分别代表在检查工作线程数量的时候是应该与corePoolSize对比还是应该maximumPoolSize对比。只有第一个if时，也就是当前线程数小于corePoolSize时才用<code>addWorker(command, true)</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果提交了空的任务 抛出异常</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前线程池的状态</span>   <span class="token comment" spellcheck="true">//检查当前工作线程数量是否小于核心线程数量</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//通过addWorker方法提交任务</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果提交失败 需要二次检查状态</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//向工作线程提交任务 </span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 再次检查状态</span>      <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//扩容失败 则拒绝任务</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="addWorker-方法"><a href="#addWorker-方法" class="headerlink" title="addWorker()方法"></a>addWorker()方法</h3><p>这个方法是任务提交的一个核心方法，在里面完成了状态检查、新建任务、执行任务等一系列动作，主要工作是在线程池中创建一个新的线程并执行。</p><p>这个方法可以分为两个阶段来看，第一个阶段是判断是否有必要新增一个工作线程，如果有则利用CAS更新工作线程的数量；第二部分是将提交的任务封装成一个工作线程Worker然后加入到线程池的容器中，开始执行新提交的任务。这个Worker在执行完任务后，还会循环地获取工作队列里的任务来执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>       retry<span class="token operator">:</span>   <span class="token comment" spellcheck="true">//死循环更新状态</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取运行状态</span>       <span class="token comment" spellcheck="true">//检查线程池是否处于关闭状态</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                  firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                  <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取当前工作线程数量</span>               <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//如果已经超过corePoolSize获取maximumPoolSize 返回false</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                   wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//CAS增加一个工作线程</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//再次获取状态</span>               c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>       <span class="token comment" spellcheck="true">//如果状态更新失败 则循环更新</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                   <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化一个工作线程</span>           <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获得锁</span>               <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>               mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                   <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                   <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                   <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                       <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//添加工作这到hashset中保存</span>                       workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                           largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                       workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                   mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//工作线程启动 执行第一个任务 就是新提交的任务</span>                   t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>               <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Worker的构造方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Creates with given first task and thread from ThreadFactory. * @param firstTask the first task (null if none) */</span><span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="runWorker-方法"><a href="#runWorker-方法" class="headerlink" title="runWorker()方法"></a>runWorker()方法</h3><p>在<code>addWorker()</code>方法快要结束的地方，调用了<code>t.start()</code>方法，我们知道它实际执行的就是Worker对象的<code>run()</code>方法，而worker的<code>run()</code>方法是这样定义的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Delegates main run loop to outer runWorker  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它实际上是将自己委托给线程池的runWorker方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//不断地从blockingQueue获取任务</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// If pool is stopping, ensure thread is interrupted;</span>               <span class="token comment" spellcheck="true">// if not, ensure thread is not interrupted.  This</span>               <span class="token comment" spellcheck="true">// requires a recheck in second case to deal with</span>               <span class="token comment" spellcheck="true">// shutdownNow race while clearing interrupt</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                     <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                   <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//执行beforeExecute方法</span>                   <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                   Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                   <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//调用Runable的run方法</span>                       task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 执行aferExecute方法</span>                       <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                   task <span class="token operator">=</span> null<span class="token punctuation">;</span>                   w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                   w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下<code>runWorker(Worker w)</code>方法的执行过程：</p><ol><li>while循环中，不断地通过<code>getTask()</code>方法从workerQueue中获取任务</li><li>如果线程池正在停止，则中断线程。否则调用3.</li><li>调用<code>task.run()</code>执行任务；</li><li>如果task为null则跳出循环，执行<code>processWorkerExit()</code>方法，销毁线程<code>workers.remove(w)</code>;</li></ol><p>它在不断执行我们提交的任务的run方法。而这个任务可能是我们新提交的，也有可能是从等待队列中获取的。这样就实现了线程池的完成逻辑。</p><h2 id="ExecutorService详解"><a href="#ExecutorService详解" class="headerlink" title="ExecutorService详解"></a>ExecutorService详解</h2><p><strong>创建线程池的5个方法：</strong></p><h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h3><p>只有一个线程的线程池，因此所有提交的任务是<strong>顺序执行</strong>。</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造方法源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。</p><p>返回单线程的Executor，将多个任务交给此Exector时，这个线程处理完一个任务后接着处理下一个任务，若该线程出现异常，将会有一个新的线程来替代。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p><hr><h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><p>缓存型线程池，先查看池中有没有以前建立的线程，如果有，就重用，如果没有，就建一个新的线程加入池中。如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造方法源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程的最少数量</span>                Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程的最大数量</span>                60L<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程所允许的空闲时间，60秒</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程所允许的空闲时间的单位</span>                <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ExecutorService exe<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> taskID<span class="token operator">=</span>i<span class="token punctuation">;</span>            exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程ID："</span><span class="token operator">+</span>taskID<span class="token operator">+</span><span class="token string">",执行第 "</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">" 次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-xml"><code class="language-xml">线程ID：3，执行第 1 次线程ID：4，执行第 1 次线程ID：2，执行第 1 次线程ID：5，执行第 1 次线程ID：1，执行第 1 次线程ID：2，执行第 2 次线程ID：3，执行第 2 次线程ID：4，执行第 2 次线程ID：1，执行第 2 次线程ID：5，执行第 2 次线程ID：2，执行第 3 次线程ID：3，执行第 3 次线程ID：4，执行第 3 次线程ID：5，执行第 3 次线程ID：1，执行第 3 次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到执行结果是5个任务在交替进行的</p><p>newCachedThreadPool的总结：</p><ol><li>重用：缓存型池子，先查看池中有没有以前建立的线程，如果有，就reuse；如果没有，就建一个新的线程加入池中。</li><li>使用场景：缓存型池子通常用于执行一些生存期很短的异步型任务，因此在一些面向连接的daemon型SERVER中用得不多。</li><li>超时：能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s，超过这个IDLE时长，线程实例将被终止及移出池。</li><li>结束：注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。</li></ol><hr><h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><p>定长线程池，可控制线程最大并发数。如果当前需要执行的任务超过池大小，那么多出的任务处于等待状态，直到有空闲下来的线程执行任务，如果当前需要执行的任务小于池大小，空闲的线程也不会去销毁。</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService fixedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造方法源码：有两个重载方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                nThreads<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程的最少数量</span>                nThreads<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程的最大数量</span>                0L<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程池维护线程所允许的空闲时间</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程所允许的空闲时间的单位</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService exe <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> taskID <span class="token operator">=</span> i<span class="token punctuation">;</span>            exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程ID："</span> <span class="token operator">+</span> taskID <span class="token operator">+</span> <span class="token string">"，执行第 "</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" 次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-xml"><code class="language-xml">线程ID：2，执行第 1 次线程ID：1，执行第 1 次线程ID：3，执行第 1 次线程ID：2，执行第 2 次线程ID：3，执行第 2 次线程ID：1，执行第 2 次线程ID：2，执行第 3 次线程ID：3，执行第 3 次线程ID：1，执行第 3 次线程ID：4，执行第 1 次线程ID：5，执行第 1 次线程ID：4，执行第 2 次线程ID：5，执行第 2 次线程ID：4，执行第 3 次线程ID：5，执行第 3 次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个固定大小的线程池，容量为3，然后循环执行了5个任务。由输出结果可以看到，前3个任务首先执行完，然后空闲下来的线程去执行第4,5个任务。<br>newFixedThreadPool的总结：</p><ol><li>重用：fixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程。</li><li>固定数目：其独特之处在于，任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子。</li><li>超时：和cacheThreadPool不同，FixedThreadPool没有IDLE机制（可能也有，但既然文档没提，肯定非常长，类似依赖上层的TCP或UDP IDLE机制之类的）。</li><li>使用场景：所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器。</li></ol><hr><h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h3><p>调度型线程池,支持定时及周期性任务执行，也是一个固定长度的线程池。</p><pre class="line-numbers language-java"><code class="language-java">ScheduledExecutorService exe<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造方法源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 线程池维护线程的最少数量</span>        Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程池维护线程的最大数量</span>        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 线程池维护线程所允许的空闲时间</span>        NANOSECONDS<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//线程池维护线程所允许的空闲时间的单位</span>        <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ScheduledExecutorService exe<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> taskID<span class="token operator">=</span>i<span class="token punctuation">;</span>                exe<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程："</span><span class="token operator">+</span>taskID<span class="token operator">+</span><span class="token string">",时间："</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码scheduleAtFixedRate后面的参数 0 表示立即执行，2表示2秒执行一次调度。执行结果：</p><pre class="line-numbers language-xml"><code class="language-xml">线程：1,时间：2016-12-11T13:09:18.544 执行一次线程：2,时间：2016-12-11T13:09:18.544 执行一次线程：3,时间：2016-12-11T13:09:18.544 执行一次线程：5,时间：2016-12-11T13:09:20.557 执行一次线程：1,时间：2016-12-11T13:09:20.557 执行一次线程：4,时间：2016-12-11T13:09:20.557 执行一次线程：4,时间：2016-12-11T13:09:22.572 执行一次线程：2,时间：2016-12-11T13:09:22.572 执行一次线程：3,时间：2016-12-11T13:09:22.572 执行一次线程：5,时间：2016-12-11T13:09:24.586 执行一次线程：1,时间：2016-12-11T13:09:24.586 执行一次线程：2,时间：2016-12-11T13:09:24.586 执行一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>newScheduledThreadPool的线程池大小只设置了3，所以一次只能执行3个线程，然后可以看到每2秒执行一次任务调度。</p><hr><h3 id="newSingleThreadScheduledPool"><a href="#newSingleThreadScheduledPool" class="headerlink" title="newSingleThreadScheduledPool"></a>newSingleThreadScheduledPool</h3><p>单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果当前线程意外终止，会创建一个新线程继续执行任务，这和我们直接创建线程不同，也和newFixedThreadPool(1)不同。</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService exe<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造方法源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ExecutorService exe<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> taskID<span class="token operator">=</span>i<span class="token punctuation">;</span>            exe<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程ID："</span><span class="token operator">+</span>taskID<span class="token operator">+</span><span class="token string">"，执行第 "</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">" 次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-xml"><code class="language-xml">线程ID：1，执行第 1 次线程ID：1，执行第 2 次线程ID：1，执行第 3 次线程ID：2，执行第 1 次线程ID：2，执行第 2 次线程ID：2，执行第 3 次线程ID：3，执行第 1 次线程ID：3，执行第 2 次线程ID：3，执行第 3 次线程ID：4，执行第 1 次线程ID：4，执行第 2 次线程ID：4，执行第 3 次线程ID：5，执行第 1 次线程ID：5，执行第 2 次线程ID：5，执行第 3 次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个结果都是相隔0.5秒打印出来的，顺序执行下去。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们常见的创建线程的方式有两种：继承Thread类和实现Runnable接口，后者用的多一些。&lt;/p&gt;
&lt;p&gt;在这里我们详细介绍另外2两种通过调用API创建线程的方式。&lt;/p&gt;
&lt;h3 id=&quot;Callable&quot;&gt;&lt;a href=&quot;#Callable&quot; class=&quot;headerlink&quot; title=&quot;Callable&quot;&gt;&lt;/a&gt;Callable&lt;/h3&gt;&lt;p&gt;Java 5.0 在 java.util.concurrent 提供了一个新的创建执行线程的方式： 实现 Callable 接口。&lt;/p&gt;
&lt;p&gt;Callable 接口类似于 Runnable，但是 Runnable 不会返回结果，并且无法抛出经过检查的异常，而 Callable 依赖 FutureTask 类获取返回结果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

class MyThread implements Callable&amp;lt;Integer&amp;gt; {

    @Override
    public Integer call() throws Exception {
        System.out.println(Thread.currentThread().getName()+&amp;quot;\t come in Callable&amp;quot;);
          // 逻辑代码
        return 1024;
    }
}

public class CallableDemo {
    public static void main(String[] args) throws Exception{
        FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;Integer&amp;gt;(new MyThread());
        FutureTask&amp;lt;Integer&amp;gt; futureTask2 = new FutureTask&amp;lt;Integer&amp;gt;(new MyThread());
        // t1，t2线程公用一个futureTask不可行，需要再创建
        new Thread(futureTask,&amp;quot;t1&amp;quot;).start();
        //new Thread(futureTask,&amp;quot;t2&amp;quot;).start();
        new Thread(futureTask2,&amp;quot;t2&amp;quot;).start();
        // futureTask.get()获得Callable线程的计算结果，尽量放在后面，会阻塞线程的运行
        int result = futureTask.get();
        System.out.println(result);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当某个请求需要在后端完成 N 次统计结果时，我们就可以使用该方式创建 N 个线程进行（并行）统计，而不需要同步等待其他统计操作完成后才统计另一个结果。&lt;/p&gt;
&lt;h3 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h3&gt;&lt;p&gt;线程池是通过Executor框架实现的，该框架用到了Executor、Executors、ExecutorService、&lt;strong&gt;ThreadPoolExecutor&lt;/strong&gt;这几个类。&lt;/p&gt;
&lt;p&gt;线程池的特点：线程复用、控制最大并发数、管理线程。&lt;/p&gt;
&lt;h3 id=&quot;线程池的架构&quot;&gt;&lt;a href=&quot;#线程池的架构&quot; class=&quot;headerlink&quot; title=&quot;线程池的架构&quot;&gt;&lt;/a&gt;线程池的架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTgy1gchx17f5qsj30pu0kktjt.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;线程池的使用&quot;&gt;&lt;a href=&quot;#线程池的使用&quot; class=&quot;headerlink&quot; title=&quot;线程池的使用&quot;&gt;&lt;/a&gt;线程池的使用&lt;/h2&gt;&lt;h3 id=&quot;三个简单线程池&quot;&gt;&lt;a href=&quot;#三个简单线程池&quot; class=&quot;headerlink&quot; title=&quot;三个简单线程池&quot;&gt;&lt;/a&gt;三个简单线程池&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;newFixedThreadPool：执行长期的任务，性能好很多。&lt;/li&gt;
&lt;li&gt;newSingleThreadExecutor：一个任务一个任务的执行。&lt;/li&gt;
&lt;li&gt;newCachedThreadPool：执行很多短期异步的小程序或者负载较轻的服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MyThreadPoolDemo {
    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(3);// 一池5个工作线程（固定）
//        ExecutorService executorService = Executors.newSingleThreadExecutor();// 一池1个工作线程
//        ExecutorService executorService = Executors.newCachedThreadPool();//一池N个工作线程
        try {
            for (int i = 1; i &amp;lt;= 5; i++) {
                executorService.execute(() -&amp;gt; {
                    System.out.println(Thread.currentThread().getName() + &amp;quot;\t 办理业务&amp;quot;);
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executorService.shutdown();
        }
    }
}
//运行结果如下：
//pool-1-thread-1     办理业务
//pool-1-thread-3     办理业务
//pool-1-thread-1     办理业务
//pool-1-thread-2     办理业务
//pool-1-thread-3     办理业务&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;构造方法一览&quot;&gt;&lt;a href=&quot;#构造方法一览&quot; class=&quot;headerlink&quot; title=&quot;构造方法一览&quot;&gt;&lt;/a&gt;构造方法一览&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;//创建一个定长的线程池，可控制线程最大并发数，超出的线程会在队列中等待。
//corePoolSize和maximumPoolSize是相等的，使用的是LinkedBlockingQueue
public static ExecutorService newFixedThreadPool(int nThreads) {
        return new ThreadPoolExecutor(nThreads, nThreads,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;//创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定的顺序执行。
//corePoolSize和maximumPoolSize都是1，使用的是LinkedBlockingQueue
public static ExecutorService newSingleThreadExecutor() {
        return new FinalizableDelegatedExecutorService
            (new ThreadPoolExecutor(1, 1,
                                    0L, TimeUnit.MILLISECONDS,
                                    new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;()));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;//创建一个可缓存的线程池，如果线程池的长度超过处理需要，可灵活回收空闲线程，若无可收回则新建线程执行。
//corePoolSize是0，maximumPoolSize为Integer.MAX_VALUE，使用的是SynchronousQueue
//有任务就创建线程运行，当线程空闲超过60秒就销毁线程。
public static ExecutorService newCachedThreadPool() {
        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                      60L, TimeUnit.SECONDS,
                                      new SynchronousQueue&amp;lt;Runnable&amp;gt;());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;线程池的七大参数&quot;&gt;&lt;a href=&quot;#线程池的七大参数&quot; class=&quot;headerlink&quot; title=&quot;线程池的七大参数&quot;&gt;&lt;/a&gt;线程池的七大参数&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public ThreadPoolExecutor(
   int corePoolSize,
   int maximumPoolSize,                              
      long keepAliveTime,
   TimeUnit unit,
   BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,
   ThreadFactory threadFactory,
   RejectedExecutionHandler handler)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTgy1gci3qd3bcpj315s0u0kjl.jpg&quot; style=&quot;zoom: 33%;&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;corePoolSize&lt;/code&gt;（&lt;strong&gt;线程池的常驻大小&lt;/strong&gt;）：当提交一个任务到线程池时，如果当前poolSize&amp;lt;corePoolSize时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;maximumPoolSize&lt;/code&gt;（&lt;strong&gt;线程池最大数量&lt;/strong&gt;）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是，如果使用了无界的任务队列这个参数就没什么效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;keepAliveTime&lt;/code&gt;（&lt;strong&gt;多余空闲线程存活时间&lt;/strong&gt;）：线程池的工作线程空闲后，保持存活的时间。线程空闲时间超过设置的存活时间后，线程池会判断当前运行的线程数是否大于corePoolSize，如果大于就会销毁多余的空闲线程，直到只剩下corePoolSize个线程为止。如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;TimeUnit&lt;/code&gt;（&lt;strong&gt;keepAliveTime的单位&lt;/strong&gt;）：可选的单位有天（DAYS）、小时（HOURS）、分钟（MINUTES）、毫秒（MILLISECONDS）、微秒（MICROSECONDS，千分之一毫秒）和纳秒（NANOSECONDS，千分之一微秒）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;（&lt;strong&gt;阻塞队列&lt;/strong&gt;）：用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PriorityBlockingQueue：一个具有优先级的无限阻塞队列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ThreadFactory&lt;/code&gt;（&lt;strong&gt;线程工厂&lt;/strong&gt;）：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。一般用默认，也可以使用开源框架guava提供的ThreadFactoryBuilder快速给线程池里的线程设置有意义的名字，代码如下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;new ThreadFactoryBuilder().setNameFormat(&amp;quot;XX-task-%d&amp;quot;).build();&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RejectedExecutionHandler&lt;/code&gt;（&lt;strong&gt;饱和策略&lt;/strong&gt;）：当阻塞队列和最大线程数都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。在JDK 1.5中Java线程池框架提供了以下4种策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbortPolicy：直接抛出RejectedExecutionException异常。(默认，执行任务最少，最不友好)&lt;/li&gt;
&lt;li&gt;CallerRunsPolicy：将任务分给调用线程来执行（如main线程，执行任务数最多）。&lt;/li&gt;
&lt;li&gt;DiscardOldestPolicy：丢弃队列里等待最久的任务，并执行当前任务（相比DiscardPolicy丢弃的少）。&lt;/li&gt;
&lt;li&gt;DiscardPolicy：丢弃当前任务，不处理（丢掉的任务最多）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化存储不能处理的任务。&lt;/p&gt;
&lt;h3 id=&quot;自定义线程池&quot;&gt;&lt;a href=&quot;#自定义线程池&quot; class=&quot;headerlink&quot; title=&quot;自定义线程池&quot;&gt;&lt;/a&gt;自定义线程池&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.util.concurrent.*;
/**
 * 注意阻塞队列的范围和拒绝策略的选择
 */
public class MyThreadPoolDemo {
    public static void main(String[] args) {
        ExecutorService threadPool = new ThreadPoolExecutor(2, 5, 1L, TimeUnit.SECONDS,
                new LinkedBlockingDeque&amp;lt;&amp;gt;(3), Executors.defaultThreadFactory(),
                new ThreadPoolExecutor.CallerRunsPolicy());
        try {
            for (int i = 1; i &amp;lt;= 20; i++) {
                threadPool.execute(() -&amp;gt; {
                    System.out.println(Thread.currentThread().getName() + &amp;quot;\t 办理业务&amp;quot;);
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            threadPool.shutdown();
        }
    }
}
//运行结果如下
//pool-1-thread-1     办理业务
//pool-1-thread-2     办理业务
//pool-1-thread-1     办理业务
//pool-1-thread-3     办理业务
//pool-1-thread-2     办理业务
//pool-1-thread-1     办理业务
//pool-1-thread-3     办理业务
//pool-1-thread-3     办理业务
//pool-1-thread-2     办理业务
//pool-1-thread-4     办理业务
//pool-1-thread-5     办理业务
//main     办理业务
//pool-1-thread-1     办理业务
//pool-1-thread-4     办理业务
//pool-1-thread-2     办理业务
//main     办理业务
//pool-1-thread-3     办理业务
//pool-1-thread-5     办理业务
//pool-1-thread-1     办理业务
//pool-1-thread-4     办理业务&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;合理配置线程数&quot;&gt;&lt;a href=&quot;#合理配置线程数&quot; class=&quot;headerlink&quot; title=&quot;合理配置线程数&quot;&gt;&lt;/a&gt;合理配置线程数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CPU密集型&lt;/p&gt;
&lt;p&gt;意思是该任务需要大量的运算，没有阻塞，CPU一直全速运行。一般公式：CPU核数+1个线程的线程池。&lt;/p&gt;
&lt;p&gt;运行System.out.println(Runtime.getRuntime().availableProcessors());查看CPU核数（线程数）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IO密集型（有两种，自己到测试/生产环境试验）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;意思是该任务并不是一直在执行，可以配置尽可能多的线程，比如CPU核数*2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IO密集时，大量的线程都在阻塞，参考公式：CPU/(1-阻塞系数)=8/(1-0.9)=80个线程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;向线程池提交任务&quot;&gt;&lt;a href=&quot;#向线程池提交任务&quot; class=&quot;headerlink&quot; title=&quot;向线程池提交任务&quot;&gt;&lt;/a&gt;向线程池提交任务&lt;/h3&gt;&lt;p&gt;可以使用两个方法向线程池提交任务，分别为&lt;code&gt;execute()&lt;/code&gt;和&lt;code&gt;submit()&lt;/code&gt;方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt;方法用于提交&lt;strong&gt;不需要返回值&lt;/strong&gt;的任务;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submit()&lt;/code&gt;方法用于提交&lt;strong&gt;需要返回值&lt;/strong&gt;的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;execute()&lt;/code&gt;：用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。通过源码可知&lt;code&gt;execute()&lt;/code&gt;方法输入的任务是一个Runnable类的实例。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;threadsPool.execute(new Runnable() {
  @Override
  public void run() {
      // TODO Auto-generated method stub
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;submit()&lt;/code&gt;：线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的&lt;code&gt;get()&lt;/code&gt;方法来获取返回值，&lt;code&gt;get()&lt;/code&gt;方法会阻塞当前线程直到任务完成，而使用&lt;code&gt;get(long timeout,TimeUnit unit)&lt;/code&gt;方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Future&amp;lt;Object&amp;gt; future = executor.submit(haveReturnValuetask);
try {
    Object s = future.get();
} catch (InterruptedException e) {
    // 处理中断异常
} catch (ExecutionException e) {
    // 处理无法执行任务异常
} finally {
    // 关闭线程池
    executor.shutdown();
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;关闭线程池&quot;&gt;&lt;a href=&quot;#关闭线程池&quot; class=&quot;headerlink&quot; title=&quot;关闭线程池&quot;&gt;&lt;/a&gt;关闭线程池&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdownNow()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们的原理是遍历线程池中的工作线程，然后逐个调用线程的&lt;code&gt;interrupt()&lt;/code&gt;方法来中断线程，所以无法响应中断的任务可能永远无法终止。只要调用了这两个关闭方法中的任意一个，&lt;code&gt;isShutdown()&lt;/code&gt;方法就会返回true。当所有的任务都已关闭后，才表示线程池关闭成功，这时调用&lt;code&gt;isTerminaed()&lt;/code&gt;方法会返回true。&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shutdownNow()&lt;/code&gt;首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而&lt;code&gt;shutdown()&lt;/code&gt;只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;至于应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调&lt;code&gt;shutdown()&lt;/code&gt;方法来关闭线程池，如果任务不一定要执行完，则可以调用&lt;code&gt;shutdownNow()&lt;/code&gt;方法。&lt;/p&gt;
&lt;h2 id=&quot;线程池原理&quot;&gt;&lt;a href=&quot;#线程池原理&quot; class=&quot;headerlink&quot; title=&quot;线程池原理&quot;&gt;&lt;/a&gt;线程池原理&lt;/h2&gt;&lt;h3 id=&quot;使用线程池的好处&quot;&gt;&lt;a href=&quot;#使用线程池的好处&quot; class=&quot;headerlink&quot; title=&quot;使用线程池的好处&quot;&gt;&lt;/a&gt;使用线程池的好处&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;降低资源消耗&lt;/strong&gt;。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高响应速度&lt;/strong&gt;。当任务到达时，任务可以不需要等到线程创建就能立即执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高线程的可管理性&lt;/strong&gt;。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;线程池的实现原理&quot;&gt;&lt;a href=&quot;#线程池的实现原理&quot; class=&quot;headerlink&quot; title=&quot;线程池的实现原理&quot;&gt;&lt;/a&gt;线程池的实现原理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下个流程。&lt;/li&gt;
&lt;li&gt;线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。&lt;/li&gt;
&lt;li&gt;线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。
    
    </summary>
    
    
      <category term="高并发" scheme="https://lishaojie1993.gitee.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="高并发" scheme="https://lishaojie1993.gitee.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="线程池" scheme="https://lishaojie1993.gitee.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>阻塞队列-BlockingQueue</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/16/BlockingQueue/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/16/BlockingQueue/</id>
    <published>2020-02-16T14:44:38.000Z</published>
    <updated>2020-05-12T04:01:27.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>阻塞队列：顾名思义，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用如下</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcfem6tcdyj30gf06gq4x.jpg" alt></p><ul><li>当阻塞队列是空时，试图从队列中获取元素的操作将被阻塞。</li><li>当阻塞队列是满时，试图往队列里添加元素的操作将被阻塞。</li></ul><p>在多线程领域，所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒。<a id="more"></a></p><h3 id="为什么需要阻塞队列"><a href="#为什么需要阻塞队列" class="headerlink" title="为什么需要阻塞队列"></a>为什么需要阻塞队列</h3><p>在concurrent包发布以前，多线程环境下我们需要去控制线程的细节，尤其还要兼顾效率和线程安全。阻塞队列的好处是我们不需要关心线程何时阻塞，何时唤醒，因为这一切都被<code>BlockingQueue</code>一手包办了。</p><h3 id="阻塞队列的架构体系"><a href="#阻塞队列的架构体系" class="headerlink" title="阻塞队列的架构体系"></a>阻塞队列的架构体系</h3><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcgqyg9zwhj30fi0gw0vm.jpg" alt></p><h3 id="阻塞队列的种类分析"><a href="#阻塞队列的种类分析" class="headerlink" title="阻塞队列的种类分析"></a>阻塞队列的种类分析</h3><p><code>ArrayBlockingQueue</code>：由数组结构组成的有界阻塞队列。</p><p><code>LinkedBlockingQueue</code>：由链表结构组成的有界（但大小默认值为Integer.MAX_VALUE）阻塞队列。</p><p>PriorityBlockingQueue：支持优先级排序的无界阻塞队列。</p><p>DelayQueue：使用优先级队列实现的延迟无界阻塞队列。</p><p><code>SynchronousQueue</code>：<strong>一个不存储元素的阻塞队列，即队列中只有一个元素，出队后才能再进。</strong></p><p>LinkedTransferQueue：由链表结构组成的无界阻塞队列。</p><p>LinkedBlocking<strong>Deque</strong>：由链表结构组成的双向阻塞队列。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>SynchronousQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t put 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t put 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t put 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t take 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t take 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t take 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下</span><span class="token comment" spellcheck="true">//t1     put 1</span><span class="token comment" spellcheck="true">//t2     take 1</span><span class="token comment" spellcheck="true">//t1     put 2</span><span class="token comment" spellcheck="true">//t2     take 2</span><span class="token comment" spellcheck="true">//t1     put 3</span><span class="token comment" spellcheck="true">//t2     take 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="阻塞队列的核心方法"><a href="#阻塞队列的核心方法" class="headerlink" title="阻塞队列的核心方法"></a>阻塞队列的核心方法</h3><table><thead><tr><th align="center">方法类型</th><th align="center">抛出异常</th><th align="center">特殊值</th><th align="center">阻塞</th><th align="center">超时</th></tr></thead><tbody><tr><td align="center">插入</td><td align="center">add(e)</td><td align="center">offer(e)</td><td align="center">put(e)</td><td align="center">offer(e, time,unit)</td></tr><tr><td align="center">移除</td><td align="center">remove()</td><td align="center">poll()</td><td align="center">take()</td><td align="center">poll(time,unit)</td></tr><tr><td align="center">检查</td><td align="center">element()</td><td align="center">peek()</td><td align="center">不可用</td><td align="center">不可用</td></tr></tbody></table><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><ul><li><p>使用add(e)进入队列，当阻塞队列满时会抛出：java.lang.IllegalStateException: Queue full</p></li><li><p>使用remove()移出队列，当阻塞队列空时会抛出：java.util.NoSuchElementException</p></li><li><p>使用element()检查队列，有值时返回首元素，队列为空时会抛出：java.util.NoSuchElementException</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.IllegalStateException: Queue full</span><span class="token comment" spellcheck="true">//    at java.util.AbstractQueue.add(AbstractQueue.java:98)</span><span class="token comment" spellcheck="true">//    at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:312)</span><span class="token comment" spellcheck="true">//    at BlockingQueueDemo.main(BlockingQueueDemo.java:10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h4><ul><li><p>使用offer(e)插入方法，成功返回true，<strong>失败返回false，不抛出异常</strong>。</p></li><li><p>使用poll()移除方法，成功返回出队列的元素，队列里面没有就返回null。</p></li><li><p>使用peek()检查队列，有值时返回首元素，队列为空时返回null。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//a</span><span class="token comment" spellcheck="true">//b</span><span class="token comment" spellcheck="true">//c</span><span class="token comment" spellcheck="true">//null</span><span class="token comment" spellcheck="true">//null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><ul><li><p>使用put(e)方法进入队列，队列满时阻塞，没有返回值。</p></li><li><p>使用take()方法移出队列，队列空时阻塞，没有返回值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//blockingQueue.put("d");</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//blockingQueue.take();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><ul><li><p>使用offer(e,time,unit)方法进入队列，可以设置阻塞超时时间。</p></li><li><p>使用poll(time,unit)方法移出队列，可以设置阻塞等待时间。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>5L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>5L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>5L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>5L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//a</span><span class="token comment" spellcheck="true">//b</span><span class="token comment" spellcheck="true">//c</span><span class="token comment" spellcheck="true">//null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="阻塞队列的用途"><a href="#阻塞队列的用途" class="headerlink" title="阻塞队列的用途"></a>阻塞队列的用途</h3><p><strong>使用BlockingQueue建造生产者消费者模型</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MySource</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 资源类</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> FLAG <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认开启，进行生产+消费操作</span>    <span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认0</span>    BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设计时范围尽量大</span>    <span class="token comment" spellcheck="true">//构造方法允许7中阻塞队列的传入</span>    <span class="token keyword">public</span> <span class="token function">MySource</span><span class="token punctuation">(</span>BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blockingQueue <span class="token operator">=</span> blockingQueue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定位问题（查看具体实现队列）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生产者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myProd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String data <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> retValue<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>            retValue <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>retValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 插入队列"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 插入队列"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 需求叫停，表示FLAG=false，生产结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 消费者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myCons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> result <span class="token operator">||</span> result<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                FLAG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 超过2秒钟没有取到数据，消费结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 消费队列"</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 停止方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>FLAG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProdCons_BlockQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化阻塞队列，传入ArrayBlockingQueue</span>        MySource mySource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 生产线程启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用生产者插入数据到队列</span>                mySource<span class="token punctuation">.</span><span class="token function">myProd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Prod"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 消费线程启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用消费者消费队列中的数据</span>                mySource<span class="token punctuation">.</span><span class="token function">myCons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Cons"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生产消费5秒后结束</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mySource<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下</span><span class="token comment" spellcheck="true">//java.util.concurrent.ArrayBlockingQueue</span><span class="token comment" spellcheck="true">//Prod     生产线程启动</span><span class="token comment" spellcheck="true">//Cons     消费线程启动</span><span class="token comment" spellcheck="true">//Prod     插入队列1成功</span><span class="token comment" spellcheck="true">//Cons     消费队列1成功</span><span class="token comment" spellcheck="true">//Prod     插入队列2成功</span><span class="token comment" spellcheck="true">//Cons     消费队列2成功</span><span class="token comment" spellcheck="true">//Prod     插入队列3成功</span><span class="token comment" spellcheck="true">//Cons     消费队列3成功</span><span class="token comment" spellcheck="true">//Prod     插入队列4成功</span><span class="token comment" spellcheck="true">//Cons     消费队列4成功</span><span class="token comment" spellcheck="true">//Prod     插入队列5成功</span><span class="token comment" spellcheck="true">//Cons     消费队列5成功</span><span class="token comment" spellcheck="true">//Prod     需求叫停，表示FLAG=false，生产结束</span><span class="token comment" spellcheck="true">//Cons     超过2秒钟没有取到数据，消费结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程控制级别</strong></p><p>1.0    synchronized、wait、notify</p><p>2.0    lock、await、singal</p><p>3.0    BlockingQueue</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;阻塞队列&quot;&gt;&lt;a href=&quot;#阻塞队列&quot; class=&quot;headerlink&quot; title=&quot;阻塞队列&quot;&gt;&lt;/a&gt;阻塞队列&lt;/h3&gt;&lt;p&gt;阻塞队列：顾名思义，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTgy1gcfem6tcdyj30gf06gq4x.jpg&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当阻塞队列是空时，试图从队列中获取元素的操作将被阻塞。&lt;/li&gt;
&lt;li&gt;当阻塞队列是满时，试图往队列里添加元素的操作将被阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在多线程领域，所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒。
    
    </summary>
    
    
    
      <category term="高并发" scheme="https://lishaojie1993.gitee.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="阻塞队列" scheme="https://lishaojie1993.gitee.io/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Java并发包-JUC</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/12/JUC/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/12/JUC/</id>
    <published>2020-02-12T10:11:40.000Z</published>
    <updated>2020-05-12T04:04:40.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p><strong>倒计时/发令枪</strong>，让一些线程阻塞，直到另一些线程完成一系列操作后才被唤醒。</p><p><code>CountDownLatch</code>主要有两个方法，当一个或多个线程调用<code>await()</code>方法时，调用线程会被阻塞。其他线程调用<code>countDown()</code>方法会将计数器减1（调用countDown的线程不会阻塞），当计数器的值变为0时，因调用<code>await()</code>方法被阻塞的线程会被唤醒，继续执行。</p><p>官方解释：<code>CountDownLatch</code>用给定的计数初始化。 <code>await()</code>方法阻塞，直到由于<code>countDown()</code>方法的调用而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的<code>await()</code>调用立即返回。 这是一个一次性的现象 - 计数无法重置。 如果您需要重置计数的版本，请考虑使用<code>CyclicBarrier</code>。<a id="more"></a></p><p><strong>CountDownLatchDemo</strong>：等待所有人上完自习离开，班长最后关门走人</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// CountDownLatch用给定的计数初始化</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 上完自习，离开教室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// countDown()方法的调用使当前计数达到零</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//},i+" "+CountryEnum.forEach_CountryEnum(i).getRetMessage()).start(); // 枚举实现自定义顺序</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// await方法阻塞，计数到0后所有线程被释放</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 班长最后关门走人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果如下：</span><span class="token comment" spellcheck="true">//1     上完自习，离开教室</span><span class="token comment" spellcheck="true">//5     上完自习，离开教室</span><span class="token comment" spellcheck="true">//4     上完自习，离开教室</span><span class="token comment" spellcheck="true">//2     上完自习，离开教室</span><span class="token comment" spellcheck="true">//6  上完自习，离开教室</span><span class="token comment" spellcheck="true">//3     上完自习，离开教室</span><span class="token comment" spellcheck="true">//main 班长最后关门走人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CountryEnum</strong>：枚举自定义顺序举例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> CountryEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ONE(1,v1,v2,v3,v4,v5…),通过增加变量可以实现自定义枚举。</span>    <span class="token function">ONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"齐"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TWO</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"楚"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">THREE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"燕"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FOUR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"韩"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FIVE</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"赵"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SEX</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"魏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> Integer retCode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> String retMessage<span class="token punctuation">;</span>    <span class="token function">CountryEnum</span><span class="token punctuation">(</span>Integer retCode<span class="token punctuation">,</span> String retMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>retCode <span class="token operator">=</span> retCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>retMessage <span class="token operator">=</span> retMessage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CountryEnum <span class="token function">forEach_CountryEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CountryEnum<span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> CountryEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>CountryEnum element <span class="token operator">:</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> element<span class="token punctuation">.</span><span class="token function">getRetCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> element<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下：</span><span class="token comment" spellcheck="true">//1 齐国，被灭</span><span class="token comment" spellcheck="true">//3 燕国，被灭</span><span class="token comment" spellcheck="true">//2 楚国，被灭</span><span class="token comment" spellcheck="true">//5 赵国，被灭</span><span class="token comment" spellcheck="true">//4 韩国，被灭</span><span class="token comment" spellcheck="true">//6 魏国，被灭</span><span class="token comment" spellcheck="true">//main 秦国，统一六国</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>字面意思是<strong>可循环</strong>（Cyclic）使用的<strong>屏障</strong>（Barrier）</p><p>让一组线程到达一个屏障（同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会打开，所有被拦截的线程才会继续执行。</p><p><code>CyclicBarrier</code>通过<code>await()</code>方法开启屏障。</p><p>构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个新的 CyclicBarrier ，当给定数量的线程（线程）等待时，它将跳闸，并且当屏障跳闸时不执行预定义的动作。</span><span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建一个新的 CyclicBarrier ，当给定数量的线程（线程）等待时，它将跳闸，当屏障跳闸时执行给定的屏障动作，由最后一个进入屏障的线程执行。</span><span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">,</span> Runnable barrierAction<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CyclicBarrierDemo</strong>：集齐7颗龙珠，召唤神龙</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"*******召唤神龙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> tempInt <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 收集到"</span> <span class="token operator">+</span> tempInt <span class="token operator">+</span> <span class="token string">"星球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//创建屏障，等待集齐7颗再执行给定方法</span>                      cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下：</span><span class="token comment" spellcheck="true">//1     收集到1星球</span><span class="token comment" spellcheck="true">//5     收集到5星球</span><span class="token comment" spellcheck="true">//4     收集到4星球</span><span class="token comment" spellcheck="true">//6     收集到6星球</span><span class="token comment" spellcheck="true">//3     收集到3星球</span><span class="token comment" spellcheck="true">//7     收集到7星球</span><span class="token comment" spellcheck="true">//2     收集到2星球</span><span class="token comment" spellcheck="true">//2*******召唤神龙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p><strong>信号量</strong>主要用于两个目的：</p><ol><li>用于多个共享资源的互斥使用。</li><li>用于并发线程的控制。</li></ol><p>构造方法（可以设置公平锁和非公平锁，默认空是false非公平）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个 Semaphore与给定数量的许可证和非公平公平设置。</span><span class="token function">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建一个 Semaphore与给定数量的许可证和给定的公平设置。</span><span class="token function">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SemaphoreDemo</strong>：非公平锁类似抢车位，公平锁类似餐厅排队等位</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟3个车位</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抢占车位</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 停车3秒后离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放车位</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果：</span><span class="token comment" spellcheck="true">//1     抢到车位</span><span class="token comment" spellcheck="true">//3     抢到车位</span><span class="token comment" spellcheck="true">//2     抢到车位</span><span class="token comment" spellcheck="true">//1     停车3秒后离开</span><span class="token comment" spellcheck="true">//3     停车3秒后离开</span><span class="token comment" spellcheck="true">//4     抢到车位</span><span class="token comment" spellcheck="true">//2     停车3秒后离开</span><span class="token comment" spellcheck="true">//6     抢到车位</span><span class="token comment" spellcheck="true">//5     抢到车位</span><span class="token comment" spellcheck="true">//4     停车3秒后离开</span><span class="token comment" spellcheck="true">//6     停车3秒后离开</span><span class="token comment" spellcheck="true">//5     停车3秒后离开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>CountDownLatch</code> : 一个线程(或者多个)， 等待另外N个线程完成某个事情之后才能执行。  </p><p><code>CyclicBarrier</code> : N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。</p><p>这样应该就清楚一点了，对于CountDownLatch来说，重点是那个“一个线程”, 是它在等待，而另外那N的线程在把“某个事情”做完之后可以继续执行，可以终止。而对于CyclicBarrier来说，重点是那N个线程，他们之间任何一个没有完成，所有的线程都必须等待。</p><ul><li><p>发令枪是一次性的，无法重置，循环屏障可重复使用。<code>reset()</code></p></li><li><p><strong>CountDownLatch</strong>： 现实例子：我在一个地方等着队友开发进度，只有我的队友到达了一个预定进度，然后，我才能开始开发。当所有队友到达了一个预定进度，我开始开发了，队友也不管我，继续他们的开发。</p></li><li><p><strong>CyclicBarrier</strong>：当我使用CyclicBarrier(int count,Thread task) 这个构造方法，现实例子：几个工程队修地铁的基础设施，只有当都完成之后，技术检验人员检验合格了（这个期间工程队就歇着），工程队接着进行下一步的铁轨铺设。</p></li></ul><p><code>Semaphore</code>中有一个”许可”的概念:</p><ul><li>访问特定资源前，先使用<code>acquire(1)</code>获得许可，如果许可数量为0，该线程则一直阻塞，直到有可用许可。</li><li>访问资源后，使用<code>release()</code>释放许可。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CountDownLatch&quot;&gt;&lt;a href=&quot;#CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch&quot;&gt;&lt;/a&gt;CountDownLatch&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;倒计时/发令枪&lt;/strong&gt;，让一些线程阻塞，直到另一些线程完成一系列操作后才被唤醒。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;主要有两个方法，当一个或多个线程调用&lt;code&gt;await()&lt;/code&gt;方法时，调用线程会被阻塞。其他线程调用&lt;code&gt;countDown()&lt;/code&gt;方法会将计数器减1（调用countDown的线程不会阻塞），当计数器的值变为0时，因调用&lt;code&gt;await()&lt;/code&gt;方法被阻塞的线程会被唤醒，继续执行。&lt;/p&gt;
&lt;p&gt;官方解释：&lt;code&gt;CountDownLatch&lt;/code&gt;用给定的计数初始化。 &lt;code&gt;await()&lt;/code&gt;方法阻塞，直到由于&lt;code&gt;countDown()&lt;/code&gt;方法的调用而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的&lt;code&gt;await()&lt;/code&gt;调用立即返回。 这是一个一次性的现象 - 计数无法重置。 如果您需要重置计数的版本，请考虑使用&lt;code&gt;CyclicBarrier&lt;/code&gt;。
    
    </summary>
    
    
    
      <category term="高并发" scheme="https://lishaojie1993.gitee.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="JUC" scheme="https://lishaojie1993.gitee.io/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>便捷开发双刃剑-Lombok</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/11/lombok/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/11/lombok/</id>
    <published>2020-02-11T14:10:11.000Z</published>
    <updated>2020-05-12T02:44:26.505Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h3><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p><p>Lombok项目是一个Java库，它会自动插入您的编辑器和构建工具中，从而使您的Java更加生动有趣。 永远不要再编写另一个getter或equals方法，带有一个注释的类将具有功能全面的生成器，自动执行日志记录变量等等。</p><h3 id="Lombok安装"><a href="#Lombok安装" class="headerlink" title="Lombok安装"></a>Lombok安装</h3><p>打开 IDEA 的 Preferences，选择 Plugins 选项，选中 MarketPlace 并搜索 lombok，安装后重启 IDEA 生效。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge6dfdn9lqj31ha0s2dse.jpg" alt="安装lombok插件"></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>在pojo实体类上引入相关注解即可。</p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge6dotehbxj310k0a0di5.jpg" alt style="zoom: 67%;"><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li>@Data：自动生成全参构造、Getter()、Setter()、equals()、hashCode()、toString()</li><li>@Setter：自动生成Setter()方法</li><li>@Getter：自动生成Getter()方法</li><li>@Log4j：自动生成属性名为 log 的日志对象</li><li>@AllArgsConstructor：自动生成全参数构造函数</li><li>@NoArgsConstructor：自动生成无参数构造函数</li><li>@EqualsAndHashCode：自动生成equals()和hashCode()</li><li>@NonNull：作用在参数上，自动抛出空指针异常</li><li>@Cleanup：自动关闭注解变量所代表的资源</li><li>@ToString：自动生成ToString()方法</li><li>@Value：作用在类上，自动生成全参构造方法，getter()、equals()、hashCode()、toString()</li><li>@SneakyThrows：作用在方法上，可以将方法中的代码用 try-catch 语句包裹起来，使用 @SneakyThrows(Exception.class) 的形式指定抛出哪种异常</li></ul><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><p>lombok是一把双刃剑，理解不到位的话在开发使用过程中很容易带来许多意想不到的问题。lombok的缺点如下：</p><ol><li><strong>较高的侵入性</strong>：如果项目组中有一个人使用了Lombok，那么其他人就必须也要安装IDE插件。否则就没办法协同开发。更重要的是，如果我们定义的一个jar包中使用了Lombok，那么就要求所有依赖这个jar包的所有应用都必须安装插件。</li><li><strong>可调试性低</strong>：不容易找到某个类中的某个属性的getter方法都被哪些类引用。</li><li><strong>影响升级</strong>：如果我们需要升级到某个新版本的JDK的时候，若其中的特性在Lombok中不支持的话就会受到影响。</li><li><strong>破坏封装性</strong>：一个类中的所有参数都自动提供了Getter()、Setter()方法。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方解释&quot;&gt;&lt;a href=&quot;#官方解释&quot; class=&quot;headerlink&quot; title=&quot;官方解释&quot;&gt;&lt;/a&gt;官方解释&lt;/h3&gt;&lt;p&gt;Project Lombok is a java library that automatically plugs into
      
    
    </summary>
    
    
    
      <category term="lombok" scheme="https://lishaojie1993.gitee.io/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/10/java8/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/10/java8/</id>
    <published>2020-02-10T09:12:54.000Z</published>
    <updated>2020-05-12T02:44:22.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码(将代码像数据一样进行传递)。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><ol><li><p>无参，无返回值</p><pre class="line-numbers language-java"><code class="language-java">Runnable r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是Lambda表达式写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>r2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个参数，无返回值</p><pre class="line-numbers language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> con2 <span class="token operator">=</span> <span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"一个是听的人当真了,一个是说的人当真了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据类型可以省略，因为可由编译器推断得出，这就是<strong>类型推断</strong>(比如<strong>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</strong>)</p><pre class="line-numbers language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> con2 <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"一个是听的人当真了,一个是说的人当真了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Lambda若只需要一个参数时，参数的小括号可省略</p><pre class="line-numbers language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> con2 <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"一个是听的人当真了,一个是说的人当真了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Lambda若需要两个或两个以上的参数，小括号不能省，多条执行语句，并且可能有返回值的情况</p><pre class="line-numbers language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当Lambda体只有一条语句时，大括号和return都可省略</p><pre class="line-numbers language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是常规写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是Lambda表达式写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        r2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Lambda表达式写法</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法引用</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator3 <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator3<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><strong>只包含一个抽象方法的接口，称为函数式接口</strong>。可以使用Lambda表达式来创建该接口的对象。我们可以在一个接口上使用@FunctionalInterface注解来检查它是否是一个函数式接口。</p><p>简单的说，<strong>Lambda表达式就是一个函数式接口的实例。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * When an object implementing interface &lt;code>Runnable&lt;/code> is used     * to create a thread, starting the thread causes the object's     * &lt;code>run&lt;/code> method to be called in that separately executing thread.     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用。</p><p><strong>方法引用可以看做是Lambda表达式深层次的表达</strong>。换句话说，方法引用<strong>就是Lambda表达式</strong>，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</p><blockquote><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致。</p><p>格式：使用操作符 “::” 将类(或对象)与方法名分隔开来。</p><p>如下三种主要使用情况：</p><ul><li><strong>对象 :: 实例方法名</strong>(非静态)</li><li><strong>类 :: 静态方法名</strong></li><li><strong>类 :: 实例方法名</strong></li></ul></blockquote><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>构造器引用和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。抽象方法的返回值类型即为构造器所属的类的类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span> supplier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Employee <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span> sup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Lambda表达式</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span> sup2 <span class="token operator">=</span> Employee <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构造器引用</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Employee<span class="token operator">></span> func1 <span class="token operator">=</span> id <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Employee emp1 <span class="token operator">=</span> func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Employee<span class="token operator">></span> func2 <span class="token operator">=</span> Employee <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构造器引用</span>    Employee emp2 <span class="token operator">=</span> func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><p>如果把数组看做是一个特殊的类，则写法与构造器引用一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> func1 <span class="token operator">=</span> length <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> func2 <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组引用</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强大的-Stream-API"><a href="#强大的-Stream-API" class="headerlink" title="强大的 Stream API"></a>强大的 Stream API</h2><ul><li>Java8中有两大最为重要的改变。第一个是Lambda表达式；另外一个则是Stream API。</li><li>Stream API (java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</li><li>Stream是Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。<strong>使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。</strong>也可以使用Stream API来并行执行操作。简而言之，StreamAPI提供了一种高效且易于使用的处理数据的方式。</li></ul><h3 id="Stream是什么"><a href="#Stream是什么" class="headerlink" title="Stream是什么"></a>Stream是什么</h3><p>Stream是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。</p><p><strong>“集合讲的是数据，Stream讲的是计算!”</strong></p><blockquote><p>注意</p><ol><li>Stream自己不会存储元素。</li><li>Stream不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ol></blockquote><h4 id="为什么要使用Stream-API-？"><a href="#为什么要使用Stream-API-？" class="headerlink" title="为什么要使用Stream API ？"></a>为什么要使用Stream API ？</h4><p>实际开发中，项目中多数数据源都来自于Mysql， Oracle等。 但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要Java层面去处理。</p><h4 id="Stream和Collection集合的区别？"><a href="#Stream和Collection集合的区别？" class="headerlink" title="Stream和Collection集合的区别？"></a>Stream和Collection集合的区别？</h4><p>Stream关注的是对数据的运算，与CPU打交道；</p><p>Collection集合关注的是数据的存储，与内存打交道。</p><h4 id="Stream操作的三个步骤"><a href="#Stream操作的三个步骤" class="headerlink" title="Stream操作的三个步骤"></a>Stream操作的三个步骤</h4><ol><li><p>创建Stream对象</p><p>一个数据源(如:集合、数组)，获取一个流。</p></li><li><p>一系列中间操作</p><p>一个中间操作链，对数据源的数据进行处理。</p></li><li><p>终止操作</p><p>只有执行终止操作，才执行中间操作链，并产生结果。之后，不会再被使用。</p></li></ol><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><ol><li><strong>通过集合</strong>：Java8中的Collection接口被扩展，提供了两个获取流的方法。</li><li><strong>通过数组</strong>：Java8中的Arrays的静态方法stream()可以获取数组流。</li><li><strong>通过Stream的of()</strong>：可以调用Stream类静态方法of()，通过显示值创建一个流。它可以接收任意数量的参数。</li><li><strong>创建无限流</strong>：可以使用静态方法Stream.iterate()和Stream.generate()，创建无限流。</li></ol><p>代码示例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamAPITest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建方式一:通过集合</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//default Stream&lt;E> stream():返回一个顺序流</span>        Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> stream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//default Stream&lt;E> parallelStream():返回一个并行流</span>        Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> parallelStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建方式二:通过数组</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        IntStream stream1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重载:IntStream LongStream DoubleStream</span>        Employee e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">}</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> stream2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//泛型:Stream&lt;Employee></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建方式三:通过Stream的of()</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建方式四:创建无限流(造数据)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//迭代方式</span>        Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">-</span><span class="token operator">></span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//随机生成</span>        Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理。而在终止操作时一次性全部处理，称为“惰性求值”。</p><h4 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter(Predicate  p)</td><td>接收Lambda,  从流中排除某些元素（<strong>过滤</strong>）</td></tr><tr><td>distinct()</td><td>筛选，通过流所生成元素的hashCode()和equals()去除重复元素</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</td></tr></tbody></table><p>代码示例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄大于26岁</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前3条数据</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳过前3条数据</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><table><thead><tr><th>方法 描述</th><th></th></tr></thead><tbody><tr><td><strong>map(Function f)</strong></td><td>接收一个函数作为参数,该函数会被应用到每个元素上,并将其映射成一个新的元素</td></tr><tr><td>mapToDouble(ToDoubleFunction f)</td><td>接收一个函数作为参数,该函数会被应用到每个元素上,产生一个新的DoubleStream</td></tr><tr><td>mapTolnt( ToIntFunction f)</td><td>接收一个函数作为参数,该函数会被应用到每个元 素上,产生一个新的IntStream</td></tr><tr><td>mapToLong(ToLongFunction f)</td><td>接收一个函数作为参数,该函数会被应用到每个元 素上,产生一个新的LongStream</td></tr><tr><td><strong>flatMap(Function f)</strong></td><td>接收一个函数作为参数,将流中的每个值都换成另一个流,然后把所有流连接成一个流</td></tr></tbody></table><p>代码示例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">,</span><span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//map(Function f)</span>    Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> characterStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>StreamAPITest<span class="token operator">:</span><span class="token operator">:</span>formStringToStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    characterStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//flatMap(Function f)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sorted()</td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td>sorted(Comparator com)</td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><p>代码示例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自然排序</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ageValue <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定制排序</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ageValue <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> ageValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先根据年龄大小排序，如果年龄相等则按照薪资排序</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如: List、 Integer，甚至是void。</p><p>流进行了终止操作后，不能再次使用。</p><h4 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素</td></tr><tr><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素</td></tr><tr><td>noneMatch(Predicate p)</td><td>检查是否没有匹配所有元素</td></tr><tr><td>findFirst()</td><td>返回第一个元素</td></tr><tr><td>findAny()</td><td>返回当前流中的任意元素</td></tr><tr><td>count()</td><td>返回流中元素总数</td></tr><tr><td>max(Comparator  c)</td><td>返回流中最大值</td></tr><tr><td>min(Comparator  c)</td><td>返回流中最小值</td></tr><tr><td>forEach(Consumer c)</td><td><strong>内部迭代</strong></td></tr></tbody></table><p><strong>内部迭代</strong>：使用Collection接口需要用户去做迭代，称为外部迭代。相反Stream API使用内部迭代，它帮你把迭代做了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> allMatch <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allMatch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索是否所有人的年龄都大于18岁</span>    <span class="token keyword">boolean</span> anyMatch <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyMatch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索是否所有人的薪水都大于1000</span>    <span class="token keyword">boolean</span> noneMatch <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"侠"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneMatch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索是否没有末尾叫"侠"的人</span>    Optional<span class="token operator">&lt;</span>Employee<span class="token operator">></span> first <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索第一个数据</span>    Optional<span class="token operator">&lt;</span>Employee<span class="token operator">></span> any <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>any<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索随机的数据</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索个数</span>    Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ageStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> maxAge <span class="token operator">=</span> ageStream<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索最大年龄的数据</span>    Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> salaryStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> minSalary <span class="token operator">=</span> salaryStream<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minSalary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检索最低薪水的数据</span>    employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//内部迭代遍历</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reduce(T iden, BinaryOperator b)</td><td>可以将流中元素反复结合起来,得到一个值。返回 T</td></tr><tr><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来,得到一个值。返回 Optional&lt;T&gt;</td></tr></tbody></table><p>备注: map和reduce的连接通常称为map-reduce模式，因Google用它来进行网络搜索而出名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0是初始值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求和</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> salaryStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Employee<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> sumMoney <span class="token operator">=</span> salaryStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sumMoney<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求薪水总和,等同于reduce(d1,d2) -> (d1+d2);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>collect(Collector c)</td><td>将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</td></tr></tbody></table><p>Collector接口中方法的实现决定了如何对流执行收集的操作(如收集到List、Set、Map)。</p><p>另外，Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test23</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employeeList <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    employeeList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employeeSet <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    employeeSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h2><ul><li>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类 已经成为Java 8类库的一部分。</li><li><strong>Optional&lt;T&gt;类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用null表示一个值不存在，现在Optional可以更好的表达这个概念。并且可以避免空指针异常。</strong></li><li>Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</li></ul><p>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p><ul><li>创建Optional类对象的方法：<ul><li><code>Optional.of(T t)</code>：创建一个Optional实例，t必须非空；</li><li><code>Optional.empty()</code>：创建一个空的Optional实例；</li><li><code>Optional.ofNullable(T t)</code>：t可以为null。</li></ul></li><li>判断Optional容器中是否包含对象：<ul><li><code>boolean isPresent()</code>：判断是否包含对象；</li><li><code>void ifPresent(Consumer&lt;? super T&gt; consumer)</code>：如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。</li></ul></li><li>获取Optional容器的对象：<ul><li><code>T get()</code>：如果调用对象包含值，返回该值，否则抛异常；</li><li><code>T orElse(T other)</code>：如果有值则将其返回，否则返回指定的other对象；</li><li><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code>：如果有值则将其返回，否则返回由Supplier接口实现提供的对象；</li><li><code>T orElse Throw(Supplier&lt;? extends X&gt; exceptionSupplier)</code>：如果有值则将其返回，否则抛出由Supplier接口实现提供的异常。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lambda表达式&quot;&gt;&lt;a href=&quot;#Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;Lambda表达式&quot;&gt;&lt;/a&gt;Lambda表达式&lt;/h2&gt;&lt;p&gt;Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码(
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://lishaojie1993.gitee.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>几何星空连线背景-canvas</title>
    <link href="https://lishaojie1993.gitee.io/2020/02/05/star/"/>
    <id>https://lishaojie1993.gitee.io/2020/02/05/star/</id>
    <published>2020-02-05T15:10:37.000Z</published>
    <updated>2020-05-12T04:06:33.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近受疫情的影响，整天宅在家无所事事，于是就想给自己的博客添加一个动态的背景，试了各种GIF和视频，动画效果有了不过CPU占用太高，浏览体验不佳，最后选择了这个几何星空背景页面，参考网上大神的代码自己改了一份，效果如下。</p><h2 id="星空入口"><a href="#星空入口" class="headerlink" title="星空入口"></a>星空入口</h2><p>点击传送门可以预览效果：<a href="https://lishaojie1993.gitee.io/demo/star.html">传送门</a><a id="more"></a></p><h2 id="预览实现"><a href="#预览实现" class="headerlink" title="预览实现"></a>预览实现</h2><h4 id="1、在GitHub上新建repository"><a href="#1、在GitHub上新建repository" class="headerlink" title="1、在GitHub上新建repository"></a>1、在GitHub上新建repository</h4><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybply1gc1thz4junj316s0my7ej.jpg" alt></p><h4 id="2、点击setting，修改GitHub-Pages"><a href="#2、点击setting，修改GitHub-Pages" class="headerlink" title="2、点击setting，修改GitHub Pages"></a>2、点击setting，修改GitHub Pages</h4><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybply1gc1tjizss0j316k0k47d1.jpg" alt></p><h4 id="3、将网页文件上传到GitHub（访问）www-lishaojie-top-demo-star-html"><a href="#3、将网页文件上传到GitHub（访问）www-lishaojie-top-demo-star-html" class="headerlink" title="3、将网页文件上传到GitHub（访问）www.lishaojie.top/demo/star.html"></a>3、将网页文件上传到GitHub（访问）<a href="http://www.lishaojie.top/demo/star.html" target="_blank" rel="noopener">www.lishaojie.top/demo/star.html</a></h4><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/0082zybply1gc1tp8p8a3j31j00k0k0f.jpg" alt></p><hr><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>几何星空连线背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 可调参数</span><span class="token keyword">var</span> BACKGROUND_COLOR <span class="token operator">=</span> <span class="token string">"rgba(0,43,54,1)"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 背景颜色</span><span class="token keyword">var</span> POINT_NUM <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 星星数目</span><span class="token keyword">var</span> POINT_COLOR <span class="token operator">=</span> <span class="token string">"rgba(255,255,255,0.7)"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 点的颜色</span><span class="token keyword">var</span> LINE_LENGTH <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 点之间连线长度(的平方)</span><span class="token comment" spellcheck="true">// 创建背景画布</span><span class="token keyword">var</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cvs<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>cvs<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>cvs<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"\    position:fixed;\    top:0px;\    left:0px;\    z-index:-1;\    opacity:1.0;\    "</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>cvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机数函数</span><span class="token keyword">function</span> <span class="token function">randomInt</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">randomFloat</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造点类</span><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">randomFloat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cvs<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">randomFloat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cvs<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token function">randomFloat</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> angle <span class="token operator">=</span> <span class="token function">randomFloat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> POINT_COLOR<span class="token punctuation">;</span><span class="token punctuation">}</span>Point<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>move <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>dx<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">></span> cvs<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> cvs<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dx <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>dx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dy<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>dy<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">></span> cvs<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> cvs<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>dy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Point<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">initPoints</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        points<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//鼠标</span>p0<span class="token punctuation">.</span>dx <span class="token operator">=</span> p0<span class="token punctuation">.</span>dy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> degree <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p0<span class="token punctuation">.</span>x <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    p0<span class="token punctuation">.</span>y <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>    degree <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>    p0<span class="token punctuation">.</span>x <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    p0<span class="token punctuation">.</span>y <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>    degree <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>    p0<span class="token punctuation">.</span>x <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>    p0<span class="token punctuation">.</span>y <span class="token operator">=</span> ev<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p0<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    p0<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> deg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dx <span class="token operator">=</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">var</span> dy <span class="token operator">=</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">var</span> dis2 <span class="token operator">=</span> dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis2 <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> LINE_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dis2 <span class="token operator">></span> LINE_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">===</span> p0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                p2<span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token operator">=</span> dx <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span>                p2<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> dy <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.05</span> <span class="token operator">-</span> dis2 <span class="token operator">/</span> LINE_LENGTH<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2</span> <span class="token operator">*</span> deg<span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"rgba(255,255,255,"</span> <span class="token operator">+</span> t <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//绘制每一帧</span><span class="token keyword">function</span> <span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cvs<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>    cvs<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> BACKGROUND_COLOR<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cvs<span class="token punctuation">.</span>width<span class="token punctuation">,</span> cvs<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>p0<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> points <span class="token punctuation">:</span> <span class="token punctuation">[</span>p0<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>drawFrame<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">initPoints</span><span class="token punctuation">(</span>POINT_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近受疫情的影响，整天宅在家无所事事，于是就想给自己的博客添加一个动态的背景，试了各种GIF和视频，动画效果有了不过CPU占用太高，浏览体验不佳，最后选择了这个几何星空背景页面，参考网上大神的代码自己改了一份，效果如下。&lt;/p&gt;
&lt;h2 id=&quot;星空入口&quot;&gt;&lt;a href=&quot;#星空入口&quot; class=&quot;headerlink&quot; title=&quot;星空入口&quot;&gt;&lt;/a&gt;星空入口&lt;/h2&gt;&lt;p&gt;点击传送门可以预览效果：&lt;a href=&quot;https://lishaojie1993.gitee.io/demo/star.html&quot;&gt;传送门&lt;/a&gt;
    
    </summary>
    
    
    
      <category term="DIY" scheme="https://lishaojie1993.gitee.io/tags/DIY/"/>
    
      <category term="star-line" scheme="https://lishaojie1993.gitee.io/tags/star-line/"/>
    
  </entry>
  
  <entry>
    <title>GitHub骚操作</title>
    <link href="https://lishaojie1993.gitee.io/2020/01/20/github/"/>
    <id>https://lishaojie1993.gitee.io/2020/01/20/github/</id>
    <published>2020-01-20T09:25:02.000Z</published>
    <updated>2020-05-12T04:04:03.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="in-限制搜索范围"><a href="#in-限制搜索范围" class="headerlink" title="in:限制搜索范围"></a>in:限制搜索范围</h2><p>公式：<strong>xxx in:name｜description｜readme</strong></p><ul><li>xxx in:name 项目名包含xxx的</li><li>xxx in:description 项目描述包含xxx的</li><li>xxx in:readme 项目的readme文件中包含xxx的</li></ul><p>组合使用（查秒杀系统）：<strong>seckill in:<code>name</code>,<code>description</code>,<code>readme</code></strong><a id="more"></a></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcnhjlmxiej31l30u0qv5.jpg" alt></p><h2 id="stars-｜forks-数量区间"><a href="#stars-｜forks-数量区间" class="headerlink" title="stars:｜forks:数量区间"></a>stars:｜forks:数量区间</h2><p>公式：<strong>xxx stars:</strong><kbd>></kbd><kbd><</kbd><kbd>=</kbd><strong>｜</strong><kbd>..</kbd></p><p>查找stars数大于等于5000的springboot项目：<strong>springboot stars:&gt;=5000</strong></p><p>查找fork数大于300的springcloud项目：<strong>springcloud forks:&gt;300</strong></p><p>组合使用：查找fork在100～200之间并且star数在80～100之间的springboot项目</p><p><strong>seckill forks:100..2000 stars:1000..2000</strong>：缩小查找范围</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcnhnxi6rrj31em0n6e2t.jpg" alt></p><h2 id="awesome-加强搜索"><a href="#awesome-加强搜索" class="headerlink" title="awesome 加强搜索"></a>awesome 加强搜索</h2><p>搜索优秀的比如redis相关的项目，包括框架、教程等。</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcnhtnze9ij31hk0u0u0x.jpg" alt></p><h2 id="高亮显示某一行代码"><a href="#高亮显示某一行代码" class="headerlink" title="高亮显示某一行代码"></a>高亮显示某一行代码</h2><ul><li>单行高亮：<strong>GitHub地址+#L行数</strong></li><li>多行高亮：<strong>GitHub地址+#L行数-L行数</strong></li></ul><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcnh72xxn6j313q0jynh5.jpg" alt></p><h2 id="项目内搜索"><a href="#项目内搜索" class="headerlink" title="项目内搜索"></a>项目内搜索</h2><ul><li><p>进入项目页后按<kbd>t</kbd>：激活文件查看器，可以直接搜索内容</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcnhbtga2qj31aq0u07wh.jpg" alt></p></li><li><p>进入代码页后按<kbd>l</kbd>：输入数字，跳到代码中的具体哪一行</p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcnhdhoeqjj31jo0gmk87.jpg" alt></p></li></ul><p>更多快捷键操作请点击：<a href="https://help.github.com/en/github/getting-started-with-github/keyboard-shortcuts" target="_blank" rel="noopener">https://help.github.com/en/github/getting-started-with-github/keyboard-shortcuts</a></p><h2 id="搜索某个地区内的大佬"><a href="#搜索某个地区内的大佬" class="headerlink" title="搜索某个地区内的大佬"></a>搜索某个地区内的大佬</h2><p>location:地区｜language:语言</p><p>例如：<strong>location:beijing language:java</strong></p><p><img src="/medias/loading.gif" data-original="https://tva1.sinaimg.cn/large/00831rSTgy1gcngwj9gyrj316o0u0npd.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;in-限制搜索范围&quot;&gt;&lt;a href=&quot;#in-限制搜索范围&quot; class=&quot;headerlink&quot; title=&quot;in:限制搜索范围&quot;&gt;&lt;/a&gt;in:限制搜索范围&lt;/h2&gt;&lt;p&gt;公式：&lt;strong&gt;xxx in:name｜description｜readme&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xxx in:name 项目名包含xxx的&lt;/li&gt;
&lt;li&gt;xxx in:description 项目描述包含xxx的&lt;/li&gt;
&lt;li&gt;xxx in:readme 项目的readme文件中包含xxx的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组合使用（查秒杀系统）：&lt;strong&gt;seckill in:&lt;code&gt;name&lt;/code&gt;,&lt;code&gt;description&lt;/code&gt;,&lt;code&gt;readme&lt;/code&gt;&lt;/strong&gt;
    
    </summary>
    
    
    
      <category term="GitHub" scheme="https://lishaojie1993.gitee.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Java反射&amp;动态代理</title>
    <link href="https://lishaojie1993.gitee.io/2020/01/20/proxy/"/>
    <id>https://lishaojie1993.gitee.io/2020/01/20/proxy/</id>
    <published>2020-01-20T08:09:49.000Z</published>
    <updated>2020-05-12T02:44:39.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。</p><h3 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h3><p>在 Java 程序中许多对象在运行时都会出现两种类型：编译时类型和运行时类型。 </p><p>编译时的类型由声明对象时使用的类型来决定，运行时的类型由实际赋值给对象的类型决定 。如：</p><pre class="line-numbers language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中编译时类型为 Person，运行时类型为 Student。</p><h3 id="Java反射API"><a href="#Java反射API" class="headerlink" title="Java反射API"></a>Java反射API</h3><p>java.lang.Class 类：反射的核心类，可以获取类的属性，方法等信息。</p><p>java.lang.reflect.Field 类：表示类的成员变量，可以用来获取和设置类之中的属性值。</p><p>java.lang.reflect.Method 类：表示类的方法，它可以用来获取类中的方法信息或者执行方法。</p><p>java.lang.reflect.Constructor 类：表示类的构造方法。</p><h3 id="关于Class类的理解"><a href="#关于Class类的理解" class="headerlink" title="关于Class类的理解"></a>关于Class类的理解</h3><p>简单来说，Class的实例就对应着一个<strong>运行时类</strong>。加载到内存中的运行时类会缓存一定的时间，在此时间内，我们可以通过不同的方式来获取此运行时类。</p><h3 id="获取Class实例的方式"><a href="#获取Class实例的方式" class="headerlink" title="获取Class实例的方式"></a>获取Class实例的方式</h3><ol><li><p>调用某个对象的 getClass()方法</p><pre class="line-numbers language-java"><code class="language-java">Person p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span><span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用某个类的 class 属性来获取该类对应的 Class 对象</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span><span class="token operator">=</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 Class 类中的 forName()静态方法(最安全/性能最好)</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"类的全路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//(最常用)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>当我们获得了想要操作的类的 Class 对象后，可以通过 Class 类中的方法获取并查看该类中的方法和属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取 Person 类的 Class 对象</span>Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取 Person 类的所有方法信息</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> method<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Method m<span class="token operator">:</span>method<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取 Person 类的所有成员属性信息</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> field<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field f<span class="token operator">:</span>field<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取 Person 类的所有构造方法信息</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> constructor<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Constructor c<span class="token operator">:</span>constructor<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h3><p>方式一：new + 构造器</p><p>方式二：Xxx、Xxxs、XxxFactory、XxxBuilder</p><p>方式三：通过反射</p><h3 id="反射创建对象"><a href="#反射创建对象" class="headerlink" title="反射创建对象"></a>反射创建对象</h3><ol><li><p><strong>调用Class对象的newInstance()</strong></p><p>使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求该 Class 对象对应的类有默认的空构造器。</p></li><li><p><strong>调用Constructor对象的newInstance()</strong></p><p>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance()方法来创建 Class 对象对应类的实例，通过这种方法可以选定构造方法创建实例。</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取 Person 类的 Class 对象</span>Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最常用的反射方式</span><span class="token comment" spellcheck="true">//调用Class对象的newInstance()</span>Person p<span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Class对象的show()方法</span>Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclareMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数2指定获取方法的形参列表</span>method<span class="token punctuation">.</span><span class="token function">setAccessiable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保证当前方法是可访问的</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"CH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给方法赋值的实参</span><span class="token comment" spellcheck="true">//获取Constructor对象</span>Constructor c<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Constructor对象的newInstance()</span>Person p1<span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反射的应用-动态代理"><a href="#反射的应用-动态代理" class="headerlink" title="反射的应用-动态代理"></a>反射的应用-动态代理</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Avenger</span> <span class="token punctuation">{</span>    String <span class="token function">getName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">useWeapon</span><span class="token punctuation">(</span>String weapon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IronMan</span> <span class="token keyword">implements</span> <span class="token class-name">Avenger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm IronMan! Avenger Leader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"我是 "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useWeapon</span><span class="token punctuation">(</span>String weapon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我使用 "</span> <span class="token operator">+</span> weapon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SpiderMan</span> <span class="token keyword">implements</span> <span class="token class-name">Avenger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm SpiderMan! Avenger lovely"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"我是 "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useWeapon</span><span class="token punctuation">(</span>String weapon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我使用 "</span> <span class="token operator">+</span> weapon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代理工厂</span><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用此方法,根据传入的被代理类对象创建并返回一个代理类对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//obj参数是被代理类的对象</span>        MyInvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将被代理对象传给 MyInvocationHandler</span>        <span class="token comment" spellcheck="true">//返回动态创建出的代理对象</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明并获取被代理对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当我们通过DynamicProxyTest类的代理对象调用其方法时,就会自动调用invoke()方法.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用被代理对象进行方法回调</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//没有显式的定义代理类,而是根据传入的被代理对象来动态的创建代理类,体现了反射的动态性</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建被代理对象</span>        IronMan ironMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IronMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射创建代理对象</span>        Avenger proxyInstance1 <span class="token operator">=</span> <span class="token punctuation">(</span>Avenger<span class="token punctuation">)</span> ProxyFactory<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>ironMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用代理对象调用被代理对象的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyInstance1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">"斯塔克"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance1<span class="token punctuation">.</span><span class="token function">useWeapon</span><span class="token punctuation">(</span><span class="token string">"激光武器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SpiderMan spiderMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpiderMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Avenger proxyInstance2 <span class="token operator">=</span> <span class="token punctuation">(</span>Avenger<span class="token punctuation">)</span> ProxyFactory<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>spiderMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyInstance2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">"皮特儿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance2<span class="token punctuation">.</span><span class="token function">useWeapon</span><span class="token punctuation">(</span><span class="token string">"蜘蛛网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于动态代理的AOP"><a href="#基于动态代理的AOP" class="headerlink" title="基于动态代理的AOP"></a>基于动态代理的AOP</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//在MyInvocationHandler中的invoke()方法前后添加如下代码</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Utils utils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回调方法之前获取方法信息</span>        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用被代理对象进行方法回调</span>        utils<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回调方法之后追加日志输出</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;反射机制&quot;&gt;&lt;a href=&quot;#反射机制&quot; class=&quot;headerlink&quot; title=&quot;反射机制&quot;&gt;&lt;/a&gt;反射机制&lt;/h3&gt;&lt;p&gt;在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://lishaojie1993.gitee.io/tags/Java/"/>
    
  </entry>
  
</feed>
